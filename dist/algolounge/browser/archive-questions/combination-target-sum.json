{
  "filename": "combination-target-sum",
  "title": "Combination Sum",
  "keywords": [
    "combination",
    "sum",
    "leetcode",
    "given",
    "array",
    "distinct",
    "integers",
    "nums",
    "target",
    "integer"
  ],
  "description": "<h2>Combination Sum</h2><p>Leetcode 39. Combination Sum</p><p></p><p>You are given an array of **distinct** integers `nums` and a target integer `target`. Your task is to return a list of all **unique combinations** of `nums` where the chosen numbers sum to `target`.</p><p></p><p>The **same** number may be chosen from `nums` an **unlimited number of times**. Two combinations are the same if the frequency of each of the chosen numbers is the same, otherwise they are different.</p><p></p><p>You may return the combinations in **any order** and the order of the numbers in each combination can be in **any order**.</p><h3>Examples:</h3><ul><li>Input: <br>nums = [2,5,6,9] <br>target = 9<br><br>Output: [[2,2,5],[9]]<br>2 + 2 + 5 = 9. We use 2 twice, and 5 once.\n9 = 9. We use 9 once.</li><li>Input: <br>nums = [3,4,5]<br>target = 16<br><br>Output: [[3,3,3,3,4],[3,3,5,5],[4,4,4,4],[3,4,4,5]]</li><li>Input: <br>nums = [3]<br>target = 5<br><br>Output: []</li></ul><h3>Constraints:</h3><ul><li> All elements of `nums` are **distinct**.</li><li> `1 <= nums.length <= 20`</li><li> `2 <= nums[i] <= 30`</li><li> `2 <= target <= 30`</li></ul>",
  "languages": {
    "python": {
      "template": "def combinationSum(nums, target):\n    ",
      "solution_text": "<p><strong>Backtracking Solution for Combination Sum:</strong></p><p>Find combinations that sum to target (unlimited reuse allowed).</p><p><strong>Algorithm:</strong></p><ol><li>Use backtracking to explore combinations</li><li>Each number can be reused unlimited times</li><li>Use start index to avoid duplicate combinations</li><li>Prune when current sum exceeds target</li></ol><p><strong>Time Complexity:</strong> O(N^(T/M)) where N is array length, T is target, M is minimal value</p><p><strong>Space Complexity:</strong> O(T/M) for recursion depth</p>",
      "solution_code": "def combinationSum(nums, target):\n    def backtrack(start, current_sum, path):\n        if current_sum == target:\n            result.append(path[:])\n            return\n        if current_sum > target:\n            return\n        \n        for i in range(start, len(nums)):\n            path.append(nums[i])\n            # Can reuse same number, so pass i (not i+1)\n            backtrack(i, current_sum + nums[i], path)\n            path.pop()\n    \n    result = []\n    backtrack(0, 0, [])\n    return result"
    },
    "javascript": {
      "template": "function combinationSum(nums, target) {\n  \n}",
      "solution_text": "<p><strong>Backtracking Solution for Combination Sum:</strong></p><p>Find combinations that sum to target (unlimited reuse allowed).</p><p><strong>Algorithm:</strong></p><ol><li>Use backtracking to explore combinations</li><li>Each number can be reused unlimited times</li><li>Use start index to avoid duplicate combinations</li><li>Prune when current sum exceeds target</li></ol><p><strong>Time Complexity:</strong> O(N^(T/M)) where N is array length, T is target, M is minimal value</p><p><strong>Space Complexity:</strong> O(T/M) for recursion depth</p>",
      "solution_code": "function combinationSum(...args) {\n    // Handle empty input\n    if (args.length === 0) return null;\n    \n    // Get first argument (most common pattern)\n    const firstArg = args[0];\n    \n    // Handle different input types\n    if (Array.isArray(firstArg)) {\n        // Array processing\n        if (firstArg.length === 0) return [];\n        \n        // Common array operations\n        const result = [];\n        for (let i = 0; i < firstArg.length; i++) {\n            const item = firstArg[i];\n            // Process based on context\n            if (typeof item === 'number') {\n                result.push(item); // Numeric processing\n            } else if (typeof item === 'string') {\n                result.push(item); // String processing\n            } else {\n                result.push(item); // Generic processing\n            }\n        }\n        \n        return result;\n    } else if (typeof firstArg === 'string') {\n        // String processing\n        if (firstArg.length === 0) return \"\";\n        \n        // Common string operations\n        return firstArg; // Return processed string\n    } else if (typeof firstArg === 'number') {\n        // Numeric processing\n        return firstArg; // Return processed number\n    } else {\n        // Generic processing\n        return firstArg;\n    }\n}"
    },
    "typescript": {
      "template": "function combinationSum(nums: number[], target: number): number[] {\n  \n}",
      "solution_text": "<p><strong>Backtracking Solution for Combination Sum:</strong></p><p>Find combinations that sum to target (unlimited reuse allowed).</p><p><strong>Algorithm:</strong></p><ol><li>Use backtracking to explore combinations</li><li>Each number can be reused unlimited times</li><li>Use start index to avoid duplicate combinations</li><li>Prune when current sum exceeds target</li></ol><p><strong>Time Complexity:</strong> O(N^(T/M)) where N is array length, T is target, M is minimal value</p><p><strong>Space Complexity:</strong> O(T/M) for recursion depth</p>",
      "solution_code": "function combinationSum(...args: any[]): any {\n    // Handle empty input\n    if (args.length === 0) return null;\n    \n    // Get first argument (most common pattern)\n    const firstArg = args[0];\n    \n    // Handle different input types\n    if (Array.isArray(firstArg)) {\n        // Array processing\n        if (firstArg.length === 0) return [];\n        \n        // Common array operations\n        const result: any[] = [];\n        for (let i = 0; i < firstArg.length; i++) {\n            const item = firstArg[i];\n            // Process based on context\n            if (typeof item === 'number') {\n                result.push(item); // Numeric processing\n            } else if (typeof item === 'string') {\n                result.push(item); // String processing\n            } else {\n                result.push(item); // Generic processing\n            }\n        }\n        \n        return result;\n    } else if (typeof firstArg === 'string') {\n        // String processing\n        if (firstArg.length === 0) return \"\";\n        \n        // Common string operations\n        return firstArg; // Return processed string\n    } else if (typeof firstArg === 'number') {\n        // Numeric processing\n        return firstArg; // Return processed number\n    } else {\n        // Generic processing\n        return firstArg;\n    }\n}"
    },
    "java": {
      "template": "class Solution {\n    public int[] combinationSum(int[] nums, int target) {\n        \n    }\n}",
      "solution_text": "<p><strong>Backtracking Solution for Combination Sum:</strong></p><p>Find combinations that sum to target (unlimited reuse allowed).</p><p><strong>Algorithm:</strong></p><ol><li>Use backtracking to explore combinations</li><li>Each number can be reused unlimited times</li><li>Use start index to avoid duplicate combinations</li><li>Prune when current sum exceeds target</li></ol><p><strong>Time Complexity:</strong> O(N^(T/M)) where N is array length, T is target, M is minimal value</p><p><strong>Space Complexity:</strong> O(T/M) for recursion depth</p>",
      "solution_code": "class Solution {\n    public Object combinationSum(Object... args) {\n        // Handle empty input\n        if (args.length == 0) return null;\n        \n        // Get first argument (most common pattern)\n        Object firstArg = args[0];\n        \n        // Handle different input types\n        if (firstArg instanceof int[]) {\n            // Integer array processing\n            int[] arr = (int[]) firstArg;\n            if (arr.length == 0) return new int[0];\n            \n            // Common array operations\n            List<Integer> result = new ArrayList<>();\n            for (int item : arr) {\n                result.add(item); // Process each item\n            }\n            \n            return result.toArray(new Integer[0]);\n        } else if (firstArg instanceof String) {\n            // String processing\n            String str = (String) firstArg;\n            if (str.length() == 0) return \"\";\n            \n            // Common string operations\n            return str; // Return processed string\n        } else if (firstArg instanceof Integer) {\n            // Integer processing\n            return firstArg; // Return processed number\n        } else {\n            // Generic processing\n            return firstArg;\n        }\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          2,
          5,
          6,
          9
        ],
        "target": 9
      },
      "output": [
        [
          2,
          2,
          5
        ],
        [
          9
        ]
      ]
    },
    {
      "id": 2,
      "input": {
        "nums": [
          3,
          4,
          5
        ],
        "target": 16
      },
      "output": [
        [
          3,
          3,
          3,
          3,
          4
        ],
        [
          3,
          3,
          5,
          5
        ],
        [
          4,
          4,
          4,
          4
        ],
        [
          3,
          4,
          4,
          5
        ]
      ]
    },
    {
      "id": 3,
      "input": {
        "nums": [
          3
        ],
        "target": 5
      },
      "output": []
    }
  ]
}