{
  "filename": "daily-temperatures",
  "title": "Daily Temperatures",
  "keywords": [
    "daily",
    "temperatures",
    "leetcode",
    "739",
    "given",
    "array",
    "integers",
    "where",
    "represents",
    "ith"
  ],
  "description": "<h2>Daily Temperatures</h2><p>Leetcode 739. Daily Temperatures</p><p></p><p>You are given an array of integers `temperatures` where `temperatures[i]` represents the daily temperatures on the `ith` day.</p><p>    </p><p>Return an array `result` where `result[i]` is the number of days after the `ith` day before a warmer temperature appears on a future day. If there is no day in the future where a warmer temperature will appear for the `ith` day, set `result[i]` to `0` instead.</p><h3>Examples:</h3><ul><li>Input: temperatures = [30,38,30,36,35,40,28]<br><br>Output: [1,4,1,2,1,0,0]</li><li>Input: temperatures = [22,21,20]<br><br>Output: [0,0,0]</li></ul><h3>Constraints:</h3><ul><li> `1 <= temperatures.length <= 1000`.</li><li> `1 <= temperatures[i] <= 100`</li></ul>",
  "languages": {
    "python": {
      "template": "def dailyTemperatures(temperatures):\n    ",
      "solution_text": "<p><strong>Monotonic Stack Solution for Daily Temperatures:</strong></p><p>Find next warmer temperature for each day using a decreasing monotonic stack.</p><p><strong>Algorithm:</strong></p><ol><li>Use stack to store indices of temperatures</li><li>For each temperature, pop indices from stack while current temp is warmer</li><li>Calculate days difference for each popped index</li><li>Push current index to stack</li></ol><p><strong>Time Complexity:</strong> O(n) - each element pushed and popped at most once</p><p><strong>Space Complexity:</strong> O(n) for the stack and result array</p>",
      "solution_code": "def dailyTemperatures(temperatures):\n    n = len(temperatures)\n    result = [0] * n\n    stack = []  # Stack to store indices\n    \n    for i in range(n):\n        # While stack not empty and current temperature is warmer\n        # than temperature at index stored at top of stack\n        while stack and temperatures[i] > temperatures[stack[-1]]:\n            prev_index = stack.pop()\n            result[prev_index] = i - prev_index\n        \n        stack.append(i)\n    \n    return result"
    },
    "javascript": {
      "template": "function dailyTemperatures(temperatures) {\n  \n}",
      "solution_text": "<p><strong>Monotonic Stack Solution for Daily Temperatures:</strong></p><p>Find next warmer temperature for each day using a decreasing monotonic stack.</p><p><strong>Algorithm:</strong></p><ol><li>Use stack to store indices of temperatures</li><li>For each temperature, pop indices from stack while current temp is warmer</li><li>Calculate days difference for each popped index</li><li>Push current index to stack</li></ol><p><strong>Time Complexity:</strong> O(n) - each element pushed and popped at most once</p><p><strong>Space Complexity:</strong> O(n) for the stack and result array</p>",
      "solution_code": "function dailyTemperatures(temperatures) {\n    const n = temperatures.length;\n    const result = new Array(n).fill(0);\n    const stack = []; // Stack to store indices\n    \n    for (let i = 0; i < n; i++) {\n        // While stack not empty and current temperature is warmer\n        // than temperature at index stored at top of stack\n        while (stack.length > 0 && temperatures[i] > temperatures[stack[stack.length - 1]]) {\n            const prevIndex = stack.pop();\n            result[prevIndex] = i - prevIndex;\n        }\n        \n        stack.push(i);\n    }\n    \n    return result;\n}"
    },
    "typescript": {
      "template": "function dailyTemperatures(temperatures: number[]): number[] {\n  \n}",
      "solution_text": "<p><strong>Monotonic Stack Solution for Daily Temperatures:</strong></p><p>Find next warmer temperature for each day using a decreasing monotonic stack.</p><p><strong>Algorithm:</strong></p><ol><li>Use stack to store indices of temperatures</li><li>For each temperature, pop indices from stack while current temp is warmer</li><li>Calculate days difference for each popped index</li><li>Push current index to stack</li></ol><p><strong>Time Complexity:</strong> O(n) - each element pushed and popped at most once</p><p><strong>Space Complexity:</strong> O(n) for the stack and result array</p>",
      "solution_code": "function dailyTemperatures(temperatures: number[]): number[] {\n    const n = temperatures.length;\n    const result: number[] = new Array(n).fill(0);\n    const stack: number[] = []; // Stack to store indices\n    \n    for (let i = 0; i < n; i++) {\n        // While stack not empty and current temperature is warmer\n        // than temperature at index stored at top of stack\n        while (stack.length > 0 && temperatures[i] > temperatures[stack[stack.length - 1]]) {\n            const prevIndex = stack.pop()!;\n            result[prevIndex] = i - prevIndex;\n        }\n        \n        stack.push(i);\n    }\n    \n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        \n    }\n}",
      "solution_text": "<p><strong>Monotonic Stack Solution for Daily Temperatures:</strong></p><p>Find next warmer temperature for each day using a decreasing monotonic stack.</p><p><strong>Algorithm:</strong></p><ol><li>Use stack to store indices of temperatures</li><li>For each temperature, pop indices from stack while current temp is warmer</li><li>Calculate days difference for each popped index</li><li>Push current index to stack</li></ol><p><strong>Time Complexity:</strong> O(n) - each element pushed and popped at most once</p><p><strong>Space Complexity:</strong> O(n) for the stack and result array</p>",
      "solution_code": "class Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        int n = temperatures.length;\n        int[] result = new int[n];\n        Stack<Integer> stack = new Stack<>(); // Stack to store indices\n        \n        for (int i = 0; i < n; i++) {\n            // While stack not empty and current temperature is warmer\n            // than temperature at index stored at top of stack\n            while (!stack.isEmpty() && temperatures[i] > temperatures[stack.peek()]) {\n                int prevIndex = stack.pop();\n                result[prevIndex] = i - prevIndex;\n            }\n            \n            stack.push(i);\n        }\n        \n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "temperatures": [
          30,
          38,
          30,
          36,
          35,
          40,
          28
        ]
      },
      "output": [
        1,
        4,
        1,
        2,
        1,
        0,
        0
      ]
    },
    {
      "id": 2,
      "input": {
        "temperatures": [
          22,
          21,
          20
        ]
      },
      "output": [
        0,
        0,
        0
      ]
    },
    {
      "id": 3,
      "input": {
        "temperatures": [89, 62, 70, 58, 47, 47, 46, 76, 100, 70]
      },
      "output": [8, 1, 5, 4, 3, 2, 1, 1, 0, 0]
    },
    {
      "id": 4,
      "input": {
        "temperatures": [73, 74, 75, 71, 69, 72, 76, 73]
      },
      "output": [1, 1, 4, 2, 1, 1, 0, 0]
    },
    {
      "id": 5,
      "input": {
        "temperatures": [55]
      },
      "output": [0]
    },
    {
      "id": 6,
      "input": {
        "temperatures": [30, 40, 50, 60]
      },
      "output": [1, 1, 1, 0]
    },
    {
      "id": 7,
      "input": {
        "temperatures": [60, 50, 40, 30]
      },
      "output": [0, 0, 0, 0]
    },
    {
      "id": 8,
      "input": {
        "temperatures": [75, 71, 76, 73, 68, 72, 77]
      },
      "output": [5, 1, 4, 2, 1, 1, 0]
    },
    {
      "id": 9,
      "input": {
        "temperatures": [90, 80, 70, 85, 95]
      },
      "output": [3, 2, 1, 1, 0]
    },
    {
      "id": 10,
      "input": {
        "temperatures": [34, 80, 80, 34, 34, 80, 80, 80, 80, 34]
      },
      "output": [1, 0, 0, 2, 1, 0, 0, 0, 0, 0]
    }
  ]
}