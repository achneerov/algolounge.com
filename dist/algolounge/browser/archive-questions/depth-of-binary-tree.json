{
  "filename": "depth-of-binary-tree",
  "title": "Maximum Depth of Binary Tree",
  "keywords": [
    "maximum",
    "depth",
    "binary",
    "tree",
    "leetcode",
    "104",
    "given",
    "root",
    "return",
    "its"
  ],
  "description": "<h2>Maximum Depth of Binary Tree</h2><p>Leetcode 104. Maximum Depth of Binary Tree</p><p></p><p>Given the `root` of a binary tree, return its **depth**.</p><p></p><p>The **depth** of a binary tree is defined as the number of nodes along the longest path from the root node down to the farthest leaf node.</p><h3>Examples:</h3><ul><li>Input: root = []<br><br>Output: 0</li></ul><h3>Constraints:</h3><ul><li> `0 <= The number of nodes in the tree <= 100`.</li><li> `-100 <= Node.val <= 100`</li></ul>",
  "languages": {
    "python": {
      "template": "def maximumDepthOfBinaryTree(root):\n    ",
      "solution_text": "<h3>Maximum Depth of Binary Tree</h3><p><strong>Algorithm:</strong></p><ol><li>Base case: if root is None, return 0 (empty tree has depth 0)</li><li>Recursively calculate depth of left subtree</li><li>Recursively calculate depth of right subtree</li><li>Return 1 + max(left_depth, right_depth)</li><li>The +1 accounts for the current node</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth where h is tree height</p><p><strong>Key Insights:</strong></p><ul><li>Depth is the longest path from root to any leaf</li><li>Use recursion to break problem into subproblems</li><li>Maximum depth = 1 + max depth of subtrees</li></ul>",
      "solution_code": "def maximumDepthOfBinaryTree(root):\n    # Base case: empty tree has depth 0\n    if not root:\n        return 0\n    \n    # Recursively calculate depth of left and right subtrees\n    left_depth = maximumDepthOfBinaryTree(root.left)\n    right_depth = maximumDepthOfBinaryTree(root.right)\n    \n    # Return 1 (current node) + maximum depth of subtrees\n    return 1 + max(left_depth, right_depth)"
    },
    "javascript": {
      "template": "function maximumDepthOfBinaryTree(root) {\n  \n}",
      "solution_text": "<h3>Maximum Depth of Binary Tree</h3><p><strong>Algorithm:</strong></p><ol><li>Base case: if root is null, return 0 (empty tree has depth 0)</li><li>Recursively calculate depth of left subtree</li><li>Recursively calculate depth of right subtree</li><li>Return 1 + max(left_depth, right_depth)</li><li>The +1 accounts for the current node</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth where h is tree height</p><p><strong>Key Insights:</strong></p><ul><li>Depth is the longest path from root to any leaf</li><li>Use recursion to break problem into subproblems</li><li>Maximum depth = 1 + max depth of subtrees</li></ul>",
      "solution_code": "function maximumDepthOfBinaryTree(root) {\n    // Base case: empty tree has depth 0\n    if (!root) {\n        return 0;\n    }\n    \n    // Recursively calculate depth of left and right subtrees\n    const leftDepth = maximumDepthOfBinaryTree(root.left);\n    const rightDepth = maximumDepthOfBinaryTree(root.right);\n    \n    // Return 1 (current node) + maximum depth of subtrees\n    return 1 + Math.max(leftDepth, rightDepth);\n}"
    },
    "typescript": {
      "template": "function maximumDepthOfBinaryTree(root: TreeNode | null): number {\n  \n}",
      "solution_text": "<h3>Maximum Depth of Binary Tree</h3><p><strong>Algorithm:</strong></p><ol><li>Base case: if root is null, return 0 (empty tree has depth 0)</li><li>Recursively calculate depth of left subtree</li><li>Recursively calculate depth of right subtree</li><li>Return 1 + max(left_depth, right_depth)</li><li>The +1 accounts for the current node</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth where h is tree height</p><p><strong>Key Insights:</strong></p><ul><li>Depth is the longest path from root to any leaf</li><li>Use recursion to break problem into subproblems</li><li>Maximum depth = 1 + max depth of subtrees</li></ul>",
      "solution_code": "function maximumDepthOfBinaryTree(root: TreeNode | null): number {\n    // Base case: empty tree has depth 0\n    if (!root) {\n        return 0;\n    }\n    \n    // Recursively calculate depth of left and right subtrees\n    const leftDepth = maximumDepthOfBinaryTree(root.left);\n    const rightDepth = maximumDepthOfBinaryTree(root.right);\n    \n    // Return 1 (current node) + maximum depth of subtrees\n    return 1 + Math.max(leftDepth, rightDepth);\n}"
    },
    "java": {
      "template": "class Solution {\n    public int maximumDepthOfBinaryTree(TreeNode root) {\n        \n    }\n}",
      "solution_text": "<h3>Maximum Depth of Binary Tree</h3><p><strong>Algorithm:</strong></p><ol><li>Base case: if root is null, return 0 (empty tree has depth 0)</li><li>Recursively calculate depth of left subtree</li><li>Recursively calculate depth of right subtree</li><li>Return 1 + max(left_depth, right_depth)</li><li>The +1 accounts for the current node</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth where h is tree height</p><p><strong>Key Insights:</strong></p><ul><li>Depth is the longest path from root to any leaf</li><li>Use recursion to break problem into subproblems</li><li>Maximum depth = 1 + max depth of subtrees</li></ul>",
      "solution_code": "class Solution {\n    public int maximumDepthOfBinaryTree(TreeNode root) {\n        // Base case: empty tree has depth 0\n        if (root == null) {\n            return 0;\n        }\n        \n        // Recursively calculate depth of left and right subtrees\n        int leftDepth = maximumDepthOfBinaryTree(root.left);\n        int rightDepth = maximumDepthOfBinaryTree(root.right);\n        \n        // Return 1 (current node) + maximum depth of subtrees\n        return 1 + Math.max(leftDepth, rightDepth);\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "root": [3,9,20,null,null,15,7]
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "root": [1,null,2]
      },
      "output": 2
    },
    {
      "id": 3,
      "input": {
        "root": []
      },
      "output": 0
    }
  ]
}