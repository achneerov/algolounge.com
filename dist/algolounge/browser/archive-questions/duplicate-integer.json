{
  "filename": "duplicate-integer",
  "title": "Contains Duplicate",
  "keywords": [
    "contains",
    "duplicate",
    "leetcode",
    "217",
    "given",
    "integer",
    "array",
    "nums",
    "return",
    "true"
  ],
  "description": "<h2>Contains Duplicate</h2><p>Leetcode 217. Contains Duplicate</p><p></p><p>Given an integer array `nums`, return `true` if any value appears **more than once** in the array, otherwise return `false`.</p><h3>Examples:</h3><ul><li>Input: nums = [1, 2, 3, 3]<br><br>Output: true</li><li>Input: nums = [1, 2, 3, 4]<br><br>Output: false</li></ul>",
  "languages": {
    "python": {
      "template": "def containsDuplicate(nums):\n    ",
      "solution_text": "<p><strong>Hash Set Solution for Contains Duplicate:</strong></p><p>Check for duplicates using hash set for O(1) lookups.</p><p><strong>Algorithm:</strong></p><ol><li>Use hash set to track seen elements</li><li>For each element, check if already in set</li><li>If found, return true (duplicate exists)</li><li>If not found, add to set and continue</li><li>If loop completes, return false (no duplicates)</li></ol><p><strong>Time Complexity:</strong> O(n) - single pass through array</p><p><strong>Space Complexity:</strong> O(n) - hash set storage</p>",
      "solution_code": "def containsDuplicate(nums):\n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False"
    },
    "javascript": {
      "template": "function containsDuplicate(nums) {\n  \n}",
      "solution_text": "<p><strong>Hash Set Solution for Contains Duplicate:</strong></p><p>Check for duplicates using hash set for O(1) lookups.</p><p><strong>Algorithm:</strong></p><ol><li>Use hash set to track seen elements</li><li>For each element, check if already in set</li><li>If found, return true (duplicate exists)</li><li>If not found, add to set and continue</li><li>If loop completes, return false (no duplicates)</li></ol><p><strong>Time Complexity:</strong> O(n) - single pass through array</p><p><strong>Space Complexity:</strong> O(n) - hash set storage</p>",
      "solution_code": "function containsDuplicate(nums) {\n    const seen = new Set();\n    \n    for (const num of nums) {\n        if (seen.has(num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    \n    return false;\n}"
    },
    "typescript": {
      "template": "function containsDuplicate(nums: number[]): boolean {\n  \n}",
      "solution_text": "<p><strong>Hash Set Solution for Contains Duplicate:</strong></p><p>Check for duplicates using hash set for O(1) lookups.</p><p><strong>Algorithm:</strong></p><ol><li>Use hash set to track seen elements</li><li>For each element, check if already in set</li><li>If found, return true (duplicate exists)</li><li>If not found, add to set and continue</li><li>If loop completes, return false (no duplicates)</li></ol><p><strong>Time Complexity:</strong> O(n) - single pass through array</p><p><strong>Space Complexity:</strong> O(n) - hash set storage</p>",
      "solution_code": "function containsDuplicate(nums: number[]): boolean {\n    const seen = new Set<number>();\n    \n    for (const num of nums) {\n        if (seen.has(num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    \n    return false;\n}"
    },
    "java": {
      "template": "class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        \n    }\n}",
      "solution_text": "<p><strong>Hash Set Solution for Contains Duplicate:</strong></p><p>Check for duplicates using hash set for O(1) lookups.</p><p><strong>Algorithm:</strong></p><ol><li>Use hash set to track seen elements</li><li>For each element, check if already in set</li><li>If found, return true (duplicate exists)</li><li>If not found, add to set and continue</li><li>If loop completes, return false (no duplicates)</li></ol><p><strong>Time Complexity:</strong> O(n) - single pass through array</p><p><strong>Space Complexity:</strong> O(n) - hash set storage</p>",
      "solution_code": "class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : nums) {\n            if (seen.contains(num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        \n        return false;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [1, 2, 3, 3]
      },
      "output": true
    },
    {
      "id": 2,
      "input": {
        "nums": [1, 2, 3, 4]
      },
      "output": false
    },
    {
      "id": 3,
      "input": {
        "nums": [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]
      },
      "output": true
    },
    {
      "id": 4,
      "input": {
        "nums": []
      },
      "output": false
    },
    {
      "id": 5,
      "input": {
        "nums": [1]
      },
      "output": false
    },
    {
      "id": 6,
      "input": {
        "nums": [1, 2]
      },
      "output": false
    },
    {
      "id": 7,
      "input": {
        "nums": [1, 1]
      },
      "output": true
    },
    {
      "id": 8,
      "input": {
        "nums": [1, 5, -2, -4, 0]
      },
      "output": false
    },
    {
      "id": 9,
      "input": {
        "nums": [1, 5, -2, -4, 0, 1]
      },
      "output": true
    },
    {
      "id": 10,
      "input": {
        "nums": [0, 4, 5, 0, 3, 6]
      },
      "output": true
    }
  ]
}