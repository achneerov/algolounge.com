{
  "filename": "excel-sheet-column-title",
  "title": "Excel Sheet Column Title",
  "keywords": [
    "excel",
    "sheet",
    "column",
    "title",
    "leetcode",
    "168",
    "given",
    "integer",
    "columnnumber",
    "return"
  ],
  "description": "<h2>Excel Sheet Column Title</h2><p>Leetcode 168. Excel Sheet Column Title</p><p></p><p>You are given an integer `columnNumber`, return its corresponding column title as it appears in an Excel sheet.</p><p></p><p>For example:</p><p>```java</p><p>A -> 1</p><p>B -> 2</p><p>C -> 3</p><p>...</p><p>Z -> 26</p><p>AA -> 27</p><p>AB -> 28 </p><p>...</p><p>```</p><h3>Examples:</h3><ul><li>Input: columnNumber = 32<br><br>Output: \"AF\"</li><li>Input: columnNumber = 53<br><br>Output: \"BA\"</li></ul><h3>Constraints:</h3><ul><li> `1 <= columnNumber <= ((2^31)-1)`</li></ul>",
  "languages": {
    "python": {
      "template": "def excelSheetColumnTitle(columnNumber):\n    ",
      "solution_text": "<p><strong>Base-26 Conversion Solution:</strong></p><p>This problem can be thought of as converting a base-10 number to a base-26 number, with a slight twist. The digits in this base-26 system are A-Z, corresponding to 1-26.</p><p><strong>Algorithm:</strong></p><ol><li><strong>Iterative Conversion:</strong> We can iteratively find the characters of the Excel title from right to left.</li><li><strong>Modulo Operation:</strong> In each step, we take the `columnNumber - 1` modulo 26. The `-1` is crucial because our number system is 1-indexed (A=1, B=2, ...), while modulo arithmetic is 0-indexed. This gives us the value (0-25) of the rightmost character.</li><li><strong>Character Mapping:</strong> We convert this value to its corresponding character (A-Z). For example, 0 maps to 'A', 1 to 'B', and so on. This can be done using ASCII values (`ord('A') + value`).</li><li><strong>Update `columnNumber`:</strong> We then update `columnNumber` for the next iteration by integer dividing `(columnNumber - 1)` by 26. This effectively shifts to the next character position to the left.</li><li><strong>Repeat:</strong> We continue this process until `columnNumber` becomes 0.</li><li><strong>Reverse:</strong> Since we generated the characters from right to left, the final step is to reverse the result to get the correct column title.</li></ol><p><strong>Time Complexity:</strong> O(log26(N)), where N is the `columnNumber`. The number of iterations is proportional to the number of digits in the base-26 representation.</p><p><strong>Space Complexity:</strong> O(log26(N)) to store the resulting string.</p>",
      "solution_code": "def excelSheetColumnTitle(columnNumber):\n    result = []\n    while columnNumber > 0:\n        # Adjust to be 0-indexed for modulo\n        columnNumber, remainder = divmod(columnNumber - 1, 26)\n        result.append(chr(ord('A') + remainder))\n    # The result is built backwards, so reverse it\n    return ''.join(reversed(result))"
    },
    "javascript": {
      "template": "function excelSheetColumnTitle(columnNumber) {\n  \n}",
      "solution_text": "<p><strong>Base-26 Conversion Solution:</strong></p><p>This problem can be thought of as converting a base-10 number to a base-26 number, with a slight twist. The digits in this base-26 system are A-Z, corresponding to 1-26.</p><p><strong>Algorithm:</strong></p><ol><li><strong>Iterative Conversion:</strong> We can iteratively find the characters of the Excel title from right to left.</li><li><strong>Modulo Operation:</strong> In each step, we take the `columnNumber - 1` modulo 26. The `-1` is crucial because our number system is 1-indexed (A=1, B=2, ...), while modulo arithmetic is 0-indexed. This gives us the value (0-25) of the rightmost character.</li><li><strong>Character Mapping:</strong> We convert this value to its corresponding character (A-Z). For example, 0 maps to 'A', 1 to 'B', and so on. This can be done using character codes (`'A'.charCodeAt(0) + remainder`).</li><li><strong>Update `columnNumber`:</strong> We then update `columnNumber` for the next iteration by integer dividing `(columnNumber - 1)` by 26. This effectively shifts to the next character position to the left.</li><li><strong>Repeat:</strong> We continue this process until `columnNumber` becomes 0.</li><li><strong>Reverse:</strong> Since we generated the characters from right to left, the final step is to reverse the result to get the correct column title.</li></ol><p><strong>Time Complexity:</strong> O(log26(N)), where N is the `columnNumber`. The number of iterations is proportional to the number of digits in the base-26 representation.</p><p><strong>Space Complexity:</strong> O(log26(N)) to store the resulting string.</p>",
      "solution_code": "function excelSheetColumnTitle(columnNumber) {\n    let result = '';\n    while (columnNumber > 0) {\n        const remainder = (columnNumber - 1) % 26;\n        result = String.fromCharCode('A'.charCodeAt(0) + remainder) + result;\n        columnNumber = Math.floor((columnNumber - 1) / 26);\n    }\n    return result;\n}"
    },
    "typescript": {
      "template": "function excelSheetColumnTitle(columnNumber: number): string {\n  \n}",
      "solution_text": "<p><strong>Base-26 Conversion Solution:</strong></p><p>This problem can be thought of as converting a base-10 number to a base-26 number, with a slight twist. The digits in this base-26 system are A-Z, corresponding to 1-26.</p><p><strong>Algorithm:</strong></p><ol><li><strong>Iterative Conversion:</strong> We can iteratively find the characters of the Excel title from right to left.</li><li><strong>Modulo Operation:</strong> In each step, we take the `columnNumber - 1` modulo 26. The `-1` is crucial because our number system is 1-indexed (A=1, B=2, ...), while modulo arithmetic is 0-indexed. This gives us the value (0-25) of the rightmost character.</li><li><strong>Character Mapping:</strong> We convert this value to its corresponding character (A-Z). For example, 0 maps to 'A', 1 to 'B', and so on. This can be done using character codes (`'A'.charCodeAt(0) + remainder`).</li><li><strong>Update `columnNumber`:</strong> We then update `columnNumber` for the next iteration by integer dividing `(columnNumber - 1)` by 26. This effectively shifts to the next character position to the left.</li><li><strong>Repeat:</strong> We continue this process until `columnNumber` becomes 0.</li><li><strong>Reverse:</strong> Since we generated the characters from right to left, the final step is to reverse the result to get the correct column title.</li></ol><p><strong>Time Complexity:</strong> O(log26(N)), where N is the `columnNumber`. The number of iterations is proportional to the number of digits in the base-26 representation.</p><p><strong>Space Complexity:</strong> O(log26(N)) to store the resulting string.</p>",
      "solution_code": "function excelSheetColumnTitle(columnNumber: number): string {\n    let result = '';\n    while (columnNumber > 0) {\n        const remainder = (columnNumber - 1) % 26;\n        result = String.fromCharCode('A'.charCodeAt(0) + remainder) + result;\n        columnNumber = Math.floor((columnNumber - 1) / 26);\n    }\n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public String excelSheetColumnTitle(int columnNumber) {\n        \n    }\n}",
      "solution_text": "<p><strong>Base-26 Conversion Solution:</strong></p><p>This problem can be thought of as converting a base-10 number to a base-26 number, with a slight twist. The digits in this base-26 system are A-Z, corresponding to 1-26.</p><p><strong>Algorithm:</strong></p><ol><li><strong>Iterative Conversion:</strong> We can iteratively find the characters of the Excel title from right to left.</li><li><strong>Modulo Operation:</strong> In each step, we take the `columnNumber - 1` modulo 26. The `-1` is crucial because our number system is 1-indexed (A=1, B=2, ...), while modulo arithmetic is 0-indexed. This gives us the value (0-25) of the rightmost character.</li><li><strong>Character Mapping:</strong> We convert this value to its corresponding character (A-Z). For example, 0 maps to 'A', 1 to 'B', and so on. This can be done using character arithmetic (`'A' + remainder`).</li><li><strong>Update `columnNumber`:</strong> We then update `columnNumber` for the next iteration by integer dividing `(columnNumber - 1)` by 26. This effectively shifts to the next character position to the left.</li><li><strong>Repeat:</strong> We continue this process until `columnNumber` becomes 0.</li><li><strong>Reverse:</strong> Since we generated the characters from right to left, we build the string in reverse and then return it.</li></ol><p><strong>Time Complexity:</strong> O(log26(N)), where N is the `columnNumber`. The number of iterations is proportional to the number of digits in the base-26 representation.</p><p><strong>Space Complexity:</strong> O(log26(N)) to store the resulting string.</p>",
      "solution_code": "class Solution {\n    public String excelSheetColumnTitle(int columnNumber) {\n        StringBuilder result = new StringBuilder();\n        while (columnNumber > 0) {\n            columnNumber--; // Adjust to be 0-indexed\n            result.insert(0, (char) ('A' + columnNumber % 26));\n            columnNumber /= 26;\n        }\n        return result.toString();\n    }
}"
    }
  },
  "order_matters": true,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "columnNumber": 1
      },
      "output": "A"
    },
    {
      "id": 2,
      "input": {
        "columnNumber": 26
      },
      "output": "Z"
    },
    {
      "id": 3,
      "input": {
        "columnNumber": 27
      },
      "output": "AA"
    },
    {
      "id": 4,
      "input": {
        "columnNumber": 28
      },
      "output": "AB"
    },
    {
      "id": 5,
      "input": {
        "columnNumber": 52
      },
      "output": "AZ"
    },
    {
      "id": 6,
      "input": {
        "columnNumber": 53
      },
      "output": "BA"
    },
    {
      "id": 7,
      "input": {
        "columnNumber": 701
      },
      "output": "ZY"
    },
    {
      "id": 8,
      "input": {
        "columnNumber": 702
      },
      "output": "ZZ"
    },
    {
      "id": 9,
      "input": {
        "columnNumber": 703
      },
      "output": "AAA"
    },
    {
      "id": 10,
      "input": {
        "columnNumber": 2147483647
      },
      "output": "FXSHRXW"
    }
  ]
}