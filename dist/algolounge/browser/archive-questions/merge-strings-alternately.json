{
  "filename": "merge-strings-alternately",
  "title": "Merge Strings Alternately",
  "keywords": [
    "merge",
    "strings",
    "alternately",
    "leetcode",
    "1768",
    "given",
    "two",
    "word1",
    "word2",
    "construct"
  ],
  "description": "<h2>Merge Strings Alternately</h2><p>Leetcode 1768. Merge Strings Alternately</p><p></p><p>You are given two strings, `word1` and `word2`. Construct a new string by merging them in **alternating** order, starting with `word1` â€” take one character from `word1`, then one from `word2`, and repeat this process.</p><p></p><p>If one string is longer than the other, append the remaining characters from the longer string to the end of the merged result.</p><p></p><p>Return the final merged string.</p><h3>Examples:</h3><ul><li>Input: word1 = \"abc\", word2 = \"xyz\"<br><br>Output: \"axbycz\"</li><li>Input: word1 = \"ab\", word2 = \"abbxxc\"<br><br>Output: \"aabbbxxc\"</li></ul><h3>Constraints:</h3><ul><li> `1 <= word1.length, word2.length <= 100`</li><li> `word1` and `word2` consist of lowercase English letters.</li></ul>",
  "languages": {
    "python": {
      "template": "def mergeStringsAlternately(word1, word2):\n    ",
      "solution_text": "Merge algorithm using two pointers:\n\n**Algorithm:**\n1. Use two pointers for both input arrays\n2. Compare elements and add smaller to result\n3. Continue until one array is exhausted\n4. Append remaining elements from other array\n\n**Time Complexity:** O(m + n) - visit each element once\n**Space Complexity:** O(m + n) - result array size\n\n**Key Insights:**\n- Two pointers technique for sorted arrays\n- Handle arrays of different lengths\n- Maintains sorted order in result",
      "solution_code": "def mergeStringsAlternately(arr1, arr2):\n    if not arr1:\n        return arr2\n    if not arr2:\n        return arr1\n    \n    result = []\n    i, j = 0, 0\n    \n    # Merge while both arrays have elements\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    \n    # Add remaining elements\n    result.extend(arr1[i:])\n    result.extend(arr2[j:])\n    \n    return result"
    },
    "javascript": {
      "template": "function mergeStringsAlternately(word1, word2) {\n  \n}",
      "solution_text": "Merge algorithm using two pointers:\n\n**Algorithm:**\n1. Use two pointers for both input arrays\n2. Compare elements and add smaller to result\n3. Continue until one array is exhausted\n4. Append remaining elements from other array\n\n**Time Complexity:** O(m + n) - visit each element once\n**Space Complexity:** O(m + n) - result array size\n\n**Key Insights:**\n- Two pointers technique for sorted arrays\n- Handle arrays of different lengths\n- Maintains sorted order in result",
      "solution_code": "function mergeStringsAlternately(arr1, arr2) {\n    if (!arr1) return arr2;\n    if (!arr2) return arr1;\n    \n    const result = [];\n    let i = 0, j = 0;\n    \n    // Merge while both arrays have elements\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] <= arr2[j]) {\n            result.push(arr1[i]);\n            i++;\n        } else {\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n    \n    // Add remaining elements\n    while (i < arr1.length) {\n        result.push(arr1[i]);\n        i++;\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j]);\n        j++;\n    }\n    \n    return result;\n}"
    },
    "typescript": {
      "template": "function mergeStringsAlternately(word1: string, word2: string): string {\n  \n}",
      "solution_text": "Merge algorithm using two pointers:\n\n**Algorithm:**\n1. Use two pointers for both input arrays\n2. Compare elements and add smaller to result\n3. Continue until one array is exhausted\n4. Append remaining elements from other array\n\n**Time Complexity:** O(m + n) - visit each element once\n**Space Complexity:** O(m + n) - result array size\n\n**Key Insights:**\n- Two pointers technique for sorted arrays\n- Handle arrays of different lengths\n- Maintains sorted order in result",
      "solution_code": "function mergeStringsAlternately(arr1: number[], arr2: number[]): number[] {\n    if (!arr1) return arr2;\n    if (!arr2) return arr1;\n    \n    const result: number[] = [];\n    let i = 0, j = 0;\n    \n    // Merge while both arrays have elements\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] <= arr2[j]) {\n            result.push(arr1[i]);\n            i++;\n        } else {\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n    \n    // Add remaining elements\n    while (i < arr1.length) {\n        result.push(arr1[i]);\n        i++;\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j]);\n        j++;\n    }\n    \n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public String mergeStringsAlternately(String word1, String word2) {\n        \n    }\n}",
      "solution_text": "Merge algorithm using two pointers:\n\n**Algorithm:**\n1. Use two pointers for both input arrays\n2. Compare elements and add smaller to result\n3. Continue until one array is exhausted\n4. Append remaining elements from other array\n\n**Time Complexity:** O(m + n) - visit each element once\n**Space Complexity:** O(m + n) - result array size\n\n**Key Insights:**\n- Two pointers technique for sorted arrays\n- Handle arrays of different lengths\n- Maintains sorted order in result",
      "solution_code": "class Solution {\n    public int[] mergeStringsAlternately(int[] arr1, int[] arr2) {\n        if (arr1 == null || arr1.length == 0) return arr2;\n        if (arr2 == null || arr2.length == 0) return arr1;\n        \n        int[] result = new int[arr1.length + arr2.length];\n        int i = 0, j = 0, k = 0;\n        \n        // Merge while both arrays have elements\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1[i] <= arr2[j]) {\n                result[k++] = arr1[i++];\n            } else {\n                result[k++] = arr2[j++];\n            }\n        }\n        \n        // Add remaining elements\n        while (i < arr1.length) {\n            result[k++] = arr1[i++];\n        }\n        while (j < arr2.length) {\n            result[k++] = arr2[j++];\n        }\n        \n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "word1": "\"abc\",",
        "word2": "xyz"
      },
      "output": "axbycz"
    },
    {
      "id": 2,
      "input": {
        "word1": "\"ab\",",
        "word2": "abbxxc"
      },
      "output": "aabbbxxc"
    }
  ]
}