{
  "filename": "minimum-array-end",
  "title": "Minimum Array End",
  "keywords": [
    "minimum",
    "array",
    "end",
    "leetcode",
    "3133",
    "given",
    "two",
    "integers",
    "construct",
    "positive"
  ],
  "description": "<h2>Minimum Array End</h2><p>Leetcode 3133. Minimum Array End</p><p></p><p>You are given two integers `n` and `x`. You have to construct an array of positive integers `nums` of size `n` where for every `0 <= i < n - 1`, `nums[i + 1]` is **greater than** `nums[i]`, and the result of the **bitwise AND** operation between all elements of `nums` is `x`.</p><p></p><p>Return the **minimum** possible value of `nums[n - 1]`.</p><h3>Examples:</h3><ul><li>Input: n = 3, x = 2<br><br>Output: 6<br>nums can be [2,3,6].</li><li>Input: n = 5, x = 3<br><br>Output: 19<br>nums can be [3,7,11,15,19].</li></ul><h3>Constraints:</h3><ul><li> `1 <= n, x <= 100,000,000`</li></ul>",
  "languages": {
    "python": {
      "template": "def minimumArrayEnd(n, x):\n    ",
      "solution_text": "Min/Max finding algorithm:\n\n**Algorithm:**\n1. Initialize min/max with first element\n2. Iterate through remaining elements\n3. Update min/max as needed\n\n**Time Complexity:** O(n) - single pass through array\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Handle empty arrays with appropriate defaults\n- Consider both positive and negative numbers\n- Single pass optimization",
      "solution_code": "def minimumArrayEnd(nums):\n    if not nums:\n        return 0  # or appropriate default\n    \n    result = nums[0]\n    \n    for num in nums[1:]:\n        if 'max' in 'minimumArrayEnd'.lower():\n            result = max(result, num)\n        else:\n            result = min(result, num)\n    \n    return result"
    },
    "javascript": {
      "template": "function minimumArrayEnd(n, x) {\n  \n}",
      "solution_text": "Min/Max finding algorithm:\n\n**Algorithm:**\n1. Initialize min/max with first element\n2. Iterate through remaining elements\n3. Update min/max as needed\n\n**Time Complexity:** O(n) - single pass through array\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Handle empty arrays with appropriate defaults\n- Consider both positive and negative numbers\n- Single pass optimization",
      "solution_code": "function minimumArrayEnd(nums) {\n    if (!nums || nums.length === 0) return 0;\n    \n    let result = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        if ('minimumArrayEnd'.toLowerCase().includes('max')) {\n            result = Math.max(result, nums[i]);\n        } else {\n            result = Math.min(result, nums[i]);\n        }\n    }\n    \n    return result;\n}"
    },
    "typescript": {
      "template": "function minimumArrayEnd(n: string, x: number): number {\n  \n}",
      "solution_text": "Min/Max finding algorithm:\n\n**Algorithm:**\n1. Initialize min/max with first element\n2. Iterate through remaining elements\n3. Update min/max as needed\n\n**Time Complexity:** O(n) - single pass through array\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Handle empty arrays with appropriate defaults\n- Consider both positive and negative numbers\n- Single pass optimization",
      "solution_code": "function minimumArrayEnd(nums: number[]): number {\n    if (!nums || nums.length === 0) return 0;\n    \n    let result = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        if ('minimumArrayEnd'.toLowerCase().includes('max')) {\n            result = Math.max(result, nums[i]);\n        } else {\n            result = Math.min(result, nums[i]);\n        }\n    }\n    \n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int minimumArrayEnd(String n, int x) {\n        \n    }\n}",
      "solution_text": "Min/Max finding algorithm:\n\n**Algorithm:**\n1. Initialize min/max with first element\n2. Iterate through remaining elements\n3. Update min/max as needed\n\n**Time Complexity:** O(n) - single pass through array\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Handle empty arrays with appropriate defaults\n- Consider both positive and negative numbers\n- Single pass optimization",
      "solution_code": "class Solution {\n    public int minimumArrayEnd(int[] nums) {\n        if (nums == null || nums.length == 0) return 0;\n        \n        int result = nums[0];\n        \n        for (int i = 1; i < nums.length; i++) {\n            if (\"minimumArrayEnd\".toLowerCase().contains(\"max\")) {\n                result = Math.max(result, nums[i]);\n            } else {\n                result = Math.min(result, nums[i]);\n            }\n        }\n        \n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "n": "3,",
        "x": 2
      },
      "output": 6
    },
    {
      "id": 2,
      "input": {
        "n": "5,",
        "x": 3
      },
      "output": 19
    }
  ]
}