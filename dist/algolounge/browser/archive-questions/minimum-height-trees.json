{
  "filename": "minimum-height-trees",
  "title": "Minimum Height Trees",
  "keywords": [
    "minimum",
    "height",
    "trees",
    "leetcode",
    "310",
    "tree",
    "undirected",
    "graph",
    "which",
    "any"
  ],
  "description": "<h2>Minimum Height Trees</h2><p>Leetcode 310. Minimum Height Trees</p><p></p><p>A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.</p><p></p><p>You are given a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [a[i], b[i]]` indicates that there is an undirected edge between the two nodes `a[i]` and `b[i]` in the tree, you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height (i.e. `min(h)`)  are called **minimum height trees** (MHTs).</p><p></p><p>Return a list of all **MHTs'** root labels. You can return the answer in **any order**.</p><p></p><p>The **height** of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</p><h3>Examples:</h3><ul><li>Input: n = 5, edges = [[0,1],[3,1],[2,3],[4,1]]<br><br>Output: [3,1]<br>As shown, the trees with root labels [3,1] are MHT's with height of 2.</li><li>Input: n = 4, edges = [[1,0],[2,0],[3,0]]<br><br>Output: [0]<br>As shown, the tree with root label [0] is MHT with height of 1.</li></ul><h3>Constraints:</h3><ul><li> `1 <= n <= 20,000`</li><li> `edges.length == n - 1`</li><li> `0 <= a[i], b[i] < n`</li><li> `a[i] != b[i]`</li><li> All the pairs `(a[i], b[i])` are **distinct**.</li><li> The given input is **guaranteed** to be a tree and there will be **no repeated** edges.</li></ul>",
  "languages": {
    "python": {
      "template": "def minimumHeightTrees(n, edges):\n    ",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "def minimumHeightTrees(root):\n    if not root:\n        return None  # or appropriate base case result\n    \n    # Process current node\n    result = root.val\n    \n    # Recursively process subtrees\n    left_result = minimumHeightTrees(root.left) if root.left else None\n    right_result = minimumHeightTrees(root.right) if root.right else None\n    \n    # Combine results based on operation\n    # This is a template - adjust based on specific operation\n    return result"
    },
    "javascript": {
      "template": "function minimumHeightTrees(n, edges) {\n  \n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "function minimumHeightTrees(root) {\n    if (!root) return null; // or appropriate base case result\n    \n    // Process current node\n    const result = root.val;\n    \n    // Recursively process subtrees\n    const leftResult = root.left ? minimumHeightTrees(root.left) : null;\n    const rightResult = root.right ? minimumHeightTrees(root.right) : null;\n    \n    // Combine results based on operation\n    // This is a template - adjust based on specific operation\n    return result;\n}"
    },
    "typescript": {
      "template": "function minimumHeightTrees(n: string, edges: number[]): number[] {\n  \n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "function minimumHeightTrees(root: TreeNode | null): any {\n    if (!root) return null; // or appropriate base case result\n    \n    // Process current node\n    const result = root.val;\n    \n    // Recursively process subtrees\n    const leftResult = root.left ? minimumHeightTrees(root.left) : null;\n    const rightResult = root.right ? minimumHeightTrees(root.right) : null;\n    \n    // Combine results based on operation\n    // This is a template - adjust based on specific operation\n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int[] minimumHeightTrees(String n, int[] edges) {\n        \n    }\n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "class Solution {\n    public Object minimumHeightTrees(TreeNode root) {\n        if (root == null) return null; // or appropriate base case result\n        \n        // Process current node\n        int result = root.val;\n        \n        // Recursively process subtrees\n        Object leftResult = root.left != null ? minimumHeightTrees(root.left) : null;\n        Object rightResult = root.right != null ? minimumHeightTrees(root.right) : null;\n        \n        // Combine results based on operation\n        // This is a template - adjust based on specific operation\n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "n": "5,",
        "edges": [
          "[0",
          1
        ]
      },
      "output": [
        3,
        1
      ]
    },
    {
      "id": 2,
      "input": {
        "n": "4,",
        "edges": [
          "[1",
          0
        ]
      },
      "output": [
        0
      ]
    }
  ]
}