{
  "filename": "palindrome-partitioning",
  "title": "Palindrome Partitioning",
  "keywords": [
    "palindrome",
    "partitioning",
    "leetcode",
    "131",
    "given",
    "string",
    "split",
    "into",
    "substrings",
    "where"
  ],
  "description": "<h2>Palindrome Partitioning</h2><p>Leetcode 131. Palindrome Partitioning</p><p></p><p>Given a string `s`, split `s` into substrings where every substring is a palindrome. Return all possible lists of palindromic substrings.</p><p></p><p>You may return the solution in **any order**.</p><h3>Examples:</h3><ul><li>Input: s = \"aab\"<br><br>Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]</li><li>Input: s = \"a\"<br><br>Output: [[\"a\"]]</li></ul><h3>Constraints:</h3><ul><li> `1 <= s.length <= 20`</li><li> `s` contains only lowercase English letters.</li></ul>",
  "languages": {
    "python": {
      "template": "def palindromePartitioning(s):\n    ",
      "solution_text": "Palindrome detection using two pointers:\n\n**Algorithm:**\n1. Use two pointers from start and end of string\n2. Compare characters while moving pointers inward\n3. Skip non-alphanumeric characters if needed\n4. Return false if any mismatch found\n\n**Time Complexity:** O(n) - single pass through string\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Two pointers technique for efficient comparison\n- Handle case sensitivity and special characters\n- Early termination on first mismatch",
      "solution_code": "def palindromePartitioning(s):\n    if not s:\n        return True\n    \n    # Convert to lowercase and keep only alphanumeric\n    cleaned = ''.join(char.lower() for char in s if char.isalnum())\n    \n    left, right = 0, len(cleaned) - 1\n    \n    while left < right:\n        if cleaned[left] != cleaned[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    return True"
    },
    "javascript": {
      "template": "function palindromePartitioning(s) {\n  \n}",
      "solution_text": "Palindrome detection using two pointers:\n\n**Algorithm:**\n1. Use two pointers from start and end of string\n2. Compare characters while moving pointers inward\n3. Skip non-alphanumeric characters if needed\n4. Return false if any mismatch found\n\n**Time Complexity:** O(n) - single pass through string\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Two pointers technique for efficient comparison\n- Handle case sensitivity and special characters\n- Early termination on first mismatch",
      "solution_code": "function palindromePartitioning(s) {\n    if (!s) return true;\n    \n    // Convert to lowercase and keep only alphanumeric\n    const cleaned = s.toLowerCase().replace(/[^a-z0-9]/g, '');\n    \n    let left = 0, right = cleaned.length - 1;\n    \n    while (left < right) {\n        if (cleaned[left] !== cleaned[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}"
    },
    "typescript": {
      "template": "function palindromePartitioning(s: string): number[] {\n  \n}",
      "solution_text": "Palindrome detection using two pointers:\n\n**Algorithm:**\n1. Use two pointers from start and end of string\n2. Compare characters while moving pointers inward\n3. Skip non-alphanumeric characters if needed\n4. Return false if any mismatch found\n\n**Time Complexity:** O(n) - single pass through string\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Two pointers technique for efficient comparison\n- Handle case sensitivity and special characters\n- Early termination on first mismatch",
      "solution_code": "function palindromePartitioning(s: string): boolean {\n    if (!s) return true;\n    \n    // Convert to lowercase and keep only alphanumeric\n    const cleaned = s.toLowerCase().replace(/[^a-z0-9]/g, '');\n    \n    let left = 0, right = cleaned.length - 1;\n    \n    while (left < right) {\n        if (cleaned[left] !== cleaned[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int[] palindromePartitioning(String s) {\n        \n    }\n}",
      "solution_text": "Palindrome detection using two pointers:\n\n**Algorithm:**\n1. Use two pointers from start and end of string\n2. Compare characters while moving pointers inward\n3. Skip non-alphanumeric characters if needed\n4. Return false if any mismatch found\n\n**Time Complexity:** O(n) - single pass through string\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Two pointers technique for efficient comparison\n- Handle case sensitivity and special characters\n- Early termination on first mismatch",
      "solution_code": "class Solution {\n    public boolean palindromePartitioning(String s) {\n        if (s == null || s.length() <= 1) return true;\n        \n        int left = 0, right = s.length() - 1;\n        \n        while (left < right) {\n            // Skip non-alphanumeric characters\n            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {\n                left++;\n            }\n            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {\n                right--;\n            }\n            \n            // Compare characters (case insensitive)\n            if (Character.toLowerCase(s.charAt(left)) != \n                Character.toLowerCase(s.charAt(right))) {\n                return false;\n            }\n            \n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "s": "aab"
      },
      "output": [
        [
          "a",
          "a",
          "b"
        ],
        [
          "aa",
          "b"
        ]
      ]
    },
    {
      "id": 2,
      "input": {
        "s": "a"
      },
      "output": [
        [
          "a"
        ]
      ]
    }
  ]
}