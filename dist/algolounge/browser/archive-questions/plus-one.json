{
  "filename": "plus-one",
  "title": "Plus One",
  "keywords": [
    "plus",
    "one",
    "leetcode",
    "given",
    "integer",
    "array",
    "digits",
    "where",
    "each",
    "ith"
  ],
  "description": "<h2>Plus One</h2><p>Leetcode 66. Plus One</p><p></p><p>You are given an integer array `digits`, where each `digits[i]` is the `ith` digit of a large integer. It is ordered from most significant to least significant digit, and it will not contain any leading zero.</p><p></p><p>Return the digits of the given integer after incrementing it by one.</p><h3>Examples:</h3><ul><li>Input: digits = [1,2,3,4]<br><br>Output: [1,2,3,5]<br>`1234` + `1` = `1235`.</li><li>Input: digits = [9,9,9]<br><br>Output: [1,0,0,0]</li></ul><h3>Constraints:</h3><ul><li> `1 <= digits.length <= 100`</li><li> `0 <= digits[i] <= 9`</li></ul>",
  "languages": {
    "python": {
      "template": "def plusOne(digits):\n    ",
      "solution_text": "Plus One implementation handling carry propagation:\n\n**Algorithm:**\n1. Start from the last digit\n2. Add 1 and handle carry\n3. If carry propagates to front, prepend 1\n4. Return the result array\n\n**Time Complexity:** O(n) - visit each digit once\n**Space Complexity:** O(1) or O(n) - depends on carry propagation\n\n**Key Insights:**\n- Handle carry propagation carefully\n- Special case when all digits are 9\n- In-place modification when possible",
      "solution_code": "def plusOne(digits):\n    n = len(digits)\n    \n    # Add 1 to the last digit\n    for i in range(n-1, -1, -1):\n        if digits[i] < 9:\n            digits[i] += 1\n            return digits\n        digits[i] = 0\n    \n    # If we reach here, all digits were 9\n    return [1] + digits"
    },
    "javascript": {
      "template": "function plusOne(digits) {\n  \n}",
      "solution_text": "Plus One implementation handling carry propagation:\n\n**Algorithm:**\n1. Start from the last digit\n2. Add 1 and handle carry\n3. If carry propagates to front, prepend 1\n4. Return the result array\n\n**Time Complexity:** O(n) - visit each digit once\n**Space Complexity:** O(1) or O(n) - depends on carry propagation\n\n**Key Insights:**\n- Handle carry propagation carefully\n- Special case when all digits are 9\n- In-place modification when possible",
      "solution_code": "function plusOne(digits) {\n    const n = digits.length;\n    \n    // Add 1 to the last digit\n    for (let i = n-1; i >= 0; i--) {\n        if (digits[i] < 9) {\n            digits[i]++;\n            return digits;\n        }\n        digits[i] = 0;\n    }\n    \n    // If we reach here, all digits were 9\n    return [1, ...digits];\n}"
    },
    "typescript": {
      "template": "function plusOne(digits: number[]): number[] {\n  \n}",
      "solution_text": "Plus One implementation handling carry propagation:\n\n**Algorithm:**\n1. Start from the last digit\n2. Add 1 and handle carry\n3. If carry propagates to front, prepend 1\n4. Return the result array\n\n**Time Complexity:** O(n) - visit each digit once\n**Space Complexity:** O(1) or O(n) - depends on carry propagation\n\n**Key Insights:**\n- Handle carry propagation carefully\n- Special case when all digits are 9\n- In-place modification when possible",
      "solution_code": "function plusOne(digits: number[]): number[] {\n    const n = digits.length;\n    \n    // Add 1 to the last digit\n    for (let i = n-1; i >= 0; i--) {\n        if (digits[i] < 9) {\n            digits[i]++;\n            return digits;\n        }\n        digits[i] = 0;\n    }\n    \n    // If we reach here, all digits were 9\n    return [1, ...digits];\n}"
    },
    "java": {
      "template": "class Solution {\n    public int[] plusOne(int[] digits) {\n        \n    }\n}",
      "solution_text": "Plus One implementation handling carry propagation:\n\n**Algorithm:**\n1. Start from the last digit\n2. Add 1 and handle carry\n3. If carry propagates to front, prepend 1\n4. Return the result array\n\n**Time Complexity:** O(n) - visit each digit once\n**Space Complexity:** O(1) or O(n) - depends on carry propagation\n\n**Key Insights:**\n- Handle carry propagation carefully\n- Special case when all digits are 9\n- In-place modification when possible",
      "solution_code": "class Solution {\n    public int[] plusOne(int[] digits) {\n        int n = digits.length;\n        \n        // Add 1 to the last digit\n        for (int i = n-1; i >= 0; i--) {\n            if (digits[i] < 9) {\n                digits[i]++;\n                return digits;\n            }\n            digits[i] = 0;\n        }\n        \n        // If we reach here, all digits were 9\n        int[] result = new int[n+1];\n        result[0] = 1;\n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "digits": [
          1,
          2,
          3,
          4
        ]
      },
      "output": [
        1,
        2,
        3,
        5
      ]
    },
    {
      "id": 2,
      "input": {
        "digits": [
          9,
          9,
          9
        ]
      },
      "output": [
        1,
        0,
        0,
        0
      ]
    }
  ]
}