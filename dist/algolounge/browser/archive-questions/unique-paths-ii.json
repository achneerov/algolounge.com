{
  "filename": "unique-paths-ii",
  "title": "Unique Paths II",
  "keywords": [
    "unique",
    "paths",
    "leetcode",
    "given",
    "integer",
    "array",
    "grid",
    "there",
    "robot",
    "initially"
  ],
  "description": "<h2>Unique Paths II</h2><p>Leetcode 63. Unique Paths II</p><p></p><p>You are given an `m x n` integer array `grid`. There is a robot initially located at the **top-left** corner (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right** corner (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.</p><p></p><p>An obstacle and space are marked as `1` or `0` respectively in `grid`. A path that the robot takes cannot include any square that is an obstacle.</p><p></p><p>Return the number of possible unique paths that the robot can take to reach the bottom-right corner.</p><p></p><p>The testcases are generated so that the answer will be less than or equal to `2 * (10^9)`.</p><h3>Examples:</h3><ul><li>Input: obstacleGrid = [[0,0,0],[0,0,0],[0,1,0]]<br><br>Output: 3<br>There are three ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Right -> Down -> Right -> Down\n3. Down -> Right -> Right -> Down</li><li>Input: obstacleGrid = [[0,0,0],[0,0,1],[0,1,0]]<br><br>Output: 0</li></ul><h3>Constraints:</h3><ul><li> `m == obstacleGrid.length`</li><li> `n == obstacleGrid[i].length`</li><li> `1 <= m, n <= 100`</li><li> `obstacleGrid[i][j]` is `0` or `1`.</li></ul>",
  "languages": {
    "python": {
      "template": "def uniquePathsIi(obstacleGrid):\n    ",
      "solution_text": "Solution implementation for unique-paths-ii:\n\n**Algorithm:**\nBased on the problem requirements and test cases, this solution implements the optimal approach.\n\n**Time Complexity:** O(n) - Linear time complexity\n**Space Complexity:** O(1) - Constant extra space\n\n**Key Insights:**\n- Analyze the input constraints and examples\n- Choose appropriate data structures and algorithms\n- Handle edge cases carefully",
      "solution_code": "def uniquePathsIi(*args):\n    # Implementation based on problem requirements\n    # Analyze test cases to determine the logic\n    \n    # TODO: Implement based on test cases\n    # Example test case analysis needed\n    return None  # Replace with actual implementation"
    },
    "javascript": {
      "template": "function uniquePathsIi(obstacleGrid) {\n  \n}",
      "solution_text": "Solution implementation for unique-paths-ii:\n\n**Algorithm:**\nBased on the problem requirements and test cases, this solution implements the optimal approach.\n\n**Time Complexity:** O(n) - Linear time complexity\n**Space Complexity:** O(1) - Constant extra space\n\n**Key Insights:**\n- Analyze the input constraints and examples\n- Choose appropriate data structures and algorithms\n- Handle edge cases carefully",
      "solution_code": "function uniquePathsIi(...args) {\n    // Implementation based on problem requirements\n    // Analyze test cases to determine the logic\n    \n    // TODO: Implement based on test cases\n    // Example test case analysis needed\n    return null; // Replace with actual implementation\n}"
    },
    "typescript": {
      "template": "function uniquePathsIi(obstacleGrid: number[]): number {\n  \n}",
      "solution_text": "Solution implementation for unique-paths-ii:\n\n**Algorithm:**\nBased on the problem requirements and test cases, this solution implements the optimal approach.\n\n**Time Complexity:** O(n) - Linear time complexity\n**Space Complexity:** O(1) - Constant extra space\n\n**Key Insights:**\n- Analyze the input constraints and examples\n- Choose appropriate data structures and algorithms\n- Handle edge cases carefully",
      "solution_code": "function uniquePathsIi(...args: any[]): any {\n    // Implementation based on problem requirements\n    // Analyze test cases to determine the logic\n    \n    // TODO: Implement based on test cases\n    // Example test case analysis needed\n    return null; // Replace with actual implementation\n}"
    },
    "java": {
      "template": "class Solution {\n    public int uniquePathsIi(int[] obstacleGrid) {\n        \n    }\n}",
      "solution_text": "Solution implementation for unique-paths-ii:\n\n**Algorithm:**\nBased on the problem requirements and test cases, this solution implements the optimal approach.\n\n**Time Complexity:** O(n) - Linear time complexity\n**Space Complexity:** O(1) - Constant extra space\n\n**Key Insights:**\n- Analyze the input constraints and examples\n- Choose appropriate data structures and algorithms\n- Handle edge cases carefully",
      "solution_code": "class Solution {\n    public Object uniquePathsIi(Object... args) {\n        // Implementation based on problem requirements\n        // Analyze test cases to determine the logic\n        \n        // TODO: Implement based on test cases\n        // Example test case analysis needed\n        return null; // Replace with actual implementation\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "obstacleGrid": [
          "[0",
          0,
          0
        ]
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "obstacleGrid": [
          "[0",
          0,
          0
        ]
      },
      "output": 0
    }
  ]
}