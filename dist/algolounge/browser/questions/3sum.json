{
  "index": 1,
  "filename": "3sum",
  "title": "3Sum",
  "keywords": [
    "3sum",
    "three",
    "sum",
    "array",
    "triplets",
    "two",
    "pointers",
    "sorting",
    "integer",
    "leetcode"
  ],
  "description": "<h2>3Sum</h2><p>Given an integer array <code>nums</code>, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> where <code>nums[i] + nums[j] + nums[k] == 0</code>, and the indices <code>i</code>, <code>j</code> and <code>k</code> are all distinct.</p><p>The output should <strong>not</strong> contain any duplicate triplets. You may return the output and the triplets in <strong>any order</strong>.</p><h3>Examples:</h3><ul><li><strong>Input:</strong> nums = [-1,0,1,2,-1,-4]<br><strong>Output:</strong> [[-1,-1,2],[-1,0,1]]<br><strong>Explanation:</strong> <code>nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0</code>. <code>nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0</code>. <code>nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0</code>. The distinct triplets are <code>[-1,0,1]</code> and <code>[-1,-1,2]</code>.</li><li><strong>Input:</strong> nums = [0,1,1]<br><strong>Output:</strong> []<br><strong>Explanation:</strong> The only possible triplet does not sum up to 0.</li><li><strong>Input:</strong> nums = [0,0,0]<br><strong>Output:</strong> [[0,0,0]]<br><strong>Explanation:</strong> The only possible triplet sums up to 0.</li></ul><h3>Constraints:</h3><ul><li><code>3 &lt;= nums.length &lt;= 1000</code></li><li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li></ul>",
  "entry_function": "threeSum",
  "template": "def threeSum(nums):\n    ",
  "solution_text": "<h3>3Sum</h3><p><strong>Algorithm:</strong></p><ol><li>Sort the array to enable two pointers technique</li><li>Fix first element and use two pointers for remaining two</li><li>Skip duplicates to avoid duplicate triplets</li><li>Move pointers based on sum comparison with target</li></ol><p><strong>Time Complexity:</strong> O(n<sup>2</sup>) - nested loops with two pointers</p><p><strong>Space Complexity:</strong> O(1) - excluding output array</p><p><strong>Key Insights:</strong></p><ul><li>Sorting enables duplicate skipping and two pointers</li><li>Fix one element, find pair with remaining two pointers</li><li>Careful duplicate handling prevents redundant results</li></ul>",
  "solution_code": "def threeSum(nums):\n    nums.sort()\n    result = []\n    n = len(nums)\n    \n    for i in range(n-2):\n        # Skip duplicates for first number\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        \n        left, right = i+1, n-1\n        \n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            \n            if current_sum == 0:\n                result.append([nums[i], nums[left], nums[right]])\n                \n                # Skip duplicates\n                while left < right and nums[left] == nums[left+1]:\n                    left += 1\n                while left < right and nums[right] == nums[right-1]:\n                    right -= 1\n                \n                left += 1\n                right -= 1\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return result",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Prepare arguments for threeSum function\"\"\"\n    return (test_case_input['nums'],)",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the 3Sum result\"\"\"\n    def list_to_string(lst):\n        if not lst:\n            return '[]'\n        return '[' + ', '.join('[' + ', '.join(str(x) for x in inner) + ']' for inner in lst) + ']'\n    \n    # Convert to sets of tuples for comparison (order doesn't matter)\n    actual_set = set(tuple(sorted(triplet)) for triplet in actual_output)\n    expected_set = set(tuple(sorted(triplet)) for triplet in expected_output)\n    \n    passed = actual_set == expected_set\n    output_str = list_to_string(actual_output)\n    \n    return [passed, output_str]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          -1,
          0,
          1,
          2,
          -1,
          -4
        ]
      },
      "output": [
        [
          -1,
          -1,
          2
        ],
        [
          -1,
          0,
          1
        ]
      ]
    },
    {
      "id": 2,
      "input": {
        "nums": [
          0,
          1,
          1
        ]
      },
      "output": []
    },
    {
      "id": 3,
      "input": {
        "nums": [
          0,
          0,
          0
        ]
      },
      "output": [
        [
          0,
          0,
          0
        ]
      ]
    },
    {
      "id": 4,
      "input": {
        "nums": [
          -2,
          0,
          1,
          1,
          2
        ]
      },
      "output": [
        [
          -2,
          0,
          2
        ],
        [
          -2,
          1,
          1
        ]
      ]
    },
    {
      "id": 5,
      "input": {
        "nums": [
          -4,
          -1,
          -1,
          0,
          1,
          2
        ]
      },
      "output": [
        [
          -1,
          -1,
          2
        ],
        [
          -1,
          0,
          1
        ]
      ]
    },
    {
      "id": 6,
      "input": {
        "nums": [
          1,
          2,
          -2,
          -1
        ]
      },
      "output": []
    },
    {
      "id": 7,
      "input": {
        "nums": [
          -1,
          0,
          1,
          2,
          -1,
          -4,
          -2,
          -3,
          3,
          0,
          4
        ]
      },
      "output": [
        [
          -4,
          0,
          4
        ],
        [
          -4,
          1,
          3
        ],
        [
          -3,
          -1,
          4
        ],
        [
          -3,
          0,
          3
        ],
        [
          -3,
          1,
          2
        ],
        [
          -2,
          -1,
          3
        ],
        [
          -2,
          0,
          2
        ],
        [
          -1,
          -1,
          2
        ],
        [
          -1,
          0,
          1
        ]
      ]
    },
    {
      "id": 8,
      "input": {
        "nums": [
          0,
          0,
          0,
          0
        ]
      },
      "output": [
        [
          0,
          0,
          0
        ]
      ]
    },
    {
      "id": 9,
      "input": {
        "nums": [
          -5,
          -4,
          -3,
          -2,
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "output": [
        [
          -5,
          0,
          5
        ],
        [
          -5,
          1,
          4
        ],
        [
          -5,
          2,
          3
        ],
        [
          -4,
          -1,
          5
        ],
        [
          -4,
          0,
          4
        ],
        [
          -4,
          1,
          3
        ],
        [
          -3,
          -2,
          5
        ],
        [
          -3,
          -1,
          4
        ],
        [
          -3,
          0,
          3
        ],
        [
          -3,
          1,
          2
        ],
        [
          -2,
          -1,
          3
        ],
        [
          -2,
          0,
          2
        ],
        [
          -1,
          0,
          1
        ]
      ]
    },
    {
      "id": 10,
      "input": {
        "nums": [
          3,
          0,
          -2,
          -1,
          1,
          2
        ]
      },
      "output": [
        [
          -2,
          -1,
          3
        ],
        [
          -2,
          0,
          2
        ],
        [
          -1,
          0,
          1
        ]
      ]
    }
  ]
}
