{
  "index": 83,
  "filename": "car-pooling",
  "title": "Car Pooling",
  "keywords": [
    "car",
    "pooling",
    "leetcode",
    "1094",
    "there",
    "capacity",
    "empty",
    "seats",
    "vehicle",
    "only"
  ],
  "description": "<h2>Car Pooling</h2><p>There is a car with <code>capacity</code> empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).</p><p>You are given the integer <code>capacity</code> and an integer array <code>trips</code> where <code>trips[i] = [numPassengers[i], from[i], to[i]]</code> indicates that the <code>ith</code> trip has <code>numPassengers[i]</code> passengers and the locations to pick them up and drop them off are <code>from[i]</code> and <code>to[i]</code> respectively. The locations are given as the number of kilometers due east from the car's initial location.</p><p>Return <code>true</code> if it is possible to pick up and drop off all passengers for all the given trips, or <code>false</code> otherwise.</p><h3>Examples:</h3><ul><li><strong>Input:</strong> <code>trips = [[4,1,2],[3,2,4]], capacity = 4</code><br><strong>Output:</strong> <code>true</code></li><li><strong>Input:</strong> <code>trips = [[2,1,3],[3,2,4]], capacity = 4</code><br><strong>Output:</strong> <code>false</code></li></ul><h3>Constraints:</h3><ul><li><code>1 <= trips.length <= 1000</code></li><li><code>trips[i].length == 3</code></li><li><code>1 <= numPassengers[i] <= 100</code></li><li><code>0 <= from[i] < to[i] <= 1000</code></li><li><code>1 <= capacity <= 100000</code></li></ul>",
  "entry_function": "carPooling",
  "template": "def carPooling(trips, capacity):\n    ",
  "solution_text": "<p><strong>Car Pooling Solution using Difference Array:</strong></p><p>Track passenger count changes at pickup and dropoff points.</p><p><strong>Algorithm:</strong></p><ol><li>Create events for pickup (+passengers) and dropoff (-passengers)</li><li>Sort events by location</li><li>Process events and track current passenger count</li><li>Check if capacity is ever exceeded</li></ol><p><strong>Alternative: Difference Array</strong></p><ol><li>Use array to track passenger changes at each location</li><li>Increment at pickup, decrement at dropoff</li><li>Calculate running sum and check capacity</li></ol><p><strong>Time Complexity:</strong> O(n log n) for sorting or O(max_location) for difference array</p><p><strong>Space Complexity:</strong> O(n) or O(max_location)</p><p><strong>Key Insights:</strong></p><ul><li>Event-based approach tracks state changes at specific locations</li><li>Sorting events allows single pass through locations in order</li><li>Dropoff and pickup at same location: pickup happens first (tuples sort naturally)</li><li>Early exit when capacity exceeded saves unnecessary processing</li></ul>",
  "solution_code": "def carPooling(trips, capacity):\n    # Create events: (location, passenger_change)\n    events = []\n    \n    for passengers, start, end in trips:\n        events.append((start, passengers))    # pickup: add passengers\n        events.append((end, -passengers))     # dropoff: remove passengers\n    \n    # Sort events by location\n    events.sort()\n    \n    # Process events and track current passenger count\n    current_passengers = 0\n    \n    for location, change in events:\n        current_passengers += change\n        if current_passengers > capacity:\n            return False\n    \n    return True",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "trips": [
          [
            4,
            1,
            2
          ],
          [
            3,
            2,
            4
          ]
        ],
        "capacity": 4
      },
      "output": "true"
    },
    {
      "id": 2,
      "input": {
        "trips": [
          [
            2,
            1,
            3
          ],
          [
            3,
            2,
            4
          ]
        ],
        "capacity": 4
      },
      "output": "false"
    },
    {
      "id": 3,
      "input": {
        "trips": [
          [
            2,
            1,
            5
          ],
          [
            3,
            3,
            7
          ]
        ],
        "capacity": 4
      },
      "output": "false"
    },
    {
      "id": 4,
      "input": {
        "trips": [
          [
            2,
            1,
            5
          ],
          [
            3,
            5,
            7
          ]
        ],
        "capacity": 5
      },
      "output": "true"
    },
    {
      "id": 5,
      "input": {
        "trips": [
          [
            3,
            2,
            7
          ],
          [
            3,
            7,
            9
          ],
          [
            8,
            3,
            9
          ]
        ],
        "capacity": 11
      },
      "output": "true"
    },
    {
      "id": 6,
      "input": {
        "trips": [
          [
            9,
            0,
            1
          ],
          [
            3,
            3,
            4
          ]
        ],
        "capacity": 10
      },
      "output": "true"
    },
    {
      "id": 7,
      "input": {
        "trips": [
          [
            1,
            1,
            2
          ],
          [
            2,
            2,
            3
          ],
          [
            3,
            3,
            4
          ]
        ],
        "capacity": 3
      },
      "output": "true"
    },
    {
      "id": 8,
      "input": {
        "trips": [
          [
            1,
            1,
            6
          ],
          [
            1,
            4,
            5
          ],
          [
            1,
            6,
            7
          ]
        ],
        "capacity": 2
      },
      "output": "true"
    },
    {
      "id": 9,
      "input": {
        "trips": [
          [
            5,
            1,
            3
          ],
          [
            4,
            2,
            6
          ],
          [
            6,
            6,
            8
          ]
        ],
        "capacity": 9
      },
      "output": "true"
    },
    {
      "id": 10,
      "input": {
        "trips": [
          [
            1,
            2,
            4
          ],
          [
            3,
            1,
            3
          ],
          [
            2,
            3,
            5
          ]
        ],
        "capacity": 4
      },
      "output": "true"
    },
    {
      "id": 11,
      "input": {
        "trips": [
          [
            7,
            5,
            6
          ],
          [
            6,
            7,
            8
          ],
          [
            1,
            1,
            5
          ]
        ],
        "capacity": 8
      },
      "output": "true"
    },
    {
      "id": 12,
      "input": {
        "trips": [
          [
            20,
            0,
            5
          ],
          [
            10,
            1,
            3
          ],
          [
            5,
            4,
            6
          ]
        ],
        "capacity": 30
      },
      "output": "true"
    }
  ],
  "prepare": "def prepare(test_case_input):\n    return (test_case_input['trips'], test_case_input['capacity'])",
  "verify": "def verify(actual_output, expected_output):\n    def bool_to_string(val):\n        return 'true' if val else 'false'\n    \n    # Convert expected output string to boolean for comparison if needed\n    expected_bool = expected_output == 'true' if isinstance(expected_output, str) else expected_output\n    \n    passed = actual_output == expected_bool\n    output_str = bool_to_string(actual_output)\n    \n    return [passed, output_str]"
}
