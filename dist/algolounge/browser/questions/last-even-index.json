{
  "index": 49,
  "filename": "last-even-index",
  "title": "Last Even Index",
  "keywords": [
    "array",
    "even",
    "index",
    "iteration",
    "modulo",
    "easy"
  ],
  "description": "<h2>HW04 - Last Even Index</h2><p>Return the index of the last even integer in the given array <code>arr</code>. If there's no even number, return -1.</p><h3>Examples:</h3><ul><li>Input: [1, 3, 2, 4, 5]<br>Output: 3<br>Explanation: The last even number is 4 at index 3</li><li>Input: [1, 3, 5]<br>Output: -1<br>Explanation: No even numbers in the array</li><li>Input: [2]<br>Output: 0<br>Explanation: Single even number at index 0</li></ul><h3>Constraints:</h3><ul><li>Array contains at least 1 element</li><li>Return -1 if no even numbers exist</li><li>Even numbers are divisible by 2</li></ul>",
  "entry_function": "lastEvenIndex",
  "template": "def lastEvenIndex(arr):\n  ",
  "solution_text": "<h3>Last Even Index</h3><p><strong>Algorithm:</strong></p><ol><li>Iterate through array from end to beginning</li><li>Return index of first even number found</li><li>Return -1 if no even number exists</li></ol><p><strong>Time Complexity:</strong> O(n) - worst case check all elements</p><p><strong>Space Complexity:</strong> O(1) - constant space</p><p><strong>Key Insights:</strong></p><ul><li>Backward iteration finds last occurrence efficiently (first match is last in array)</li><li>Early exit returns immediately without checking remaining elements</li><li>Range from len-1 down to 0 using step -1</li><li>Modulo operator: num % 2 == 0 identifies even numbers</li></ul>",
  "solution_code": "def lastEvenIndex(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] % 2 == 0:\n            return i\n    return -1",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Prepare arguments for lastEvenIndex function\"\"\"\n    return (test_case_input['arr'],)",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the index result\"\"\"\n    passed = actual_output == expected_output\n    return [passed, str(actual_output)]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "arr": [
          1,
          3,
          2,
          4,
          5
        ]
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "arr": [
          1,
          3,
          5
        ]
      },
      "output": -1
    },
    {
      "id": 3,
      "input": {
        "arr": [
          2
        ]
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "arr": [
          2,
          4,
          6,
          8
        ]
      },
      "output": 3
    },
    {
      "id": 5,
      "input": {
        "arr": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "output": 5
    },
    {
      "id": 6,
      "input": {
        "arr": [
          7,
          9,
          11
        ]
      },
      "output": -1
    },
    {
      "id": 7,
      "input": {
        "arr": [
          10,
          20,
          30,
          40,
          50
        ]
      },
      "output": 4
    },
    {
      "id": 8,
      "input": {
        "arr": [
          1,
          3,
          5,
          7,
          8,
          9
        ]
      },
      "output": 4
    },
    {
      "id": 9,
      "input": {
        "arr": [
          0
        ]
      },
      "output": 0
    },
    {
      "id": 10,
      "input": {
        "arr": [
          2,
          1,
          4,
          3,
          6,
          5
        ]
      },
      "output": 4
    }
  ]
}
