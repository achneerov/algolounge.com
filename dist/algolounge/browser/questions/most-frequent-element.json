{
  "index": 60,
  "filename": "most-frequent-element",
  "title": "Most Frequent Element",
  "keywords": [
    "array",
    "frequency",
    "hash-map",
    "counting",
    "easy"
  ],
  "description": "<h2>Most Frequent Element</h2><p>Find the most frequent element in an array. If multiple elements have the same maximum frequency, return the smallest element.</p><h3>Examples:</h3><ul><li>Input: [3, 3, 3, 2, 1]<br>Output: 3<br>Explanation: 3 appears most frequently (3 times)</li><li>Input: [3, 1, 3, 1, 2]<br>Output: 1<br>Explanation: Both 3 and 1 appear twice, return smaller element (1)</li></ul><h3>Constraints:</h3><ul><li>Array contains at least 1 element</li><li>Handle ties by returning smallest element</li></ul>",
  "entry_function": "mostFrequent",
  "template": "def mostFrequent(arr):\n  ",
  "solution_text": "<h3>Most Frequent Element</h3><p><strong>Algorithm:</strong></p><ol><li>Count frequency of each element</li><li>Find maximum frequency</li><li>Among elements with max frequency, return smallest</li></ol><p><strong>Time Complexity:</strong> O(n) - count frequencies</p><p><strong>Space Complexity:</strong> O(n) - frequency map</p><p><strong>Key Insights:</strong></p><ul><li>Counter class from collections provides efficient frequency counting</li><li>Tie-breaking: filter elements with max frequency, then use min() to get smallest</li><li>max(freq.values()) finds the maximum count across all elements</li><li>List comprehension filters all elements with maximum frequency</li></ul>",
  "solution_code": "from collections import Counter\n\ndef mostFrequent(arr):\n    freq = Counter(arr)\n    max_freq = max(freq.values())\n    candidates = [num for num, count in freq.items() if count == max_freq]\n    return min(candidates)",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Prepare arguments for mostFrequent function\"\"\"\n    return (test_case_input['arr'],)",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the most frequent element\"\"\"\n    passed = actual_output == expected_output\n    return [passed, str(actual_output)]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "arr": [
          3,
          3,
          3,
          2,
          1
        ]
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "arr": [
          3,
          1,
          3,
          1,
          2
        ]
      },
      "output": 1
    },
    {
      "id": 3,
      "input": {
        "arr": [
          5
        ]
      },
      "output": 5
    },
    {
      "id": 4,
      "input": {
        "arr": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "output": 1
    },
    {
      "id": 5,
      "input": {
        "arr": [
          10,
          10,
          5,
          5,
          3
        ]
      },
      "output": 5
    },
    {
      "id": 6,
      "input": {
        "arr": [
          7,
          7,
          7,
          7
        ]
      },
      "output": 7
    },
    {
      "id": 7,
      "input": {
        "arr": [
          4,
          4,
          4,
          2,
          2,
          2,
          1
        ]
      },
      "output": 2
    },
    {
      "id": 8,
      "input": {
        "arr": [
          100,
          200,
          100,
          200,
          100
        ]
      },
      "output": 100
    },
    {
      "id": 9,
      "input": {
        "arr": [
          1,
          1,
          2,
          2,
          3,
          3,
          4,
          4
        ]
      },
      "output": 1
    },
    {
      "id": 10,
      "input": {
        "arr": [
          9,
          8,
          7,
          6,
          5,
          4,
          3,
          2,
          1
        ]
      },
      "output": 1
    }
  ]
}
