{
  "filename": "find-target-in-rotated-sorted-array",
  "title": "Search in Rotated Sorted Array",
  "keywords": [
    "search",
    "rotated",
    "sorted",
    "array",
    "leetcode",
    "given",
    "length",
    "which",
    "originally",
    "ascending"
  ],
  "description": "<h2>Search in Rotated Sorted Array</h2><p>Leetcode 33. Search In Rotated Sorted Array</p><p></p><p>You are given an array of length `n` which was originally sorted in ascending order. It has now been **rotated** between `1` and `n` times. For example, the array `nums = [1,2,3,4,5,6]` might become:</p><p></p><p>* `[3,4,5,6,1,2]` if it was rotated `4` times.</p><p>* `[1,2,3,4,5,6]` if it was rotated `6` times.</p><p></p><p>Given the rotated sorted array `nums` and an integer `target`, return the index of `target` within `nums`, or `-1` if it is not present.</p><p></p><p>You may assume all elements in the sorted rotated array `nums` are **unique**,</p><p></p><p>A solution that runs in `O(n)` time is trivial, can you write an algorithm that runs in `O(log n) time`?</p><h3>Examples:</h3><ul><li>Input: nums = [3,4,5,6,1,2], target = 1<br><br>Output: 4</li><li>Input: nums = [3,5,6,0,1,2], target = 4<br><br>Output: -1</li></ul><h3>Constraints:</h3><ul><li> `1 <= nums.length <= 1000`</li><li> `-1000 <= nums[i] <= 1000`</li><li> `-1000 <= target <= 1000`</li></ul>",
  "languages": {
    "python": {
      "template": "def searchInRotatedSortedArray(nums, target):\n    ",
      "solution_text": "<h3>Search in Rotated Sorted Array</h3><p><strong>Algorithm:</strong></p><ol><li>Use modified binary search to handle rotation</li><li>At each step, determine which half is properly sorted</li><li>If target is in the sorted half, search there</li><li>Otherwise, search the other half</li><li>Continue until target found or search space exhausted</li></ol><p><strong>Time Complexity:</strong> O(log n) - binary search with rotation handling</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>One half of rotated array is always properly sorted</li><li>Check if target lies within the sorted half's range</li><li>Pivot point divides array into two sorted segments</li></ul>",
      "solution_code": "def searchInRotatedSortedArray(nums, target):\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if nums[mid] == target:\n            return mid\n        \n        # Check if left half is sorted\n        if nums[left] <= nums[mid]:\n            # Target is in the sorted left half\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            # Right half must be sorted\n            # Target is in the sorted right half\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    return -1"
    },
    "javascript": {
      "template": "function searchInRotatedSortedArray(nums, target) {\n  \n}",
      "solution_text": "<h3>Search in Rotated Sorted Array</h3><p><strong>Algorithm:</strong></p><ol><li>Use modified binary search to handle rotation</li><li>At each step, determine which half is properly sorted</li><li>If target is in the sorted half, search there</li><li>Otherwise, search the other half</li><li>Continue until target found or search space exhausted</li></ol><p><strong>Time Complexity:</strong> O(log n) - binary search with rotation handling</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>One half of rotated array is always properly sorted</li><li>Check if target lies within the sorted half's range</li><li>Pivot point divides array into two sorted segments</li></ul>",
      "solution_code": "function searchInRotatedSortedArray(nums, target) {\n    let left = 0, right = nums.length - 1;\n    \n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        \n        if (nums[mid] === target) {\n            return mid;\n        }\n        \n        // Check if left half is sorted\n        if (nums[left] <= nums[mid]) {\n            // Target is in the sorted left half\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            // Right half must be sorted\n            // Target is in the sorted right half\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    \n    return -1;\n}"
    },
    "typescript": {
      "template": "function searchInRotatedSortedArray(nums: number[], target: number): number {\n  \n}",
      "solution_text": "<h3>Search in Rotated Sorted Array</h3><p><strong>Algorithm:</strong></p><ol><li>Use modified binary search to handle rotation</li><li>At each step, determine which half is properly sorted</li><li>If target is in the sorted half, search there</li><li>Otherwise, search the other half</li><li>Continue until target found or search space exhausted</li></ol><p><strong>Time Complexity:</strong> O(log n) - binary search with rotation handling</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>One half of rotated array is always properly sorted</li><li>Check if target lies within the sorted half's range</li><li>Pivot point divides array into two sorted segments</li></ul>",
      "solution_code": "function searchInRotatedSortedArray(nums: number[], target: number): number {\n    let left = 0, right = nums.length - 1;\n    \n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        \n        if (nums[mid] === target) {\n            return mid;\n        }\n        \n        // Check if left half is sorted\n        if (nums[left] <= nums[mid]) {\n            // Target is in the sorted left half\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            // Right half must be sorted\n            // Target is in the sorted right half\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    \n    return -1;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int searchInRotatedSortedArray(int[] nums, int target) {\n        \n    }\n}",
      "solution_text": "<h3>Search in Rotated Sorted Array</h3><p><strong>Algorithm:</strong></p><ol><li>Use modified binary search to handle rotation</li><li>At each step, determine which half is properly sorted</li><li>If target is in the sorted half, search there</li><li>Otherwise, search the other half</li><li>Continue until target found or search space exhausted</li></ol><p><strong>Time Complexity:</strong> O(log n) - binary search with rotation handling</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>One half of rotated array is always properly sorted</li><li>Check if target lies within the sorted half's range</li><li>Pivot point divides array into two sorted segments</li></ul>",
      "solution_code": "class Solution {\n    public int searchInRotatedSortedArray(int[] nums, int target) {\n        int left = 0, right = nums.length - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            if (nums[mid] == target) {\n                return mid;\n            }\n            \n            // Check if left half is sorted\n            if (nums[left] <= nums[mid]) {\n                // Target is in the sorted left half\n                if (nums[left] <= target && target < nums[mid]) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                // Right half must be sorted\n                // Target is in the sorted right half\n                if (nums[mid] < target && target <= nums[right]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        \n        return -1;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          3,
          4,
          5,
          6,
          1,
          2
        ],
        "target": 1
      },
      "output": 4
    },
    {
      "id": 2,
      "input": {
        "nums": [
          3,
          5,
          6,
          0,
          1,
          2
        ],
        "target": 4
      },
      "output": -1
    },
    {
      "id": 3,
      "input": {
        "nums": [
          4,
          5,
          6,
          7,
          0,
          1,
          2
        ],
        "target": 0
      },
      "output": 4
    },
    {
      "id": 4,
      "input": {
        "nums": [
          4,
          5,
          6,
          7,
          0,
          1,
          2
        ],
        "target": 3
      },
      "output": -1
    },
    {
      "id": 5,
      "input": {
        "nums": [
          1
        ],
        "target": 0
      },
      "output": -1
    },
    {
      "id": 6,
      "input": {
        "nums": [
          1
        ],
        "target": 1
      },
      "output": 0
    },
    {
      "id": 7,
      "input": {
        "nums": [
          1,
          3
        ],
        "target": 3
      },
      "output": 1
    },
    {
      "id": 8,
      "input": {
        "nums": [
          5,
          1,
          3
        ],
        "target": 5
      },
      "output": 0
    },
    {
      "id": 9,
      "input": {
        "nums": [
          7,
          8,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "target": 2
      },
      "output": 3
    },
    {
      "id": 10,
      "input": {
        "nums": [
          6,
          7,
          8,
          1,
          2,
          3,
          4,
          5
        ],
        "target": 8
      },
      "output": 2
    }
  ]
}