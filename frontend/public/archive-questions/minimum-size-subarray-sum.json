{
  "filename": "minimum-size-subarray-sum",
  "title": "Minimum Size Subarray Sum",
  "keywords": [
    "minimum",
    "size",
    "subarray",
    "sum",
    "leetcode",
    "209",
    "given",
    "array",
    "positive",
    "integers"
  ],
  "description": "<h2>Minimum Size Subarray Sum</h2><p>Leetcode 209. Minimum Size Subarray Sum</p><p></p><p>You are given an array of positive integers `nums` and a positive integer `target`, return the **minimal length** of a subarray whose sum is greater than or equal to `target`. If there is no such subarray, return `0` instead.</p><p></p><p>A **subarray** is a contiguous non-empty sequence of elements within an array.</p><h3>Examples:</h3><ul><li>Input: target = 10, nums = [2,1,5,1,5,3]<br><br>Output: 3<br>The subarray `[5,1,5]` has the minimal length under the problem constraint.</li><li>Input: target = 5, nums = [1,2,1]<br><br>Output: 0</li></ul><h3>Constraints:</h3><ul><li> `1 <= nums.length <= 100,000`</li><li> `1 <= nums[i] <= 10,000`</li><li> `1 <= target <= 1,000,000,000`</li></ul>",
  "languages": {
    "python": {
      "template": "def minimumSizeSubarraySum(target, nums):\n    ",
      "solution_text": "Min/Max finding algorithm:\n\n**Algorithm:**\n1. Initialize min/max with first element\n2. Iterate through remaining elements\n3. Update min/max as needed\n\n**Time Complexity:** O(n) - single pass through array\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Handle empty arrays with appropriate defaults\n- Consider both positive and negative numbers\n- Single pass optimization",
      "solution_code": "def minimumSizeSubarraySum(nums):\n    if not nums:\n        return 0  # or appropriate default\n    \n    result = nums[0]\n    \n    for num in nums[1:]:\n        if 'max' in 'minimumSizeSubarraySum'.lower():\n            result = max(result, num)\n        else:\n            result = min(result, num)\n    \n    return result"
    },
    "javascript": {
      "template": "function minimumSizeSubarraySum(target, nums) {\n  \n}",
      "solution_text": "Min/Max finding algorithm:\n\n**Algorithm:**\n1. Initialize min/max with first element\n2. Iterate through remaining elements\n3. Update min/max as needed\n\n**Time Complexity:** O(n) - single pass through array\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Handle empty arrays with appropriate defaults\n- Consider both positive and negative numbers\n- Single pass optimization",
      "solution_code": "function minimumSizeSubarraySum(nums) {\n    if (!nums || nums.length === 0) return 0;\n    \n    let result = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        if ('minimumSizeSubarraySum'.toLowerCase().includes('max')) {\n            result = Math.max(result, nums[i]);\n        } else {\n            result = Math.min(result, nums[i]);\n        }\n    }\n    \n    return result;\n}"
    },
    "typescript": {
      "template": "function minimumSizeSubarraySum(target: string, nums: number[]): number {\n  \n}",
      "solution_text": "Min/Max finding algorithm:\n\n**Algorithm:**\n1. Initialize min/max with first element\n2. Iterate through remaining elements\n3. Update min/max as needed\n\n**Time Complexity:** O(n) - single pass through array\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Handle empty arrays with appropriate defaults\n- Consider both positive and negative numbers\n- Single pass optimization",
      "solution_code": "function minimumSizeSubarraySum(nums: number[]): number {\n    if (!nums || nums.length === 0) return 0;\n    \n    let result = nums[0];\n    \n    for (let i = 1; i < nums.length; i++) {\n        if ('minimumSizeSubarraySum'.toLowerCase().includes('max')) {\n            result = Math.max(result, nums[i]);\n        } else {\n            result = Math.min(result, nums[i]);\n        }\n    }\n    \n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int minimumSizeSubarraySum(String target, int[] nums) {\n        \n    }\n}",
      "solution_text": "Min/Max finding algorithm:\n\n**Algorithm:**\n1. Initialize min/max with first element\n2. Iterate through remaining elements\n3. Update min/max as needed\n\n**Time Complexity:** O(n) - single pass through array\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Handle empty arrays with appropriate defaults\n- Consider both positive and negative numbers\n- Single pass optimization",
      "solution_code": "class Solution {\n    public int minimumSizeSubarraySum(int[] nums) {\n        if (nums == null || nums.length == 0) return 0;\n        \n        int result = nums[0];\n        \n        for (int i = 1; i < nums.length; i++) {\n            if (\"minimumSizeSubarraySum\".toLowerCase().contains(\"max\")) {\n                result = Math.max(result, nums[i]);\n            } else {\n                result = Math.min(result, nums[i]);\n            }\n        }\n        \n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "target": "10,",
        "nums": [
          2,
          1,
          5,
          1,
          5,
          3
        ]
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "target": "5,",
        "nums": [
          1,
          2,
          1
        ]
      },
      "output": 0
    }
  ]
}