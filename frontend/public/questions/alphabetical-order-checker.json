{
  "index": 6,
  "filename": "alphabetical-order-checker",
  "title": "Alphabetical Order Checker",
  "keywords": [
    "string",
    "sorting",
    "validation",
    "comparison",
    "easy"
  ],
  "description": "<h2>Alphabetical Order Checker</h2><p>Determine if the characters in a string are in non-decreasing alphabetical order.</p><h3>Examples:</h3><ul><li>Input: \"abc\"<br>Output: true</li><li>Input: \"aab\"<br>Output: true<br>Explanation: 'a' ≤ 'a' ≤ 'b' (non-decreasing)</li><li>Input: \"ba\"<br>Output: false</li><li>Input: \"\"<br>Output: true<br>Explanation: Empty string is considered ordered</li></ul><h3>Constraints:</h3><ul><li>Empty strings and single characters are considered ordered</li><li>Repeating characters are allowed (non-decreasing)</li></ul>",
  "entry_function": "isAlphabeticalOrder",
  "template": "def isAlphabeticalOrder(s):\n  ",
  "solution_text": "<h3>Alphabetical Order Checker</h3><p><strong>Algorithm:</strong></p><ol><li>Iterate through string</li><li>Compare each character with previous</li><li>Return false if any character is less than previous</li></ol><p><strong>Time Complexity:</strong> O(n) - iterate through string</p><p><strong>Space Complexity:</strong> O(1) - constant space</p>",
  "solution_code": "def isAlphabeticalOrder(s):\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            return False\n    return True",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Prepare arguments for isAlphabeticalOrder function\"\"\"\n    return (test_case_input['s'],)",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the order check result\"\"\"\n    def bool_to_string(val):\n        return 'true' if val else 'false'\n    \n    # Convert expected output to boolean for comparison if it's not already\n    expected_bool = expected_output if isinstance(expected_output, bool) else (expected_output == 'true')\n    \n    passed = actual_output == expected_bool\n    output_str = bool_to_string(actual_output)\n    \n    return [passed, output_str]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "s": "abc"
      },
      "output": "true"
    },
    {
      "id": 2,
      "input": {
        "s": "aab"
      },
      "output": "true"
    },
    {
      "id": 3,
      "input": {
        "s": "ba"
      },
      "output": "false"
    },
    {
      "id": 4,
      "input": {
        "s": ""
      },
      "output": "true"
    },
    {
      "id": 5,
      "input": {
        "s": "abcdefghijklmnopqrstuvwxyz"
      },
      "output": "true"
    },
    {
      "id": 6,
      "input": {
        "s": "aaabbbccc"
      },
      "output": "true"
    },
    {
      "id": 7,
      "input": {
        "s": "xyz"
      },
      "output": "true"
    },
    {
      "id": 8,
      "input": {
        "s": "zyx"
      },
      "output": "false"
    },
    {
      "id": 9,
      "input": {
        "s": "a"
      },
      "output": "true"
    },
    {
      "id": 10,
      "input": {
        "s": "abcba"
      },
      "output": "false"
    }
  ]
}
