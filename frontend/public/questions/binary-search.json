{
  "index": 14,
  "filename": "binary-search",
  "title": "Binary Search",
  "keywords": [
    "binary",
    "search",
    "leetcode",
    "704",
    "given",
    "array",
    "distinct",
    "integers",
    "nums",
    "sorted"
  ],
  "description": "<h2>Binary Search</h2><p>Leetcode 704. Binary Search</p><p>You are given an array of <strong>distinct</strong> integers <code>nums</code>, sorted in ascending order, and an integer <code>target</code>.</p><p>Implement a function to search for <code>target</code> within <code>nums</code>. If it exists, then return its index, otherwise, return <code>-1</code>.</p><p>Your solution must run in O(log n) time.</p><h3>Examples</h3><ul><li>Input: <code>nums = [-1,0,2,4,6,8]</code>, <code>target = 4</code><br>Output: <code>3</code></li><li>Input: <code>nums = [-1,0,2,4,6,8]</code>, <code>target = 3</code><br>Output: <code>-1</code></li></ul><h3>Constraints</h3><ul><li><code>1 <= nums.length <= 10000</code></li><li><code>-10000 < nums[i], target < 10000</code></li><li>All the integers in <code>nums</code> are <strong>unique</strong></li></ul>",
  "entry_function": "binarySearch",
  "template": "def binarySearch(nums, target):\n    ",
  "solution_text": "<h3>Binary Search</h3><p><strong>Algorithm:</strong></p><ol><li>Initialize left and right pointers to array bounds</li><li>While left <= right, calculate middle index</li><li>Compare middle element with target</li><li>Adjust search space based on comparison</li></ol><p><strong>Time Complexity:</strong> O(log n) - halves search space each iteration</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Requires sorted input array</li><li>Avoids integer overflow with left + (right - left) // 2</li><li>Returns -1 if target not found</li></ul>",
  "solution_code": "def binarySearch(nums, target):\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        # Avoid integer overflow\n        mid = left + (right - left) // 2\n        \n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Prepare arguments for binarySearch function\"\"\"\n    return (test_case_input['nums'], test_case_input['target'])",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the binary search result\"\"\"\n    passed = actual_output == expected_output\n    output_str = str(actual_output)\n    \n    return [passed, output_str]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          -1,
          0,
          2,
          4,
          6,
          8
        ],
        "target": 4
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "nums": [
          -1,
          0,
          2,
          4,
          6,
          8
        ],
        "target": 3
      },
      "output": -1
    },
    {
      "id": 3,
      "input": {
        "nums": [
          5
        ],
        "target": 5
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "nums": [
          5
        ],
        "target": 3
      },
      "output": -1
    },
    {
      "id": 5,
      "input": {
        "nums": [
          1,
          3,
          5,
          7,
          9
        ],
        "target": 1
      },
      "output": 0
    },
    {
      "id": 6,
      "input": {
        "nums": [
          1,
          3,
          5,
          7,
          9
        ],
        "target": 9
      },
      "output": 4
    },
    {
      "id": 7,
      "input": {
        "nums": [
          1,
          3,
          5,
          7,
          9
        ],
        "target": 5
      },
      "output": 2
    },
    {
      "id": 8,
      "input": {
        "nums": [
          2,
          4,
          6,
          8,
          10,
          12,
          14,
          16
        ],
        "target": 2
      },
      "output": 0
    },
    {
      "id": 9,
      "input": {
        "nums": [
          2,
          4,
          6,
          8,
          10,
          12,
          14,
          16
        ],
        "target": 16
      },
      "output": 7
    },
    {
      "id": 10,
      "input": {
        "nums": [
          2,
          4,
          6,
          8,
          10,
          12,
          14,
          16
        ],
        "target": 11
      },
      "output": -1
    },
    {
      "id": 11,
      "input": {
        "nums": [
          -10,
          -5,
          0,
          3,
          7
        ],
        "target": -5
      },
      "output": 1
    },
    {
      "id": 12,
      "input": {
        "nums": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "target": 0
      },
      "output": -1
    }
  ]
}
