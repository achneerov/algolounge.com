# Full-Stack Restructuring Plan

## Requirements

### Project Structure
- 2 folders: `frontend/` and `backend/`
- Backend: SQLite database with migrations folder
- Everything in TypeScript

### Backend Architecture
- Express.js server
- Controllers, Services, and Models pattern
- Drizzle ORM (no Knex)
- Hot reload support

### Database
- SQLite for both dev and prod
- Drizzle ORM with migrations
- JWT tokens lasting 1 month

### API
- REST endpoints
- Authentication: Sign up/Sign in (username, email, password)
- Favorite courses tracking (fetch, update, sync to backend)

### Scripts & Environment

**Root-level shell scripts (run from project root):**
- `./setup` - Git pull, npm install both repos, delete + rebuild based on migrations
- `./start` - Run backend + frontend concurrently with hot reload (Ctrl+C kills both)

**Environment handling:**
- Single `./start` script that checks for env variables
- If env vars exist (production) → use them
- If no env vars (local development) → use defaults (frontend: 4200, backend: 3000)
- Both frontend and backend read from `.env` files or env variables

### Build Output
- Angular build output → `backend/public/` (Express serves it)

## Project Structure
```
algolounge.com/
├── frontend/              (existing Angular app, outputs to backend/public)
├── backend/               (new Express.js + Drizzle ORM)
│   ├── src/
│   │   ├── controllers/
│   │   ├── services/
│   │   ├── models/        (Drizzle schemas)
│   │   ├── db/
│   │   │   └── migrations/
│   │   └── index.ts
│   ├── public/            (built Angular app served from here)
│   ├── drizzle.config.ts
│   ├── package.json
│   └── tsconfig.json
├── setup                  (shell script)
└── start                  (shell script - checks env vars, defaults to localhost)
```

**Note:** No root `package.json` needed. Shell scripts are standalone.
