{
  "filename": "climbing-stairs",
  "title": "Climbing Stairs",
  "keywords": [
    "climbing",
    "stairs",
    "fibonacci",
    "dynamic",
    "programming",
    "steps"
  ],
  "description": "<h2>Climbing Stairs</h2><p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: n = 2<br>Output: 2<br>Explanation: There are two ways to climb to the top.<br>1. 1 step + 1 step<br>2. 2 steps</li><li><strong>Example 2:</strong><br>Input: n = 3<br>Output: 3<br>Explanation: There are three ways to climb to the top.<br>1. 1 step + 1 step + 1 step<br>2. 1 step + 2 steps<br>3. 2 steps + 1 step</li></ul><h3>Constraints:</h3><ul><li>1 <= n <= 45</li></ul>",
  "entry_function": "climbStairs",
  "template": "def climbStairs(n):\n    ",
  "solution_text": "<h3>Approach</h3><p>This is a classic <strong>dynamic programming</strong> problem that follows the <strong>Fibonacci sequence</strong> pattern. Each step can be reached either from the previous step (n-1) or from two steps back (n-2).</p><h3>Algorithm</h3><ul><li>Base cases: 1 step = 1 way, 2 steps = 2 ways</li><li>For any step n: ways(n) = ways(n-1) + ways(n-2)</li><li>Use space-optimized approach with two variables instead of array</li><li>This avoids O(n) space complexity of traditional DP</li></ul><h3>Mathematical Insight</h3><p>The sequence follows: 1, 2, 3, 5, 8, 13... which is the Fibonacci sequence starting from the 2nd number.</p><h3>Time Complexity</h3><p>O(n) - single loop from 3 to n</p><h3>Space Complexity</h3><p>O(1) - only using two variables</p>",
  "solution_code": "def climbStairs(n):\n    if n <= 2:\n        return n\n    \n    prev2, prev1 = 1, 2\n    \n    for i in range(3, n + 1):\n        current = prev1 + prev2\n        prev2, prev1 = prev1, current\n    \n    return prev1",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "n": 2
      },
      "output": 2
    },
    {
      "id": 2,
      "input": {
        "n": 3
      },
      "output": 3
    },
    {
      "id": 3,
      "input": {
        "n": 4
      },
      "output": 5
    },
    {
      "id": 4,
      "input": {
        "n": 1
      },
      "output": 1
    },
    {
      "id": 5,
      "input": {
        "n": 5
      },
      "output": 8
    },
    {
      "id": 6,
      "input": {
        "n": 6
      },
      "output": 13
    },
    {
      "id": 7,
      "input": {
        "n": 10
      },
      "output": 89
    },
    {
      "id": 8,
      "input": {
        "n": 20
      },
      "output": 10946
    },
    {
      "id": 9,
      "input": {
        "n": 35
      },
      "output": 14930352
    },
    {
      "id": 10,
      "input": {
        "n": 45
      },
      "output": 1836311903
    },
    {
      "id": 11,
      "input": {
        "n": 7
      },
      "output": 21
    },
    {
      "id": 12,
      "input": {
        "n": 8
      },
      "output": 34
    }
  ]
}