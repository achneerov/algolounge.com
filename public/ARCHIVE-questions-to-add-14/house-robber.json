{
  "filename": "house-robber",
  "title": "House Robber",
  "keywords": [
    "house",
    "robber",
    "dynamic",
    "programming",
    "maximum",
    "adjacent"
  ],
  "description": "<h2>House Robber</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><p>Given an integer array <code>nums</code> representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: nums = [1,2,3,1]<br>Output: 4<br>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).<br>Total amount you can rob = 1 + 3 = 4.</li><li><strong>Example 2:</strong><br>Input: nums = [2,7,9,3,1]<br>Output: 12<br>Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).<br>Total amount you can rob = 2 + 9 + 1 = 12.</li></ul><h3>Constraints:</h3><ul><li>1 <= nums.length <= 100</li><li>0 <= nums[i] <= 400</li></ul>",
  "entry_function": "rob",
  "template": "def rob(nums):\n    ",
  "solution_text": "<h3>Approach</h3><p>This is a classic <strong>dynamic programming</strong> problem where we make optimal decisions at each house. The constraint is that we cannot rob adjacent houses.</p><h3>Algorithm</h3><ul><li>For each house, we have two choices: rob it or skip it</li><li>If we rob house i: <code>profit = nums[i] + maxProfit(i-2)</code></li><li>If we skip house i: <code>profit = maxProfit(i-1)</code></li><li>Take the maximum of both choices</li><li>Use space-optimized approach with two variables instead of array</li></ul><h3>Recurrence Relation</h3><p><code>dp[i] = max(dp[i-1], dp[i-2] + nums[i])</code></p><h3>Key Insight</h3><p>The maximum money we can rob up to house i is either: rob house i plus max money from i-2, or skip house i and take max money from i-1.</p><h3>Time Complexity</h3><p>O(n) - single pass through houses</p><h3>Space Complexity</h3><p>O(1) - only using two variables</p>",
  "solution_code": "def rob(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    prev2 = nums[0]\n    prev1 = max(nums[0], nums[1])\n    \n    for i in range(2, len(nums)):\n        current = max(prev1, prev2 + nums[i])\n        prev2 = prev1\n        prev1 = current\n    \n    return prev1",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          1,
          2,
          3,
          1
        ]
      },
      "output": 4
    },
    {
      "id": 2,
      "input": {
        "nums": [
          2,
          7,
          9,
          3,
          1
        ]
      },
      "output": 12
    },
    {
      "id": 3,
      "input": {
        "nums": [
          1
        ]
      },
      "output": 1
    },
    {
      "id": 4,
      "input": {
        "nums": [
          2,
          1
        ]
      },
      "output": 2
    },
    {
      "id": 5,
      "input": {
        "nums": [
          5,
          1,
          3,
          9
        ]
      },
      "output": 14
    },
    {
      "id": 6,
      "input": {
        "nums": [
          2,
          1,
          1,
          2
        ]
      },
      "output": 4
    },
    {
      "id": 7,
      "input": {
        "nums": [
          5,
          5,
          10,
          100,
          10,
          5
        ]
      },
      "output": 110
    },
    {
      "id": 8,
      "input": {
        "nums": [
          1,
          2,
          1,
          1
        ]
      },
      "output": 3
    },
    {
      "id": 9,
      "input": {
        "nums": [
          0,
          0,
          0
        ]
      },
      "output": 0
    },
    {
      "id": 10,
      "input": {
        "nums": [
          400,
          1,
          1,
          400
        ]
      },
      "output": 800
    },
    {
      "id": 11,
      "input": {
        "nums": [
          100,
          50,
          400,
          200,
          100
        ]
      },
      "output": 600
    },
    {
      "id": 12,
      "input": {
        "nums": [
          6,
          3,
          10,
          8,
          2,
          10,
          3,
          5,
          10,
          5,
          3
        ]
      },
      "output": 39
    }
  ]
}