{
  "filename": "ipo",
  "title": "IPO",
  "keywords": [
    "ipo",
    "leetcode",
    "502",
    "company",
    "limited",
    "resources",
    "only",
    "finish",
    "most",
    "distinct"
  ],
  "description": "<h2>IPO</h2><p>Leetcode 502. IPO</p><p></p><p>A company has limited resources, it can only finish at most `k` distinct projects before the IPO. Help the company to design the best way to **maximize** its total capital after finishing at most `k` distinct projects.</p><p></p><p>You are given `n` projects where the `ith` project has a pure profit `profits[i]` and a minimum capital of `capital[i]` is needed to start it. Initially, you have `w` capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.</p><p></p><p>Pick a list of at most `k` distinct projects from given projects to **maximize** your final capital, and return the final maximized capital.</p><p></p><p>The answer is guaranteed to fit in a 32-bit signed integer.</p><h3>Examples:</h3><ul><li>Input: k = 3, w = 0, profits = [1,4,2,3], capital = [0,3,1,1]<br><br>Output: 8<br>: The order of indices to pick are [0,3,1] and final capital is (1 + 3 + 4) = 8.</li><li>Input: k = 4, w = 2, profit = [2,3,1,5,3], capital = [4,4,2,3,3]<br><br>Output: 14<br>The order of indices to pick are [2,3,4,1] and final capital is (2 + (1 + 5 + 3 + 3)) = 14.</li></ul><h3>Constraints:</h3><ul><li> `n == profits.length == capital.length`</li><li> `1 <= n, k <= 100,000`</li><li> `0 <= w <= 1,000,000,000`</li><li> `0 <= profits[i] <= 10,000`</li><li> `0 <= capital[i] <= 1,000,000,000`</li></ul>",
  "languages": {
    "python": {
      "template": "def ipo(k, w, profits, capital):\n    ",
      "solution_text": "<p><strong>IPO Greedy Algorithm with Max Heaps:</strong></p><p>Maximize capital by selecting most profitable projects we can afford.</p><p><strong>Algorithm:</strong></p><ol><li>Create min heap of projects sorted by capital requirement</li><li>Create max heap for available projects (sorted by profit)</li><li>For each project we can complete (up to k):</li><li>- Add all affordable projects to max heap</li><li>- Select highest profit project if available</li><li>- Add profit to current capital</li></ol><p><strong>Time Complexity:</strong> O(n log n) - heap operations</p><p><strong>Space Complexity:</strong> O(n) - heap storage</p>",
      "solution_code": "def ipo(k, w, profits, capital):\n    import heapq\n    \n    n = len(profits)\n    # Min heap of (capital, profit) pairs\n    projects = [(capital[i], profits[i]) for i in range(n)]\n    heapq.heapify(projects)\n    \n    # Max heap for available projects (store negative profits for max heap)\n    available = []\n    \n    current_capital = w\n    \n    for _ in range(k):\n        # Add all projects we can afford to available heap\n        while projects and projects[0][0] <= current_capital:\n            cap, profit = heapq.heappop(projects)\n            heapq.heappush(available, -profit)  # Negative for max heap\n        \n        # If no projects available, break\n        if not available:\n            break\n        \n        # Take the most profitable project\n        max_profit = -heapq.heappop(available)\n        current_capital += max_profit\n    \n    return current_capital"
    },
    "javascript": {
      "template": "function ipo(k, w, profits, capital) {\n  \n}",
      "solution_text": "<p><strong>IPO Greedy Algorithm with Max Heaps:</strong></p><p>Maximize capital by selecting most profitable projects we can afford.</p><p><strong>Algorithm:</strong></p><ol><li>Create min heap of projects sorted by capital requirement</li><li>Create max heap for available projects (sorted by profit)</li><li>For each project we can complete (up to k):</li><li>- Add all affordable projects to max heap</li><li>- Select highest profit project if available</li><li>- Add profit to current capital</li></ol><p><strong>Time Complexity:</strong> O(n log n) - heap operations</p><p><strong>Space Complexity:</strong> O(n) - heap storage</p>",
      "solution_code": "function ipo(k, w, profits, capital) {\n    class MinHeap {\n        constructor() { this.heap = []; }\n        push(val) {\n            this.heap.push(val);\n            this.bubbleUp(this.heap.length - 1);\n        }\n        pop() {\n            if (this.heap.length === 0) return null;\n            if (this.heap.length === 1) return this.heap.pop();\n            const top = this.heap[0];\n            this.heap[0] = this.heap.pop();\n            this.bubbleDown(0);\n            return top;\n        }\n        bubbleUp(idx) {\n            if (idx === 0) return;\n            const parentIdx = Math.floor((idx - 1) / 2);\n            if (this.heap[parentIdx][0] > this.heap[idx][0]) {\n                [this.heap[parentIdx], this.heap[idx]] = [this.heap[idx], this.heap[parentIdx]];\n                this.bubbleUp(parentIdx);\n            }\n        }\n        bubbleDown(idx) {\n            const leftIdx = 2 * idx + 1;\n            const rightIdx = 2 * idx + 2;\n            let smallest = idx;\n            if (leftIdx < this.heap.length && this.heap[leftIdx][0] < this.heap[smallest][0]) {\n                smallest = leftIdx;\n            }\n            if (rightIdx < this.heap.length && this.heap[rightIdx][0] < this.heap[smallest][0]) {\n                smallest = rightIdx;\n            }\n            if (smallest !== idx) {\n                [this.heap[smallest], this.heap[idx]] = [this.heap[idx], this.heap[smallest]];\n                this.bubbleDown(smallest);\n            }\n        }\n        size() { return this.heap.length; }\n        peek() { return this.heap.length > 0 ? this.heap[0] : null; }\n    }\n    \n    class MaxHeap {\n        constructor() { this.heap = []; }\n        push(val) {\n            this.heap.push(val);\n            this.bubbleUp(this.heap.length - 1);\n        }\n        pop() {\n            if (this.heap.length === 0) return null;\n            if (this.heap.length === 1) return this.heap.pop();\n            const top = this.heap[0];\n            this.heap[0] = this.heap.pop();\n            this.bubbleDown(0);\n            return top;\n        }\n        bubbleUp(idx) {\n            if (idx === 0) return;\n            const parentIdx = Math.floor((idx - 1) / 2);\n            if (this.heap[parentIdx] < this.heap[idx]) {\n                [this.heap[parentIdx], this.heap[idx]] = [this.heap[idx], this.heap[parentIdx]];\n                this.bubbleUp(parentIdx);\n            }\n        }\n        bubbleDown(idx) {\n            const leftIdx = 2 * idx + 1;\n            const rightIdx = 2 * idx + 2;\n            let largest = idx;\n            if (leftIdx < this.heap.length && this.heap[leftIdx] > this.heap[largest]) {\n                largest = leftIdx;\n            }\n            if (rightIdx < this.heap.length && this.heap[rightIdx] > this.heap[largest]) {\n                largest = rightIdx;\n            }\n            if (largest !== idx) {\n                [this.heap[largest], this.heap[idx]] = [this.heap[idx], this.heap[largest]];\n                this.bubbleDown(largest);\n            }\n        }\n        size() { return this.heap.length; }\n    }\n    \n    const n = profits.length;\n    const projects = new MinHeap();\n    \n    // Add all projects to min heap sorted by capital\n    for (let i = 0; i < n; i++) {\n        projects.push([capital[i], profits[i]]);\n    }\n    \n    const available = new MaxHeap();\n    let currentCapital = w;\n    \n    for (let i = 0; i < k; i++) {\n        // Add all affordable projects to max heap\n        while (projects.size() > 0 && projects.peek()[0] <= currentCapital) {\n            const [cap, profit] = projects.pop();\n            available.push(profit);\n        }\n        \n        // If no projects available, break\n        if (available.size() === 0) {\n            break;\n        }\n        \n        // Take the most profitable project\n        const maxProfit = available.pop();\n        currentCapital += maxProfit;\n    }\n    \n    return currentCapital;\n}"
    },
    "typescript": {
      "template": "function ipo(k: number, w: number, profits: number[], capital: number[]): number {\n  \n}",
      "solution_text": "<p><strong>IPO Greedy Algorithm with Max Heaps:</strong></p><p>Maximize capital by selecting most profitable projects we can afford.</p><p><strong>Algorithm:</strong></p><ol><li>Create min heap of projects sorted by capital requirement</li><li>Create max heap for available projects (sorted by profit)</li><li>For each project we can complete (up to k):</li><li>- Add all affordable projects to max heap</li><li>- Select highest profit project if available</li><li>- Add profit to current capital</li></ol><p><strong>Time Complexity:</strong> O(n log n) - heap operations</p><p><strong>Space Complexity:</strong> O(n) - heap storage</p>",
      "solution_code": "function ipo(k: number, w: number, profits: number[], capital: number[]): number {\n    class MinHeap {\n        private heap: [number, number][] = [];\n        \n        push(val: [number, number]): void {\n            this.heap.push(val);\n            this.bubbleUp(this.heap.length - 1);\n        }\n        \n        pop(): [number, number] | null {\n            if (this.heap.length === 0) return null;\n            if (this.heap.length === 1) return this.heap.pop()!;\n            const top = this.heap[0];\n            this.heap[0] = this.heap.pop()!;\n            this.bubbleDown(0);\n            return top;\n        }\n        \n        private bubbleUp(idx: number): void {\n            if (idx === 0) return;\n            const parentIdx = Math.floor((idx - 1) / 2);\n            if (this.heap[parentIdx][0] > this.heap[idx][0]) {\n                [this.heap[parentIdx], this.heap[idx]] = [this.heap[idx], this.heap[parentIdx]];\n                this.bubbleUp(parentIdx);\n            }\n        }\n        \n        private bubbleDown(idx: number): void {\n            const leftIdx = 2 * idx + 1;\n            const rightIdx = 2 * idx + 2;\n            let smallest = idx;\n            if (leftIdx < this.heap.length && this.heap[leftIdx][0] < this.heap[smallest][0]) {\n                smallest = leftIdx;\n            }\n            if (rightIdx < this.heap.length && this.heap[rightIdx][0] < this.heap[smallest][0]) {\n                smallest = rightIdx;\n            }\n            if (smallest !== idx) {\n                [this.heap[smallest], this.heap[idx]] = [this.heap[idx], this.heap[smallest]];\n                this.bubbleDown(smallest);\n            }\n        }\n        \n        size(): number { return this.heap.length; }\n        peek(): [number, number] | null { return this.heap.length > 0 ? this.heap[0] : null; }\n    }\n    \n    class MaxHeap {\n        private heap: number[] = [];\n        \n        push(val: number): void {\n            this.heap.push(val);\n            this.bubbleUp(this.heap.length - 1);\n        }\n        \n        pop(): number | null {\n            if (this.heap.length === 0) return null;\n            if (this.heap.length === 1) return this.heap.pop()!;\n            const top = this.heap[0];\n            this.heap[0] = this.heap.pop()!;\n            this.bubbleDown(0);\n            return top;\n        }\n        \n        private bubbleUp(idx: number): void {\n            if (idx === 0) return;\n            const parentIdx = Math.floor((idx - 1) / 2);\n            if (this.heap[parentIdx] < this.heap[idx]) {\n                [this.heap[parentIdx], this.heap[idx]] = [this.heap[idx], this.heap[parentIdx]];\n                this.bubbleUp(parentIdx);\n            }\n        }\n        \n        private bubbleDown(idx: number): void {\n            const leftIdx = 2 * idx + 1;\n            const rightIdx = 2 * idx + 2;\n            let largest = idx;\n            if (leftIdx < this.heap.length && this.heap[leftIdx] > this.heap[largest]) {\n                largest = leftIdx;\n            }\n            if (rightIdx < this.heap.length && this.heap[rightIdx] > this.heap[largest]) {\n                largest = rightIdx;\n            }\n            if (largest !== idx) {\n                [this.heap[largest], this.heap[idx]] = [this.heap[idx], this.heap[largest]];\n                this.bubbleDown(largest);\n            }\n        }\n        \n        size(): number { return this.heap.length; }\n    }\n    \n    const n = profits.length;\n    const projects = new MinHeap();\n    \n    // Add all projects to min heap sorted by capital\n    for (let i = 0; i < n; i++) {\n        projects.push([capital[i], profits[i]]);\n    }\n    \n    const available = new MaxHeap();\n    let currentCapital = w;\n    \n    for (let i = 0; i < k; i++) {\n        // Add all affordable projects to max heap\n        while (projects.size() > 0 && projects.peek()![0] <= currentCapital) {\n            const [cap, profit] = projects.pop()!;\n            available.push(profit);\n        }\n        \n        // If no projects available, break\n        if (available.size() === 0) {\n            break;\n        }\n        \n        // Take the most profitable project\n        const maxProfit = available.pop()!;\n        currentCapital += maxProfit;\n    }\n    \n    return currentCapital;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int ipo(int k, int w, int[] profits, int[] capital) {\n        \n    }\n}",
      "solution_text": "<p><strong>IPO Greedy Algorithm with Max Heaps:</strong></p><p>Maximize capital by selecting most profitable projects we can afford.</p><p><strong>Algorithm:</strong></p><ol><li>Create min heap of projects sorted by capital requirement</li><li>Create max heap for available projects (sorted by profit)</li><li>For each project we can complete (up to k):</li><li>- Add all affordable projects to max heap</li><li>- Select highest profit project if available</li><li>- Add profit to current capital</li></ol><p><strong>Time Complexity:</strong> O(n log n) - heap operations</p><p><strong>Space Complexity:</strong> O(n) - heap storage</p>",
      "solution_code": "class Solution {\n    public int ipo(int k, int w, int[] profits, int[] capital) {\n        int n = profits.length;\n        \n        // Min heap of projects sorted by capital requirement\n        PriorityQueue<int[]> projects = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        \n        // Add all projects to min heap\n        for (int i = 0; i < n; i++) {\n            projects.offer(new int[]{capital[i], profits[i]});\n        }\n        \n        // Max heap for available projects (sorted by profit)\n        PriorityQueue<Integer> available = new PriorityQueue<>((a, b) -> b - a);\n        \n        int currentCapital = w;\n        \n        for (int i = 0; i < k; i++) {\n            // Add all affordable projects to available heap\n            while (!projects.isEmpty() && projects.peek()[0] <= currentCapital) {\n                int[] project = projects.poll();\n                available.offer(project[1]); // Add profit to max heap\n            }\n            \n            // If no projects available, break\n            if (available.isEmpty()) {\n                break;\n            }\n            \n            // Take the most profitable project\n            int maxProfit = available.poll();\n            currentCapital += maxProfit;\n        }\n        \n        return currentCapital;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "k": 3,
        "w": 0,
        "profits": [1, 4, 2, 3],
        "capital": [0, 3, 1, 1]
      },
      "output": 8
    },
    {
      "id": 2,
      "input": {
        "k": 4,
        "w": 2,
        "profits": [2, 3, 1, 5, 3],
        "capital": [4, 4, 2, 3, 3]
      },
      "output": 14
    },
    {
      "id": 3,
      "input": {
        "k": 1,
        "w": 0,
        "profits": [1, 2, 3],
        "capital": [0, 1, 1]
      },
      "output": 1
    },
    {
      "id": 4,
      "input": {
        "k": 2,
        "w": 0,
        "profits": [1, 2, 3],
        "capital": [0, 1, 1]
      },
      "output": 4
    },
    {
      "id": 5,
      "input": {
        "k": 3,
        "w": 0,
        "profits": [1, 2, 3],
        "capital": [0, 1, 1]
      },
      "output": 6
    },
    {
      "id": 6,
      "input": {
        "k": 10,
        "w": 0,
        "profits": [1, 2, 3],
        "capital": [0, 1, 1]
      },
      "output": 6
    },
    {
      "id": 7,
      "input": {
        "k": 2,
        "w": 1,
        "profits": [1, 2, 3, 4],
        "capital": [0, 1, 2, 3]
      },
      "output": 6
    },
    {
      "id": 8,
      "input": {
        "k": 1,
        "w": 5,
        "profits": [10, 20, 30],
        "capital": [1, 2, 3]
      },
      "output": 35
    },
    {
      "id": 9,
      "input": {
        "k": 0,
        "w": 10,
        "profits": [1, 2, 3],
        "capital": [0, 1, 2]
      },
      "output": 10
    },
    {
      "id": 10,
      "input": {
        "k": 5,
        "w": 100,
        "profits": [50, 40, 30, 20, 10],
        "capital": [10, 20, 30, 40, 50]
      },
      "output": 250
    }
  ]
}