{
  "filename": "baseball-game",
  "title": "Baseball Game",
  "keywords": [
    "baseball",
    "game",
    "leetcode",
    "682",
    "keeping",
    "scores",
    "strange",
    "rules",
    "beginning",
    "start"
  ],
  "description": "<h2>Baseball Game</h2><p>You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.</p><p>Given a list of strings <code>operations</code>, where <code>operations[i]</code> is the <code>i</code>th operation you must apply to the record and is one of the following:</p><ul><li>An integer <code>x</code>: Record a new score of <code>x</code>.</li><li><code>\"+\"</code>: Record a new score that is the sum of the previous two scores.</li><li><code>\"D\"</code>: Record a new score that is the double of the previous score.</li><li><code>\"C\"</code>: Invalidate the previous score, removing it from the record.</li></ul><p>Return the sum of all the scores on the record after applying all the operations.</p><p><strong>Note:</strong> The test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.</p><h3>Examples</h3><ul><li><p><strong>Input:</strong> <code>operations = [\"1\",\"2\",\"+\",\"C\",\"5\",\"D\"]</code><br><strong>Output:</strong> <code>18</code></p><p><strong>Explanation:</strong></p><ul><li><code>\"1\"</code> - Add 1 to the record, record = <code>[1]</code></li><li><code>\"2\"</code> - Add 2 to the record, record = <code>[1, 2]</code></li><li><code>\"+\"</code> - Add <code>1 + 2 = 3</code> to the record, record = <code>[1, 2, 3]</code></li><li><code>\"C\"</code> - Invalidate and remove the previous score, record = <code>[1, 2]</code></li><li><code>\"5\"</code> - Add 5 to the record, record = <code>[1, 2, 5]</code></li><li><code>\"D\"</code> - Add <code>2 × 5 = 10</code> to the record, record = <code>[1, 2, 5, 10]</code></li><li>The total sum is <code>1 + 2 + 5 + 10 = 18</code></li></ul></li><li><p><strong>Input:</strong> <code>operations = [\"5\",\"D\",\"+\",\"C\"]</code><br><strong>Output:</strong> <code>15</code></p><p><strong>Explanation:</strong></p><ul><li><code>\"5\"</code> - Add 5 to the record, record = <code>[5]</code></li><li><code>\"D\"</code> - Add <code>2 × 5 = 10</code> to the record, record = <code>[5, 10]</code></li><li><code>\"+\"</code> - Add <code>5 + 10 = 15</code> to the record, record = <code>[5, 10, 15]</code></li><li><code>\"C\"</code> - Invalidate and remove the previous score, record = <code>[5, 10]</code></li><li>The total sum is <code>5 + 10 = 15</code></li></ul></li></ul><h3>Constraints</h3><ul><li><code>1 <= operations.length <= 1000</code></li><li><code>operations[i]</code> is <code>\"C\"</code>, <code>\"D\"</code>, <code>\"+\"</code>, or a string representing an integer in the range <code>[-30000, 30000]</code></li><li>For operation <code>\"+\"</code>, there will always be at least two previous scores on the record</li><li>For operations <code>\"C\"</code> and <code>\"D\"</code>, there will always be at least one previous score on the record</li></ul>",
  "languages": {
    "python": {
      "template": "def calPoints(operations):\n    ",
      "solution_text": "Baseball game scoring with stack operations:\n\n**Algorithm:**\n1. Use a stack to track valid scores\n2. Process each operation: integer, '+', 'D', 'C'\n3. Handle special operations based on previous scores\n4. Sum all remaining scores in the stack\n\n**Time Complexity:** O(n) - process each operation once\n**Space Complexity:** O(n) - stack storage for scores\n\n**Key Insights:**\n- Stack naturally handles the scoring requirements\n- '+' uses last two scores, 'D' doubles last score\n- 'C' removes the most recent score",
      "solution_code": "def calPoints(operations):\n    stack = []\n    \n    for op in operations:\n        if op == '+' and len(stack) >= 2:\n            # Sum of previous two scores\n            new_score = stack[-1] + stack[-2]\n            stack.append(new_score)\n        elif op == 'D' and stack:\n            # Double the previous score\n            new_score = stack[-1] * 2\n            stack.append(new_score)\n        elif op == 'C' and stack:\n            # Cancel/remove the previous score\n            stack.pop()\n        else:\n            # Integer score\n            try:\n                score = int(op)\n                stack.append(score)\n            except ValueError:\n                pass  # Invalid operation, skip\n    \n    return sum(stack)"
    },
    "javascript": {
      "template": "function calPoints(operations) {\n  \n}",
      "solution_text": "Baseball game scoring with stack operations:\n\n**Algorithm:**\n1. Use a stack to track valid scores\n2. Process each operation: integer, '+', 'D', 'C'\n3. Handle special operations based on previous scores\n4. Sum all remaining scores in the stack\n\n**Time Complexity:** O(n) - process each operation once\n**Space Complexity:** O(n) - stack storage for scores\n\n**Key Insights:**\n- Stack naturally handles the scoring requirements\n- '+' uses last two scores, 'D' doubles last score\n- 'C' removes the most recent score",
      "solution_code": "function calPoints(operations) {\n    const stack = [];\n    \n    for (const op of operations) {\n        if (op === '+' && stack.length >= 2) {\n            // Sum of previous two scores\n            const newScore = stack[stack.length - 1] + stack[stack.length - 2];\n            stack.push(newScore);\n        } else if (op === 'D' && stack.length > 0) {\n            // Double the previous score\n            const newScore = stack[stack.length - 1] * 2;\n            stack.push(newScore);\n        } else if (op === 'C' && stack.length > 0) {\n            // Cancel/remove the previous score\n            stack.pop();\n        } else {\n            // Integer score\n            const score = parseInt(op);\n            if (!isNaN(score)) {\n                stack.push(score);\n            }\n        }\n    }\n    \n    return stack.reduce((sum, score) => sum + score, 0);\n}"
    },
    "typescript": {
      "template": "function calPoints(operations: string[]): number {\n  \n}",
      "solution_text": "Baseball game scoring with stack operations:\n\n**Algorithm:**\n1. Use a stack to track valid scores\n2. Process each operation: integer, '+', 'D', 'C'\n3. Handle special operations based on previous scores\n4. Sum all remaining scores in the stack\n\n**Time Complexity:** O(n) - process each operation once\n**Space Complexity:** O(n) - stack storage for scores\n\n**Key Insights:**\n- Stack naturally handles the scoring requirements\n- '+' uses last two scores, 'D' doubles last score\n- 'C' removes the most recent score",
      "solution_code": "function calPoints(operations: string[]): number {\n    const stack: number[] = [];\n    \n    for (const op of operations) {\n        if (op === '+' && stack.length >= 2) {\n            // Sum of previous two scores\n            const newScore = stack[stack.length - 1] + stack[stack.length - 2];\n            stack.push(newScore);\n        } else if (op === 'D' && stack.length > 0) {\n            // Double the previous score\n            const newScore = stack[stack.length - 1] * 2;\n            stack.push(newScore);\n        } else if (op === 'C' && stack.length > 0) {\n            // Cancel/remove the previous score\n            stack.pop();\n        } else {\n            // Integer score\n            const score = parseInt(op);\n            if (!isNaN(score)) {\n                stack.push(score);\n            }\n        }\n    }\n    \n    return stack.reduce((sum, score) => sum + score, 0);\n}"
    },
    "java": {
      "template": "import java.util.Stack;\n\nclass Solution {\n    public int calPoints(String[] operations) {\n        \n    }\n}",
      "solution_text": "Baseball game scoring with stack operations:\n\n**Algorithm:**\n1. Use a stack to track valid scores\n2. Process each operation: integer, '+', 'D', 'C'\n3. Handle special operations based on previous scores\n4. Sum all remaining scores in the stack\n\n**Time Complexity:** O(n) - process each operation once\n**Space Complexity:** O(n) - stack storage for scores\n\n**Key Insights:**\n- Stack naturally handles the scoring requirements\n- '+' uses last two scores, 'D' doubles last score\n- 'C' removes the most recent score",
      "solution_code": "import java.util.Stack;\n\nclass Solution {\n    public int calPoints(String[] operations) {\n        Stack<Integer> stack = new Stack<>();\n        \n        for (String op : operations) {\n            if (op.equals(\"+\") && stack.size() >= 2) {\n                // Sum of previous two scores\n                int prev1 = stack.get(stack.size() - 1);\n                int prev2 = stack.get(stack.size() - 2);\n                stack.push(prev1 + prev2);\n            } else if (op.equals(\"D\") && !stack.isEmpty()) {\n                // Double the previous score\n                stack.push(stack.peek() * 2);\n            } else if (op.equals(\"C\") && !stack.isEmpty()) {\n                // Cancel/remove the previous score\n                stack.pop();\n            } else {\n                // Integer score\n                try {\n                    int score = Integer.parseInt(op);\n                    stack.push(score);\n                } catch (NumberFormatException e) {\n                    // Invalid operation, skip\n                }\n            }\n        }\n        \n        int sum = 0;\n        for (int score : stack) {\n            sum += score;\n        }\n        return sum;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "operations": [
          "1",
          "2",
          "+",
          "C",
          "5",
          "D"
        ]
      },
      "output": 18
    },
    {
      "id": 2,
      "input": {
        "operations": [
          "5",
          "D",
          "+",
          "C"
        ]
      },
      "output": 15
    },
    {
      "id": 3,
      "input": {
        "operations": [
          "5",
          "-2",
          "4",
          "C",
          "D",
          "9",
          "+",
          "+"
        ]
      },
      "output": 27
    },
    {
      "id": 4,
      "input": {
        "operations": [
          "1"
        ]
      },
      "output": 1
    },
    {
      "id": 5,
      "input": {
        "operations": [
          "10",
          "C"
        ]
      },
      "output": 0
    },
    {
      "id": 6,
      "input": {
        "operations": [
          "0",
          "0",
          "+",
          "+"
        ]
      },
      "output": 0
    },
    {
      "id": 7,
      "input": {
        "operations": [
          "-10",
          "D",
          "+"
        ]
      },
      "output": -30
    },
    {
      "id": 8,
      "input": {
        "operations": [
          "100",
          "D",
          "C",
          "50",
          "+",
          "D"
        ]
      },
      "output": 300
    },
    {
      "id": 9,
      "input": {
        "operations": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "C",
          "C",
          "C",
          "+",
          "+"
        ]
      },
      "output": 6
    },
    {
      "id": 10,
      "input": {
        "operations": [
          "30000",
          "D",
          "C",
          "-30000",
          "D"
        ]
      },
      "output": -60000
    }
  ]
}