{
  "filename": "best-time-to-buy-and-sell-stock-ii",
  "title": "Best Time to Buy and Sell Stock II",
  "keywords": [
    "best",
    "time",
    "buy",
    "sell",
    "stock",
    "leetcode",
    "122",
    "given",
    "integer",
    "array"
  ],
  "description": "<h2>Best Time to Buy and Sell Stock II</h2><p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p><p>On each day, you may decide to buy and/or sell the stock. However, you can buy it then immediately sell it on the <strong>same day</strong>. Also, you are allowed to perform any number of transactions but can hold <strong>at most one</strong> share of the stock at any time.</p><p>Find and return the <strong>maximum</strong> profit you can achieve.</p><h3>Examples</h3><ul><li><strong>Input:</strong> prices = [7,1,5,3,6,4]<br><strong>Output:</strong> 7<br><strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7.</li><li><strong>Input:</strong> prices = [1,2,3,4,5]<br><strong>Output:</strong> 4<br><strong>Explanation:</strong> Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4.</li></ul><h3>Constraints</h3><ul><li><code>1 <= prices.length <= 30,000</code></li><li><code>0 <= prices[i] <= 10,000</code></li></ul>",
  "languages": {
    "python": {
      "template": "def bestTimeToBuyAndSellStockIi(prices):\n    ",
      "solution_text": "Maximum profit with unlimited transactions using greedy approach:\n\n**Algorithm:**\n1. Iterate through consecutive price pairs\n2. Add profit for every positive price difference\n3. This captures all upward price movements\n4. Equivalent to buying before increase, selling before decrease\n\n**Time Complexity:** O(n) - single pass through prices\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Greedy approach: capture every profitable opportunity\n- Can buy and sell on same day if profitable\n- Sum of all positive differences gives maximum profit",
      "solution_code": "def bestTimeToBuyAndSellStockIi(prices):\n    if not prices or len(prices) < 2:\n        return 0\n    \n    max_profit = 0\n    \n    # Add profit for every price increase\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i - 1]:\n            max_profit += prices[i] - prices[i - 1]\n    \n    return max_profit"
    },
    "javascript": {
      "template": "function bestTimeToBuyAndSellStockIi(prices) {\n  \n}",
      "solution_text": "Maximum profit with unlimited transactions using greedy approach:\n\n**Algorithm:**\n1. Iterate through consecutive price pairs\n2. Add profit for every positive price difference\n3. This captures all upward price movements\n4. Equivalent to buying before increase, selling before decrease\n\n**Time Complexity:** O(n) - single pass through prices\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Greedy approach: capture every profitable opportunity\n- Can buy and sell on same day if profitable\n- Sum of all positive differences gives maximum profit",
      "solution_code": "function bestTimeToBuyAndSellStockIi(prices) {\n    if (!prices || prices.length < 2) {\n        return 0;\n    }\n    \n    let maxProfit = 0;\n    \n    // Add profit for every price increase\n    for (let i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            maxProfit += prices[i] - prices[i - 1];\n        }\n    }\n    \n    return maxProfit;\n}"
    },
    "typescript": {
      "template": "function bestTimeToBuyAndSellStockIi(prices: number[]): number {\n  \n}",
      "solution_text": "Maximum profit with unlimited transactions using greedy approach:\n\n**Algorithm:**\n1. Iterate through consecutive price pairs\n2. Add profit for every positive price difference\n3. This captures all upward price movements\n4. Equivalent to buying before increase, selling before decrease\n\n**Time Complexity:** O(n) - single pass through prices\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Greedy approach: capture every profitable opportunity\n- Can buy and sell on same day if profitable\n- Sum of all positive differences gives maximum profit",
      "solution_code": "function bestTimeToBuyAndSellStockIi(prices: number[]): number {\n    if (!prices || prices.length < 2) {\n        return 0;\n    }\n    \n    let maxProfit = 0;\n    \n    // Add profit for every price increase\n    for (let i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            maxProfit += prices[i] - prices[i - 1];\n        }\n    }\n    \n    return maxProfit;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int bestTimeToBuyAndSellStockIi(int[] prices) {\n        \n    }\n}",
      "solution_text": "Maximum profit with unlimited transactions using greedy approach:\n\n**Algorithm:**\n1. Iterate through consecutive price pairs\n2. Add profit for every positive price difference\n3. This captures all upward price movements\n4. Equivalent to buying before increase, selling before decrease\n\n**Time Complexity:** O(n) - single pass through prices\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Greedy approach: capture every profitable opportunity\n- Can buy and sell on same day if profitable\n- Sum of all positive differences gives maximum profit",
      "solution_code": "class Solution {\n    public int bestTimeToBuyAndSellStockIi(int[] prices) {\n        if (prices == null || prices.length < 2) {\n            return 0;\n        }\n        \n        int maxProfit = 0;\n        \n        // Add profit for every price increase\n        for (int i = 1; i < prices.length; i++) {\n            if (prices[i] > prices[i - 1]) {\n                maxProfit += prices[i] - prices[i - 1];\n            }\n        }\n        \n        return maxProfit;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "prices": [7, 1, 5, 3, 6, 4]
      },
      "output": 7
    },
    {
      "id": 2,
      "input": {
        "prices": [1, 2, 3, 4, 5]
      },
      "output": 4
    },
    {
      "id": 3,
      "input": {
        "prices": [7, 6, 4, 3, 1]
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "prices": [1]
      },
      "output": 0
    },
    {
      "id": 5,
      "input": {
        "prices": [1, 2]
      },
      "output": 1
    },
    {
      "id": 6,
      "input": {
        "prices": [2, 1]
      },
      "output": 0
    },
    {
      "id": 7,
      "input": {
        "prices": [3, 3, 3, 3]
      },
      "output": 0
    },
    {
      "id": 8,
      "input": {
        "prices": [1, 2, 1, 2, 1, 2]
      },
      "output": 3
    },
    {
      "id": 9,
      "input": {
        "prices": [2, 4, 1, 0, 3, 2, 1]
      },
      "output": 5
    },
    {
      "id": 10,
      "input": {
        "prices": [10000, 9999, 9998, 9997, 9996]
      },
      "output": 0
    },
    {
      "id": 11,
      "input": {
        "prices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10000]
      },
      "output": 10000
    },
    {
      "id": 12,
      "input": {
        "prices": [5, 1, 3, 2, 6, 4, 8, 7, 9]
      },
      "output": 10
    }
  ]
}