{
  "filename": "binary-tree-preorder-traversal",
  "title": "Binary Tree Preorder Traversal",
  "keywords": [
    "binary",
    "tree",
    "preorder",
    "traversal",
    "leetcode",
    "144",
    "given",
    "root",
    "return",
    "its"
  ],
  "description": "<h2>Binary Tree Preorder Traversal</h2><p>Leetcode 144. Binary Tree Preorder Traversal</p><p></p><p>You are given the `root` of a binary tree, return the **preorder traversal** of its nodes' values.</p><h3>Examples:</h3><ul><li>Input: root = []<br><br>Output: []</li></ul><h3>Constraints:</h3><ul><li> `0 <= number of nodes in the tree <= 100`</li><li> `-100 <= Node.val <= 100`</li></ul>",
  "languages": {
    "python": {
      "template": "def binaryTreePreorderTraversal(root):\n    ",
      "solution_text": "<h3>Binary Tree Preorder Traversal</h3><p><strong>Algorithm:</strong></p><ol><li>Process current node (add to result)</li><li>Traverse left subtree recursively</li><li>Traverse right subtree recursively</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth, where h is tree height</p><p><strong>Key Insights:</strong></p><ul><li>Preorder: Root -> Left -> Right</li><li>Node is processed before its subtrees</li><li>Useful for creating copy of tree or prefix expressions</li></ul>",
      "solution_code": "def binaryTreePreorderTraversal(root):\n    result = []\n    \n    def preorder(node):\n        if not node:\n            return\n        \n        result.append(node.val)  # Process current node\n        preorder(node.left)      # Traverse left subtree\n        preorder(node.right)     # Traverse right subtree\n    \n    preorder(root)\n    return result"
    },
    "javascript": {
      "template": "function binaryTreePreorderTraversal(root) {\n  \n}",
      "solution_text": "<h3>Binary Tree Preorder Traversal</h3><p><strong>Algorithm:</strong></p><ol><li>Process current node (add to result)</li><li>Traverse left subtree recursively</li><li>Traverse right subtree recursively</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth, where h is tree height</p><p><strong>Key Insights:</strong></p><ul><li>Preorder: Root -> Left -> Right</li><li>Node is processed before its subtrees</li><li>Useful for creating copy of tree or prefix expressions</li></ul>",
      "solution_code": "function binaryTreePreorderTraversal(root) {\n    const result = [];\n    \n    function preorder(node) {\n        if (!node) return;\n        \n        result.push(node.val);   // Process current node\n        preorder(node.left);     // Traverse left subtree\n        preorder(node.right);    // Traverse right subtree\n    }\n    \n    preorder(root);\n    return result;\n}"
    },
    "typescript": {
      "template": "function binaryTreePreorderTraversal(root: TreeNode | null): number[] {\n  \n}",
      "solution_text": "<h3>Binary Tree Preorder Traversal</h3><p><strong>Algorithm:</strong></p><ol><li>Process current node (add to result)</li><li>Traverse left subtree recursively</li><li>Traverse right subtree recursively</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth, where h is tree height</p><p><strong>Key Insights:</strong></p><ul><li>Preorder: Root -> Left -> Right</li><li>Node is processed before its subtrees</li><li>Useful for creating copy of tree or prefix expressions</li></ul>",
      "solution_code": "function binaryTreePreorderTraversal(root: TreeNode | null): number[] {\n    const result: number[] = [];\n    \n    function preorder(node: TreeNode | null): void {\n        if (!node) return;\n        \n        result.push(node.val);   // Process current node\n        preorder(node.left);     // Traverse left subtree\n        preorder(node.right);    // Traverse right subtree\n    }\n    \n    preorder(root);\n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public List<Integer> binaryTreePreorderTraversal(TreeNode root) {\n        \n    }\n}",
      "solution_text": "<h3>Binary Tree Preorder Traversal</h3><p><strong>Algorithm:</strong></p><ol><li>Process current node (add to result)</li><li>Traverse left subtree recursively</li><li>Traverse right subtree recursively</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth, where h is tree height</p><p><strong>Key Insights:</strong></p><ul><li>Preorder: Root -> Left -> Right</li><li>Node is processed before its subtrees</li><li>Useful for creating copy of tree or prefix expressions</li></ul>",
      "solution_code": "class Solution {\n    public List<Integer> binaryTreePreorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        preorder(root, result);\n        return result;\n    }\n    \n    private void preorder(TreeNode node, List<Integer> result) {\n        if (node == null) return;\n        \n        result.add(node.val);           // Process current node\n        preorder(node.left, result);    // Traverse left subtree\n        preorder(node.right, result);   // Traverse right subtree\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "root": []
      },
      "output": []
    },
    {
      "id": 2,
      "input": {
        "root": [1, null, 2, 3]
      },
      "output": [1, 2, 3]
    },
    {
      "id": 3,
      "input": {
        "root": [1, 2, 3, 4, 5, null, 6]
      },
      "output": [1, 2, 4, 5, 3, 6]
    },
    {
      "id": 4,
      "input": {
        "root": [1]
      },
      "output": [1]
    },
    {
      "id": 5,
      "input": {
        "root": [1, 2]
      },
      "output": [1, 2]
    },
    {
      "id": 6,
      "input": {
        "root": [1, null, 2]
      },
      "output": [1, 2]
    },
    {
      "id": 7,
      "input": {
        "root": [5, 3, 7, 2, 4, 6, 8]
      },
      "output": [5, 3, 2, 4, 7, 6, 8]
    },
    {
      "id": 8,
      "input": {
        "root": [3, 1, 5, null, 2, 4, 6]
      },
      "output": [3, 1, 2, 5, 4, 6]
    },
    {
      "id": 9,
      "input": {
        "root": [10, 5, 15, null, null, 12, 20]
      },
      "output": [10, 5, 15, 12, 20]
    },
    {
      "id": 10,
      "input": {
        "root": [8, 3, 10, 1, 6, null, 14, null, null, 4, 7, 13]
      },
      "output": [8, 3, 1, 6, 4, 7, 10, 14, 13]
    }
  ]
}