{
  "filename": "bitwise-and-of-numbers-range",
  "title": "Bitwise AND of Numbers Range",
  "keywords": [
    "bitwise",
    "numbers",
    "range",
    "leetcode",
    "201",
    "given",
    "two",
    "integers",
    "left",
    "right"
  ],
  "description": "<h2>Bitwise AND of Numbers Range</h2><p>Given two integers <code>left</code> and <code>right</code> that represent the range <code>[left, right]</code>, return the bitwise AND of all numbers in this range, inclusive.</p><h3>Examples</h3><p><strong>Example 1:</strong></p><ul><li><strong>Input:</strong> left = 5, right = 7</li><li><strong>Output:</strong> 4</li><li><strong>Explanation:</strong> 5 (101) AND 6 (110) AND 7 (111) = 4 (100)</li></ul><p><strong>Example 2:</strong></p><ul><li><strong>Input:</strong> left = 0, right = 0</li><li><strong>Output:</strong> 0</li></ul><p><strong>Example 3:</strong></p><ul><li><strong>Input:</strong> left = 1, right = 2147483647</li><li><strong>Output:</strong> 0</li></ul><h3>Constraints</h3><ul><li><code>0 <= left <= right <= 2^31 - 1</code></li></ul>",
  "languages": {
    "python": {
      "template": "def bitwiseAndOfNumbersRange(left, right):\n    ",
      "solution_text": "<h3>Bitwise AND of Numbers Range</h3><p><strong>Algorithm:</strong></p><ol><li>Find the common prefix of binary representations of left and right</li><li>When bits differ, all following bits will become 0 due to AND operation</li><li>Shift both numbers right until they become equal</li><li>Shift the result back left by the same amount</li></ol><p><strong>Time Complexity:</strong> O(log n) - where n is the larger number</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Consecutive numbers will have different bits at some position</li><li>AND of any range containing both 0 and 1 at a bit position results in 0</li><li>Only the common prefix bits remain as 1</li></ul>",
      "solution_code": "def bitwiseAndOfNumbersRange(left, right):\n    shift = 0\n    \n    # Find the common prefix of left and right\n    while left != right:\n        left >>= 1\n        right >>= 1\n        shift += 1\n    \n    # Shift back to get the result\n    return left << shift"
    },
    "javascript": {
      "template": "function bitwiseAndOfNumbersRange(left, right) {\n  \n}",
      "solution_text": "<h3>Bitwise AND of Numbers Range</h3><p><strong>Algorithm:</strong></p><ol><li>Find the common prefix of binary representations of left and right</li><li>When bits differ, all following bits will become 0 due to AND operation</li><li>Shift both numbers right until they become equal</li><li>Shift the result back left by the same amount</li></ol><p><strong>Time Complexity:</strong> O(log n) - where n is the larger number</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Consecutive numbers will have different bits at some position</li><li>AND of any range containing both 0 and 1 at a bit position results in 0</li><li>Only the common prefix bits remain as 1</li></ul>",
      "solution_code": "function bitwiseAndOfNumbersRange(left, right) {\n    let shift = 0;\n    \n    // Find the common prefix of left and right\n    while (left !== right) {\n        left >>= 1;\n        right >>= 1;\n        shift++;\n    }\n    \n    // Shift back to get the result\n    return left << shift;\n}"
    },
    "typescript": {
      "template": "function bitwiseAndOfNumbersRange(left: number, right: number): number {\n  \n}",
      "solution_text": "<h3>Bitwise AND of Numbers Range</h3><p><strong>Algorithm:</strong></p><ol><li>Find the common prefix of binary representations of left and right</li><li>When bits differ, all following bits will become 0 due to AND operation</li><li>Shift both numbers right until they become equal</li><li>Shift the result back left by the same amount</li></ol><p><strong>Time Complexity:</strong> O(log n) - where n is the larger number</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Consecutive numbers will have different bits at some position</li><li>AND of any range containing both 0 and 1 at a bit position results in 0</li><li>Only the common prefix bits remain as 1</li></ul>",
      "solution_code": "function bitwiseAndOfNumbersRange(left: number, right: number): number {\n    let shift = 0;\n    \n    // Find the common prefix of left and right\n    while (left !== right) {\n        left >>= 1;\n        right >>= 1;\n        shift++;\n    }\n    \n    // Shift back to get the result\n    return left << shift;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int bitwiseAndOfNumbersRange(int left, int right) {\n        \n    }\n}",
      "solution_text": "<h3>Bitwise AND of Numbers Range</h3><p><strong>Algorithm:</strong></p><ol><li>Find the common prefix of binary representations of left and right</li><li>When bits differ, all following bits will become 0 due to AND operation</li><li>Shift both numbers right until they become equal</li><li>Shift the result back left by the same amount</li></ol><p><strong>Time Complexity:</strong> O(log n) - where n is the larger number</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Consecutive numbers will have different bits at some position</li><li>AND of any range containing both 0 and 1 at a bit position results in 0</li><li>Only the common prefix bits remain as 1</li></ul>",
      "solution_code": "class Solution {\n    public int bitwiseAndOfNumbersRange(int left, int right) {\n        int shift = 0;\n        \n        // Find the common prefix of left and right\n        while (left != right) {\n            left >>= 1;\n            right >>= 1;\n            shift++;\n        }\n        \n        // Shift back to get the result\n        return left << shift;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "left": 5,
        "right": 7
      },
      "output": 4
    },
    {
      "id": 2,
      "input": {
        "left": 0,
        "right": 0
      },
      "output": 0
    },
    {
      "id": 3,
      "input": {
        "left": 1,
        "right": 2147483647
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "left": 1,
        "right": 5
      },
      "output": 0
    },
    {
      "id": 5,
      "input": {
        "left": 26,
        "right": 30
      },
      "output": 24
    },
    {
      "id": 6,
      "input": {
        "left": 10,
        "right": 12
      },
      "output": 8
    },
    {
      "id": 7,
      "input": {
        "left": 15,
        "right": 15
      },
      "output": 15
    },
    {
      "id": 8,
      "input": {
        "left": 100,
        "right": 110
      },
      "output": 96
    },
    {
      "id": 9,
      "input": {
        "left": 1000,
        "right": 1023
      },
      "output": 1000
    },
    {
      "id": 10,
      "input": {
        "left": 2,
        "right": 3
      },
      "output": 2
    },
    {
      "id": 11,
      "input": {
        "left": 8,
        "right": 15
      },
      "output": 8
    },
    {
      "id": 12,
      "input": {
        "left": 2147483646,
        "right": 2147483647
      },
      "output": 2147483646
    }
  ]
}