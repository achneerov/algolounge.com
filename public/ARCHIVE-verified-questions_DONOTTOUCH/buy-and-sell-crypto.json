{
  "filename": "buy-and-sell-crypto",
  "title": "Best Time to Buy and Sell Stock",
  "keywords": [
    "best",
    "time",
    "buy",
    "sell",
    "stock",
    "leetcode",
    "121",
    "given",
    "integer",
    "array"
  ],
  "description": "<h2>Best Time to Buy and Sell Stock</h2><p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of NeetCoin on the <code>ith</code> day.</p><p>You may choose a <strong>single day</strong> to buy one NeetCoin and choose a <strong>different day in the future</strong> to sell it.</p><p>Return the maximum profit you can achieve. You may choose to <strong>not make any transactions</strong>, in which case the profit would be <code>0</code>.</p><h3>Examples</h3><ul><li><strong>Input:</strong> <code>prices = [10,1,5,6,7,1]</code><br><strong>Output:</strong> <code>6</code><br><strong>Explanation:</strong> Buy at <code>prices[1] = 1</code> and sell at <code>prices[4] = 7</code>, profit = <code>7 - 1 = 6</code>.</li><li><strong>Input:</strong> <code>prices = [10,8,7,5,2]</code><br><strong>Output:</strong> <code>0</code><br><strong>Explanation:</strong> No profitable transactions can be made, thus the max profit is <code>0</code>.</li></ul><h3>Constraints</h3><ul><li><code>1 <= prices.length <= 100000</code></li><li><code>0 <= prices[i] <= 10000</code></li></ul>",
  "languages": {
    "python": {
      "template": "def bestTimeToBuyAndSellStock(prices):\n    ",
      "solution_text": "<p><strong>Optimal solution for Buy and Sell Stock problem:</strong></p><p><strong>Algorithm:</strong></p><ol><li>Track minimum price seen so far</li><li>For each price, calculate profit if sold today</li><li>Update maximum profit if current profit is higher</li><li>Update minimum price if current price is lower</li></ol><p><strong>Time Complexity:</strong> O(n) - single pass through prices</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Buy at lowest price before current day</li><li>Sell at current day for maximum profit</li><li>One pass solution with two variables</li></ul>",
      "solution_code": "def bestTimeToBuyAndSellStock(prices):\n    if not prices or len(prices) < 2:\n        return 0\n    \n    min_price = prices[0]\n    max_profit = 0\n    \n    for price in prices[1:]:\n        # Calculate profit if we sell today\n        profit = price - min_price\n        max_profit = max(max_profit, profit)\n        \n        # Update minimum price seen so far\n        min_price = min(min_price, price)\n    \n    return max_profit"
    },
    "javascript": {
      "template": "function bestTimeToBuyAndSellStock(prices) {\n  \n}",
      "solution_text": "<p><strong>Optimal solution for Buy and Sell Stock problem:</strong></p><p><strong>Algorithm:</strong></p><ol><li>Track minimum price seen so far</li><li>For each price, calculate profit if sold today</li><li>Update maximum profit if current profit is higher</li><li>Update minimum price if current price is lower</li></ol><p><strong>Time Complexity:</strong> O(n) - single pass through prices</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Buy at lowest price before current day</li><li>Sell at current day for maximum profit</li><li>One pass solution with two variables</li></ul>",
      "solution_code": "function bestTimeToBuyAndSellStock(prices) {\n    if (!prices || prices.length < 2) return 0;\n    \n    let minPrice = prices[0];\n    let maxProfit = 0;\n    \n    for (let i = 1; i < prices.length; i++) {\n        // Calculate profit if we sell today\n        const profit = prices[i] - minPrice;\n        maxProfit = Math.max(maxProfit, profit);\n        \n        // Update minimum price seen so far\n        minPrice = Math.min(minPrice, prices[i]);\n    }\n    \n    return maxProfit;\n}"
    },
    "typescript": {
      "template": "function bestTimeToBuyAndSellStock(prices: number[]): number {\n  \n}",
      "solution_text": "<p><strong>Optimal solution for Buy and Sell Stock problem:</strong></p><p><strong>Algorithm:</strong></p><ol><li>Track minimum price seen so far</li><li>For each price, calculate profit if sold today</li><li>Update maximum profit if current profit is higher</li><li>Update minimum price if current price is lower</li></ol><p><strong>Time Complexity:</strong> O(n) - single pass through prices</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Buy at lowest price before current day</li><li>Sell at current day for maximum profit</li><li>One pass solution with two variables</li></ul>",
      "solution_code": "function bestTimeToBuyAndSellStock(prices: number[]): number {\n    if (!prices || prices.length < 2) return 0;\n    \n    let minPrice = prices[0];\n    let maxProfit = 0;\n    \n    for (let i = 1; i < prices.length; i++) {\n        // Calculate profit if we sell today\n        const profit = prices[i] - minPrice;\n        maxProfit = Math.max(maxProfit, profit);\n        \n        // Update minimum price seen so far\n        minPrice = Math.min(minPrice, prices[i]);\n    }\n    \n    return maxProfit;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int bestTimeToBuyAndSellStock(int[] prices) {\n        \n    }\n}",
      "solution_text": "<p><strong>Optimal solution for Buy and Sell Stock problem:</strong></p><p><strong>Algorithm:</strong></p><ol><li>Track minimum price seen so far</li><li>For each price, calculate profit if sold today</li><li>Update maximum profit if current profit is higher</li><li>Update minimum price if current price is lower</li></ol><p><strong>Time Complexity:</strong> O(n) - single pass through prices</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Buy at lowest price before current day</li><li>Sell at current day for maximum profit</li><li>One pass solution with two variables</li></ul>",
      "solution_code": "class Solution {\n    public int bestTimeToBuyAndSellStock(int[] prices) {\n        if (prices == null || prices.length < 2) return 0;\n        \n        int minPrice = prices[0];\n        int maxProfit = 0;\n        \n        for (int i = 1; i < prices.length; i++) {\n            // Calculate profit if we sell today\n            int profit = prices[i] - minPrice;\n            maxProfit = Math.max(maxProfit, profit);\n            \n            // Update minimum price seen so far\n            minPrice = Math.min(minPrice, prices[i]);\n        }\n        \n        return maxProfit;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "prices": [10, 1, 5, 6, 7, 1]
      },
      "output": 6
    },
    {
      "id": 2,
      "input": {
        "prices": [10, 8, 7, 5, 2]
      },
      "output": 0
    },
    {
      "id": 3,
      "input": {
        "prices": [1]
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "prices": [1, 2]
      },
      "output": 1
    },
    {
      "id": 5,
      "input": {
        "prices": [2, 1]
      },
      "output": 0
    },
    {
      "id": 6,
      "input": {
        "prices": [7, 1, 5, 3, 6, 4]
      },
      "output": 5
    },
    {
      "id": 7,
      "input": {
        "prices": [1, 2, 3, 4, 5]
      },
      "output": 4
    },
    {
      "id": 8,
      "input": {
        "prices": [5, 4, 3, 2, 1]
      },
      "output": 0
    },
    {
      "id": 9,
      "input": {
        "prices": [3, 3, 5, 0, 0, 3, 1, 4]
      },
      "output": 4
    },
    {
      "id": 10,
      "input": {
        "prices": [1, 4, 2, 5, 7, 2, 4, 9, 0, 9]
      },
      "output": 9
    },
    {
      "id": 11,
      "input": {
        "prices": [6, 1, 3, 2, 4, 7]
      },
      "output": 6
    },
    {
      "id": 12,
      "input": {
        "prices": [0, 1, 0, 1, 0, 1]
      },
      "output": 1
    }
  ]
}