{
  "filename": "max-water-container",
  "title": "Container With Most Water",
  "keywords": [
    "container",
    "most",
    "water",
    "leetcode",
    "11",
    "two",
    "pointers",
    "array",
    "area"
  ],
  "description": "<h2>Container With Most Water</h2><p>Leetcode 11. Container With Most Water</p><p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>ith</code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p><p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p><p>Return <em>the maximum amount of water a container can store</em>.</p><p><strong>Notice</strong> that you may not slant the container.</p><h3>Examples:</h3><ul><li><strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]<br><strong>Output:</strong> 49<br><strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</li><li><strong>Input:</strong> height = [1,1]<br><strong>Output:</strong> 1<br><strong>Explanation:</strong> The two lines are at positions 0 and 1 with heights 1 and 1, forming a container with area 1.</li></ul><h3>Constraints:</h3><ul><li><code>n == height.length</code></li><li><code>2 <= n <= 10<sup>5</sup></code></li><li><code>0 <= height[i] <= 10<sup>4</sup></code></li></ul>",
  "languages": {
    "python": {
      "template": "def containerWithMostWater(height):\n    ",
      "solution_text": "<h3>Two Pointers Solution for Container With Most Water</h3><p>Use two pointers approach to find the maximum area between lines efficiently.</p><h4>Algorithm:</h4><ol><li>Initialize left pointer at start and right pointer at end</li><li>Calculate area with current pointers</li><li>Move the pointer with smaller height inward</li><li>Keep track of maximum area found</li></ol><h4>Time Complexity:</h4><p>O(n) - single pass through array</p><h4>Space Complexity:</h4><p>O(1) - only using two pointers</p><h4>Key Insights:</h4><ul><li>Moving shorter line gives potential for larger area</li><li>Two pointers converge to optimal solution</li><li>Area = width × min(height[left], height[right])</li></ul>",
      "solution_code": "def containerWithMostWater(height):\n    left, right = 0, len(height) - 1\n    max_area = 0\n    \n    while left < right:\n        # Calculate area with current pointers\n        width = right - left\n        area = width * min(height[left], height[right])\n        max_area = max(max_area, area)\n        \n        # Move pointer with smaller height\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_area"
    },
    "javascript": {
      "template": "function containerWithMostWater(height) {\n  \n}",
      "solution_text": "<h3>Two Pointers Solution for Container With Most Water</h3><p>Use two pointers approach to find the maximum area between lines efficiently.</p><h4>Algorithm:</h4><ol><li>Initialize left pointer at start and right pointer at end</li><li>Calculate area with current pointers</li><li>Move the pointer with smaller height inward</li><li>Keep track of maximum area found</li></ol><h4>Time Complexity:</h4><p>O(n) - single pass through array</p><h4>Space Complexity:</h4><p>O(1) - only using two pointers</p><h4>Key Insights:</h4><ul><li>Moving shorter line gives potential for larger area</li><li>Two pointers converge to optimal solution</li><li>Area = width × min(height[left], height[right])</li></ul>",
      "solution_code": "function containerWithMostWater(height) {\n    let left = 0, right = height.length - 1;\n    let maxArea = 0;\n    \n    while (left < right) {\n        // Calculate area with current pointers\n        const width = right - left;\n        const area = width * Math.min(height[left], height[right]);\n        maxArea = Math.max(maxArea, area);\n        \n        // Move pointer with smaller height\n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    \n    return maxArea;\n}"
    },
    "typescript": {
      "template": "function containerWithMostWater(height: number[]): number {\n  \n}",
      "solution_text": "<h3>Two Pointers Solution for Container With Most Water</h3><p>Use two pointers approach to find the maximum area between lines efficiently.</p><h4>Algorithm:</h4><ol><li>Initialize left pointer at start and right pointer at end</li><li>Calculate area with current pointers</li><li>Move the pointer with smaller height inward</li><li>Keep track of maximum area found</li></ol><h4>Time Complexity:</h4><p>O(n) - single pass through array</p><h4>Space Complexity:</h4><p>O(1) - only using two pointers</p><h4>Key Insights:</h4><ul><li>Moving shorter line gives potential for larger area</li><li>Two pointers converge to optimal solution</li><li>Area = width × min(height[left], height[right])</li></ul>",
      "solution_code": "function containerWithMostWater(height: number[]): number {\n    let left = 0, right = height.length - 1;\n    let maxArea = 0;\n    \n    while (left < right) {\n        // Calculate area with current pointers\n        const width = right - left;\n        const area = width * Math.min(height[left], height[right]);\n        maxArea = Math.max(maxArea, area);\n        \n        // Move pointer with smaller height\n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    \n    return maxArea;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int containerWithMostWater(int[] height) {\n        \n    }\n}",
      "solution_text": "<h3>Two Pointers Solution for Container With Most Water</h3><p>Use two pointers approach to find the maximum area between lines efficiently.</p><h4>Algorithm:</h4><ol><li>Initialize left pointer at start and right pointer at end</li><li>Calculate area with current pointers</li><li>Move the pointer with smaller height inward</li><li>Keep track of maximum area found</li></ol><h4>Time Complexity:</h4><p>O(n) - single pass through array</p><h4>Space Complexity:</h4><p>O(1) - only using two pointers</p><h4>Key Insights:</h4><ul><li>Moving shorter line gives potential for larger area</li><li>Two pointers converge to optimal solution</li><li>Area = width × min(height[left], height[right])</li></ul>",
      "solution_code": "class Solution {\n    public int containerWithMostWater(int[] height) {\n        int left = 0, right = height.length - 1;\n        int maxArea = 0;\n        \n        while (left < right) {\n            // Calculate area with current pointers\n            int width = right - left;\n            int area = width * Math.min(height[left], height[right]);\n            maxArea = Math.max(maxArea, area);\n            \n            // Move pointer with smaller height\n            if (height[left] < height[right]) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        \n        return maxArea;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "height": [1,8,6,2,5,4,8,3,7]
      },
      "output": 49
    },
    {
      "id": 2,
      "input": {
        "height": [1,1]
      },
      "output": 1
    },
    {
      "id": 3,
      "input": {
        "height": [4,3,2,1,4]
      },
      "output": 16
    },
    {
      "id": 4,
      "input": {
        "height": [1,2,1]
      },
      "output": 2
    },
    {
      "id": 5,
      "input": {
        "height": [2,1]
      },
      "output": 1
    },
    {
      "id": 6,
      "input": {
        "height": [1,3,2,5,25,24,5]
      },
      "output": 24
    },
    {
      "id": 7,
      "input": {
        "height": [5,5,5,5]
      },
      "output": 15
    },
    {
      "id": 8,
      "input": {
        "height": [1,0,0,0,0,0,0,2,2]
      },
      "output": 8
    },
    {
      "id": 9,
      "input": {
        "height": [10,9,8,7,6,5,4,3,2,1]
      },
      "output": 25
    },
    {
      "id": 10,
      "input": {
        "height": [2,3,4,5,18,17,6]
      },
      "output": 17
    }
  ]
}