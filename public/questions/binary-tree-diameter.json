{
  "filename": "binary-tree-diameter",
  "title": "Diameter of Binary Tree",
  "keywords": [
    "diameter",
    "binary",
    "tree",
    "leetcode",
    "543",
    "defined",
    "length",
    "longest",
    "path",
    "between"
  ],
  "description": "<h2>Diameter of Binary Tree</h2><p>LeetCode 543. Diameter of Binary Tree</p><p>The <strong>diameter</strong> of a binary tree is defined as the <strong>length</strong> of the longest path between <em>any two nodes within the tree</em>. The path does not necessarily have to pass through the root.</p><p>The <strong>length</strong> of a path between two nodes in a binary tree is the number of edges between the nodes. Note that the path cannot include the same node twice.</p><p>Given the root of a binary tree <code>root</code>, return the <strong>diameter</strong> of the tree.</p><h3>Examples:</h3><ul><li><strong>Input:</strong> <code>root = [1,2,3]</code><br><strong>Output:</strong> <code>2</code><br><strong>Explanation:</strong> The longest path is [2,1,3] with length 2.</li><li><strong>Input:</strong> <code>root = [1,2]</code><br><strong>Output:</strong> <code>1</code><br><strong>Explanation:</strong> The longest path is [2,1] with length 1.</li></ul><h3>Constraints:</h3><ul><li><code>1 <= number of nodes in the tree <= 100</code></li><li><code>-100 <= Node.val <= 100</code></li></ul>",
  "entry_function": "diameterOfBinaryTree",
  "template": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef diameterOfBinaryTree(root):\n    ",
  "solution_text": "<h3>Diameter of Binary Tree</h3><p><strong>Algorithm:</strong></p><ol><li>Use DFS to calculate depth of each subtree</li><li>For each node, diameter through it = left_depth + right_depth</li><li>Track maximum diameter seen across all nodes</li><li>Return depth + 1 for parent nodes</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth</p><p><strong>Key Insights:</strong></p><ul><li>Diameter may or may not pass through root</li><li>Combine depth calculation with diameter tracking</li><li>Path length is number of edges, not nodes</li></ul>",
  "solution_code": "def diameterOfBinaryTree(root):\n    max_diameter = 0\n    \n    def depth(node):\n        nonlocal max_diameter\n        \n        if not node:\n            return 0\n        \n        # Get depth of left and right subtrees\n        left_depth = depth(node.left)\n        right_depth = depth(node.right)\n        \n        # Update maximum diameter (path through current node)\n        current_diameter = left_depth + right_depth\n        max_diameter = max(max_diameter, current_diameter)\n        \n        # Return depth of current subtree\n        return max(left_depth, right_depth) + 1\n    \n    depth(root)\n    return max_diameter",
  "prepare": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef prepare(test_case_input):\n    def build_tree(arr):\n        if not arr:\n            return None\n        \n        root = TreeNode(arr[0])\n        queue = [root]\n        i = 1\n        \n        while queue and i < len(arr):\n            node = queue.pop(0)\n            \n            if i < len(arr) and arr[i] is not None:\n                node.left = TreeNode(arr[i])\n                queue.append(node.left)\n            i += 1\n            \n            if i < len(arr) and arr[i] is not None:\n                node.right = TreeNode(arr[i])\n                queue.append(node.right)\n            i += 1\n        \n        return root\n    \n    root = build_tree(test_case_input['root'])\n    return (root,)",
  "verify": "def verify(actual_output, expected_output):\n    passed = actual_output == expected_output\n    output_str = str(actual_output)\n    return [passed, output_str]",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "root": [
          1,
          2,
          3
        ]
      },
      "output": 2
    },
    {
      "id": 2,
      "input": {
        "root": [
          1,
          2
        ]
      },
      "output": 1
    },
    {
      "id": 3,
      "input": {
        "root": [
          1
        ]
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "root": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "output": 3
    },
    {
      "id": 5,
      "input": {
        "root": [
          1,
          2,
          null,
          4,
          null,
          5
        ]
      },
      "output": 3
    },
    {
      "id": 6,
      "input": {
        "root": [
          1,
          null,
          2,
          null,
          3,
          null,
          4
        ]
      },
      "output": 3
    },
    {
      "id": 7,
      "input": {
        "root": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "output": 4
    },
    {
      "id": 8,
      "input": {
        "root": [
          -10,
          9,
          20,
          null,
          null,
          15,
          7
        ]
      },
      "output": 3
    },
    {
      "id": 9,
      "input": {
        "root": [
          1,
          2,
          3,
          4,
          5,
          null,
          null,
          6,
          7
        ]
      },
      "output": 4
    },
    {
      "id": 10,
      "input": {
        "root": [
          4,
          -7,
          -3,
          null,
          null,
          -9,
          -3,
          9,
          -7,
          -4,
          null,
          6,
          null,
          -6,
          -6,
          null,
          null,
          0,
          6,
          5,
          null,
          9,
          null,
          null,
          -1,
          -4,
          null,
          null,
          null,
          -2
        ]
      },
      "output": 8
    }
  ]
}