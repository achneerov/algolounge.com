{
  "filename": "binary-tree-inorder-traversal",
  "title": "Binary Tree Inorder Traversal",
  "keywords": [
    "binary",
    "tree",
    "inorder",
    "traversal",
    "leetcode",
    "given",
    "root",
    "return",
    "its",
    "nodes"
  ],
  "description": "<h2>Binary Tree Inorder Traversal</h2><p>Leetcode 94. Binary Tree Inorder Traversal</p><p></p><p>You are given the `root` of a binary tree, return the **inorder traversal** of its nodes' values.</p><h3>Examples:</h3><ul><li>Input: root = []<br><br>Output: []</li></ul><h3>Constraints:</h3><ul><li> `0 <= number of nodes in the tree <= 100`</li><li> `-100 <= Node.val <= 100`</li></ul>",
  "entry_function": "binaryTreeInorderTraversal",
  "template": "def binaryTreeInorderTraversal(root):\n    ",
  "solution_text": "<h3>Binary Tree Inorder Traversal</h3><p><strong>Algorithm:</strong></p><ol><li>Traverse left subtree recursively</li><li>Process current node (add to result)</li><li>Traverse right subtree recursively</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth, where h is tree height</p><p><strong>Key Insights:</strong></p><ul><li>Inorder: Left -> Root -> Right</li><li>For BST, inorder gives sorted sequence</li><li>Can be implemented iteratively using stack</li></ul>",
  "solution_code": "def binaryTreeInorderTraversal(root):\n    result = []\n    \n    def inorder(node):\n        if not node:\n            return\n        \n        inorder(node.left)   # Traverse left subtree\n        result.append(node.val)  # Process current node\n        inorder(node.right)  # Traverse right subtree\n    \n    inorder(root)\n    return result",

  "prepare": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n    \n    def __repr__(self):\n        return f'TreeNode({self.val})'\n\ndef prepare(test_case_input):\n    \"\"\"Convert array representation to TreeNode structure\"\"\"\n    root_array = test_case_input['root']\n    if not root_array or root_array[0] is None:\n        return (None,)\n\n    def build_tree(arr):\n        from collections import deque\n        \n        root = TreeNode(arr[0])\n        queue = deque([root])\n        i = 1\n        \n        while queue and i < len(arr):\n            node = queue.popleft()\n            \n            # Add left child\n            if i < len(arr):\n                if arr[i] is not None:\n                    node.left = TreeNode(arr[i])\n                    queue.append(node.left)\n                i += 1\n            \n            # Add right child\n            if i < len(arr):\n                if arr[i] is not None:\n                    node.right = TreeNode(arr[i])\n                    queue.append(node.right)\n                i += 1\n        \n        return root\n\n    return (build_tree(root_array),)",

  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the inorder traversal result\"\"\"\n    def list_to_string(lst):\n        if not lst:\n            return '[]'\n        return '[' + ', '.join(str(x) for x in lst) + ']'\n    \n    passed = actual_output == expected_output\n    output_str = list_to_string(actual_output)\n    \n    return [passed, output_str]",

  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "root": []
      },
      "output": []
    },
    {
      "id": 2,
      "input": {
        "root": [1, null, 2, 3]
      },
      "output": [1, 3, 2]
    },
    {
      "id": 3,
      "input": {
        "root": [1, 2, 3, 4, 5, null, 6]
      },
      "output": [4, 2, 5, 1, 3, 6]
    },
    {
      "id": 4,
      "input": {
        "root": [1]
      },
      "output": [1]
    },
    {
      "id": 5,
      "input": {
        "root": [1, 2]
      },
      "output": [2, 1]
    },
    {
      "id": 6,
      "input": {
        "root": [1, null, 2]
      },
      "output": [1, 2]
    },
    {
      "id": 7,
      "input": {
        "root": [5, 3, 7, 2, 4, 6, 8]
      },
      "output": [2, 3, 4, 5, 6, 7, 8]
    },
    {
      "id": 8,
      "input": {
        "root": [3, 1, 5, null, 2, 4, 6]
      },
      "output": [1, 2, 3, 4, 5, 6]
    },
    {
      "id": 9,
      "input": {
        "root": [10, 5, 15, null, null, 12, 20]
      },
      "output": [5, 10, 12, 15, 20]
    },
    {
      "id": 10,
      "input": {
        "root": [8, 3, 10, 1, 6, null, 14, null, null, 4, 7, 13]
      },
      "output": [1, 3, 4, 6, 7, 8, 10, 13, 14]
    }
  ]
}