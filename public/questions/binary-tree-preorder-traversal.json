{
  "filename": "binary-tree-preorder-traversal",
  "title": "Binary Tree Preorder Traversal",
  "keywords": [
    "binary",
    "tree",
    "preorder",
    "traversal",
    "leetcode",
    "144",
    "given",
    "root",
    "return",
    "its"
  ],
  "description": "<h2>Binary Tree Preorder Traversal</h2><p>Leetcode 144. Binary Tree Preorder Traversal</p><p></p><p>You are given the `root` of a binary tree, return the **preorder traversal** of its nodes' values.</p><h3>Examples:</h3><ul><li>Input: root = []<br><br>Output: []</li></ul><h3>Constraints:</h3><ul><li> `0 <= number of nodes in the tree <= 100`</li><li> `-100 <= Node.val <= 100`</li></ul>",
  "entry_function": "binaryTreePreorderTraversal",
  "template": "def binaryTreePreorderTraversal(root):\n    ",
  "solution_text": "<h3>Binary Tree Preorder Traversal</h3><p><strong>Algorithm:</strong></p><ol><li>Process current node (add to result)</li><li>Traverse left subtree recursively</li><li>Traverse right subtree recursively</li></ol><p><strong>Time Complexity:</strong> O(n) - visit each node once</p><p><strong>Space Complexity:</strong> O(h) - recursion stack depth, where h is tree height</p><p><strong>Key Insights:</strong></p><ul><li>Preorder: Root -> Left -> Right</li><li>Node is processed before its subtrees</li><li>Useful for creating copy of tree or prefix expressions</li></ul>",
  "solution_code": "def binaryTreePreorderTraversal(root):\n    result = []\n    \n    def preorder(node):\n        if not node:\n            return\n        \n        result.append(node.val)  # Process current node\n        preorder(node.left)      # Traverse left subtree\n        preorder(node.right)     # Traverse right subtree\n    \n    preorder(root)\n    return result",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "root": []
      },
      "output": []
    },
    {
      "id": 2,
      "input": {
        "root": [
          1,
          null,
          2,
          3
        ]
      },
      "output": [
        1,
        2,
        3
      ]
    },
    {
      "id": 3,
      "input": {
        "root": [
          1,
          2,
          3,
          4,
          5,
          null,
          6
        ]
      },
      "output": [
        1,
        2,
        4,
        5,
        3,
        6
      ]
    },
    {
      "id": 4,
      "input": {
        "root": [
          1
        ]
      },
      "output": [
        1
      ]
    },
    {
      "id": 5,
      "input": {
        "root": [
          1,
          2
        ]
      },
      "output": [
        1,
        2
      ]
    },
    {
      "id": 6,
      "input": {
        "root": [
          1,
          null,
          2
        ]
      },
      "output": [
        1,
        2
      ]
    },
    {
      "id": 7,
      "input": {
        "root": [
          5,
          3,
          7,
          2,
          4,
          6,
          8
        ]
      },
      "output": [
        5,
        3,
        2,
        4,
        7,
        6,
        8
      ]
    },
    {
      "id": 8,
      "input": {
        "root": [
          3,
          1,
          5,
          null,
          2,
          4,
          6
        ]
      },
      "output": [
        3,
        1,
        2,
        5,
        4,
        6
      ]
    },
    {
      "id": 9,
      "input": {
        "root": [
          10,
          5,
          15,
          null,
          null,
          12,
          20
        ]
      },
      "output": [
        10,
        5,
        15,
        12,
        20
      ]
    },
    {
      "id": 10,
      "input": {
        "root": [
          8,
          3,
          10,
          1,
          6,
          null,
          14,
          null,
          null,
          4,
          7,
          13
        ]
      },
      "output": [
        8,
        3,
        1,
        6,
        4,
        7,
        10,
        14,
        13
      ]
    }
  ],
  "prepare": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef prepare(test_case_input):\n    def build_tree(arr):\n        if not arr:\n            return None\n        root = TreeNode(arr[0])\n        queue = [root]\n        i = 1\n        while queue and i < len(arr):\n            node = queue.pop(0)\n            if i < len(arr) and arr[i] is not None:\n                node.left = TreeNode(arr[i])\n                queue.append(node.left)\n            i += 1\n            if i < len(arr) and arr[i] is not None:\n                node.right = TreeNode(arr[i])\n                queue.append(node.right)\n            i += 1\n        return root\n\n    root = build_tree(test_case_input['root'])\n    return (root,)",
  "verify": "def verify(actual_output, expected_output):\n    passed = actual_output == expected_output\n    output_str = str(actual_output)\n    return [passed, output_str]"
}