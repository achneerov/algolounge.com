{
  "index": 27,
  "filename": "candy",
  "title": "Candy",
  "keywords": [
    "candy",
    "leetcode",
    "135",
    "there",
    "children",
    "standing",
    "line",
    "each",
    "child",
    "assigned"
  ],
  "description": "<h2>Candy</h2><p>There are <code>n</code> children standing in a line. Each child is assigned a rating value given in the integer array <code>ratings</code>.</p><p>You are giving candies to these children subjected to the following requirements:</p><ul><li>Each child must have at least one candy.</li><li>Children with a higher rating get more candies than their neighbors.</li></ul><p>Return the <strong>minimum</strong> number of candies you need to have to distribute the candies to the children.</p><h3>Examples</h3><ul><li><strong>Input:</strong> <code>ratings = [4,3,5]</code><br><strong>Output:</strong> <code>5</code><br><strong>Explanation:</strong> You can allocate to the first, second and third child with 2, 1, 2 candies respectively.</li><li><strong>Input:</strong> <code>ratings = [2,3,3]</code><br><strong>Output:</strong> <code>4</code><br><strong>Explanation:</strong> You can allocate to the first, second and third child with 1, 2, 1 candies respectively. The third child gets 1 candy because it satisfies the above two conditions.</li></ul><h3>Constraints</h3><ul><li><code>1 <= ratings.length <= 20000</code></li><li><code>0 <= ratings[i] <= 20000</code></li></ul>",
  "entry_function": "candy",
  "template": "def candy(ratings):\n    ",
  "solution_text": "<p><strong>Candy Distribution using greedy two-pass approach:</strong></p><p><strong>Algorithm:</strong></p><ol><li>Initialize each child with 1 candy</li><li>Left-to-right pass: ensure higher rated child has more than left neighbor</li><li>Right-to-left pass: ensure higher rated child has more than right neighbor</li><li>Take maximum from both passes</li></ol><p><strong>Time Complexity:</strong> O(n) - two passes through array</p><p><strong>Space Complexity:</strong> O(n) - candy array</p><p><strong>Key Insights:</strong></p><ul><li>Two passes ensure all constraints are satisfied</li><li>Greedy approach gives minimum candies</li><li>Each child gets at least 1 candy</li></ul>",
  "solution_code": "def candy(ratings):\n    n = len(ratings)\n    candies = [1] * n\n    \n    # Left to right pass\n    for i in range(1, n):\n        if ratings[i] > ratings[i-1]:\n            candies[i] = candies[i-1] + 1\n    \n    # Right to left pass\n    for i in range(n-2, -1, -1):\n        if ratings[i] > ratings[i+1]:\n            candies[i] = max(candies[i], candies[i+1] + 1)\n    \n    return sum(candies)",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "ratings": [
          4,
          3,
          5
        ]
      },
      "output": 5
    },
    {
      "id": 2,
      "input": {
        "ratings": [
          2,
          3,
          3
        ]
      },
      "output": 4
    },
    {
      "id": 3,
      "input": {
        "ratings": [
          1
        ]
      },
      "output": 1
    },
    {
      "id": 4,
      "input": {
        "ratings": [
          1,
          0,
          2
        ]
      },
      "output": 5
    },
    {
      "id": 5,
      "input": {
        "ratings": [
          1,
          2,
          2
        ]
      },
      "output": 4
    },
    {
      "id": 6,
      "input": {
        "ratings": [
          1,
          3,
          2,
          2,
          1
        ]
      },
      "output": 7
    },
    {
      "id": 7,
      "input": {
        "ratings": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "output": 15
    },
    {
      "id": 8,
      "input": {
        "ratings": [
          5,
          4,
          3,
          2,
          1
        ]
      },
      "output": 15
    },
    {
      "id": 9,
      "input": {
        "ratings": [
          1,
          3,
          4,
          5,
          2
        ]
      },
      "output": 11
    },
    {
      "id": 10,
      "input": {
        "ratings": [
          2,
          1,
          4,
          9,
          3,
          6,
          2
        ]
      },
      "output": 12
    },
    {
      "id": 11,
      "input": {
        "ratings": [
          0,
          1,
          2,
          3,
          2,
          1,
          0
        ]
      },
      "output": 16
    },
    {
      "id": 12,
      "input": {
        "ratings": [
          3,
          2,
          1,
          2,
          3
        ]
      },
      "output": 11
    }
  ],
  "prepare": "def prepare(test_case_input):\n    return (test_case_input['ratings'],)",
  "verify": "def verify(actual_output, expected_output):\n    passed = actual_output == expected_output\n    output_str = str(actual_output)\n    return [passed, output_str]"
}
