{
  "filename": "car-fleet",
  "title": "Car Fleet",
  "keywords": [
    "car",
    "fleet",
    "leetcode",
    "853",
    "there",
    "cars",
    "traveling",
    "same",
    "destination",
    "one"
  ],
  "description": "<h2>Car Fleet</h2><p>Leetcode 853. Car Fleet</p><p>There are <code>n</code> cars traveling to the same destination on a one-lane highway.</p><p>You are given two arrays of integers <code>position</code> and <code>speed</code>, both of length <code>n</code>, where:</p><ul><li><code>position[i]</code> is the position of the <code>ith</code> car (in miles)</li><li><code>speed[i]</code> is the speed of the <code>ith</code> car (in miles per hour)</li></ul><p>The <strong>destination</strong> is at position <code>target</code> miles.</p><p>A car <strong>cannot</strong> pass another car ahead of it. It can only catch up to another car and then drive at the same speed as the car ahead of it.</p><p>A <strong>car fleet</strong> is a non-empty set of cars driving at the same position and same speed. A single car is also considered a car fleet.</p><p>If a car catches up to a car fleet the moment the fleet reaches the destination, then the car is considered to be part of the fleet.</p><p>Return the number of <strong>different car fleets</strong> that will arrive at the destination.</p><h3>Examples:</h3><ul><li><strong>Input:</strong> <code>target = 10, position = [1,4], speed = [3,2]</code><br><strong>Output:</strong> <code>1</code><br><strong>Explanation:</strong> The cars starting at 1 (speed 3) and 4 (speed 2) become a fleet, meeting each other at 10, the destination.</li><li><strong>Input:</strong> <code>target = 10, position = [4,1,0,7], speed = [2,2,1,1]</code><br><strong>Output:</strong> <code>3</code><br><strong>Explanation:</strong> The cars starting at 4 and 7 become a fleet at position 10. The cars starting at 1 and 0 never catch up to the car ahead of them. Thus, there are 3 car fleets.</li></ul><h3>Constraints:</h3><ul><li><code>n == position.length == speed.length</code></li><li><code>1 <= n <= 1000</code></li><li><code>0 < target <= 1000</code></li><li><code>0 < speed[i] <= 100</code></li><li><code>0 <= position[i] < target</code></li><li>All the values of <code>position</code> are <strong>unique</strong>.</li></ul>",
  "entry_function": "carFleet",
  "template": "def carFleet(target, position, speed):\n    ",
  "solution_text": "<h3>Car Fleet</h3><p><strong>Algorithm:</strong></p><ol><li>Pair each car's position with speed and sort by position (descending)</li><li>Calculate time to reach target for each car</li><li>Use stack: if current car takes less/equal time than car ahead, they form a fleet (pop the ahead car)</li><li>Count remaining stack elements as separate fleets</li></ol><p><strong>Time Complexity:</strong> O(n log n) - for sorting</p><p><strong>Space Complexity:</strong> O(n) - for car data and stack</p><p><strong>Key Insights:</strong></p><ul><li>Process cars from closest to target to farthest</li><li>Faster car (less time) catches up to slower car ahead (more time)</li><li>When caught, they move as one fleet at slower car's speed</li><li>Cars starting closer to target reach first, unless caught by faster cars from behind</li></ul>",
  "solution_code": "def carFleet(target, position, speed):\n    if not position:\n        return 0\n    \n    # Pair position and speed, then sort by position (descending)\n    cars = sorted(zip(position, speed), reverse=True)\n    \n    stack = []\n    \n    for pos, spd in cars:\n        # Calculate time to reach target\n        time = (target - pos) / spd\n        \n        # If this car reaches destination faster than the car ahead,\n        # it will catch up and form a fleet\n        while stack and time <= stack[-1]:\n            stack.pop()\n        \n        stack.append(time)\n    \n    return len(stack)",
  "prepare": "def prepare(test_case_input):\n    return (test_case_input['target'], test_case_input['position'], test_case_input['speed'])",
  "verify": "def verify(actual_output, expected_output):\n    passed = actual_output == expected_output\n    output_str = str(actual_output)\n    return [passed, output_str]",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "target": 10,
        "position": [
          1,
          4
        ],
        "speed": [
          3,
          2
        ]
      },
      "output": 1
    },
    {
      "id": 2,
      "input": {
        "target": 10,
        "position": [
          4,
          1,
          0,
          7
        ],
        "speed": [
          2,
          2,
          1,
          1
        ]
      },
      "output": 3
    },
    {
      "id": 3,
      "input": {
        "target": 12,
        "position": [
          10,
          8,
          0,
          5,
          3
        ],
        "speed": [
          2,
          4,
          1,
          1,
          3
        ]
      },
      "output": 3
    },
    {
      "id": 4,
      "input": {
        "target": 100,
        "position": [
          0,
          2,
          4
        ],
        "speed": [
          4,
          2,
          1
        ]
      },
      "output": 1
    },
    {
      "id": 5,
      "input": {
        "target": 10,
        "position": [
          6,
          8
        ],
        "speed": [
          3,
          2
        ]
      },
      "output": 2
    },
    {
      "id": 6,
      "input": {
        "target": 10,
        "position": [
          0
        ],
        "speed": [
          1
        ]
      },
      "output": 1
    },
    {
      "id": 7,
      "input": {
        "target": 10,
        "position": [
          8,
          3,
          7,
          4,
          6,
          5
        ],
        "speed": [
          4,
          4,
          4,
          4,
          4,
          4
        ]
      },
      "output": 6
    },
    {
      "id": 8,
      "input": {
        "target": 20,
        "position": [
          6,
          2,
          17
        ],
        "speed": [
          3,
          9,
          2
        ]
      },
      "output": 2
    },
    {
      "id": 9,
      "input": {
        "target": 13,
        "position": [
          10,
          4,
          1,
          8,
          9
        ],
        "speed": [
          3,
          4,
          5,
          4,
          3
        ]
      },
      "output": 4
    },
    {
      "id": 10,
      "input": {
        "target": 15,
        "position": [
          0,
          3,
          6,
          9,
          12
        ],
        "speed": [
          5,
          4,
          3,
          2,
          1
        ]
      },
      "output": 1
    }
  ]
}