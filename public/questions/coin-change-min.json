{
  "filename": "coin-change-min",
  "title": "HW20 - Coin Change Problem",
  "keywords": [
    "dynamic",
    "programming",
    "dp",
    "hard",
    "optimization",
    "coins"
  ],
  "description": "<h2>HW20 - Coin Change Problem</h2><p>Find the minimum number of coins needed to make a target amount using given coin denominations. Return -1 if impossible.</p><h3>Examples:</h3><ul><li>Input: coins = [1, 3, 4], amount = 6<br>Output: 2<br>Explanation: 6 = 3 + 3 (2 coins)</li><li>Input: coins = [2], amount = 3<br>Output: -1<br>Explanation: Cannot make 3 with only coins of value 2</li><li>Input: coins = [1], amount = 0<br>Output: 0<br>Explanation: No coins needed for amount 0</li></ul><h3>Constraints:</h3><ul><li>1 ≤ coins.length ≤ 12</li><li>1 ≤ coins[i] ≤ 2³¹ - 1</li><li>0 ≤ amount ≤ 10⁴</li></ul>",
  "entry_function": "coinChange",
  "template": "def coinChange(coins, amount):\n  ",
  "solution_text": "<h3>Coin Change Problem</h3><p><strong>Algorithm:</strong></p><ol><li>Use dynamic programming</li><li>dp[i] = minimum coins needed for amount i</li><li>For each amount, try all coin denominations</li></ol><p><strong>Time Complexity:</strong> O(amount × coins)</p><p><strong>Space Complexity:</strong> O(amount) - dp array</p>",
  "solution_code": "def coinChange(coins, amount):\n    if amount == 0:\n        return 0\n    \n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    \n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[amount] if dp[amount] != float('inf') else -1",

  "prepare": "def prepare(test_case_input):\n    \"\"\"Prepare arguments for coinChange function\"\"\"\n    return (test_case_input['coins'], test_case_input['amount'])",

  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the minimum coins result\"\"\"\n    passed = actual_output == expected_output\n    return [passed, str(actual_output)]",

  "test_cases": [
    {
      "id": 1,
      "input": {
        "coins": [1, 3, 4],
        "amount": 6
      },
      "output": 2
    },
    {
      "id": 2,
      "input": {
        "coins": [2],
        "amount": 3
      },
      "output": -1
    },
    {
      "id": 3,
      "input": {
        "coins": [1],
        "amount": 0
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "coins": [1, 2, 5],
        "amount": 11
      },
      "output": 3
    },
    {
      "id": 5,
      "input": {
        "coins": [1],
        "amount": 100
      },
      "output": 100
    }
  ]
}
