{
  "filename": "coin-change",
  "title": "Coin Change",
  "keywords": [
    "coin",
    "change",
    "dynamic",
    "programming",
    "minimum",
    "fewest"
  ],
  "description": "<h2>Coin Change</h2><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p><p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p><p>You may assume that you have an infinite number of each kind of coin.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: coins = [1,3,4], amount = 6<br>Output: 2<br>Explanation: 6 = 3 + 3</li><li><strong>Example 2:</strong><br>Input: coins = [2], amount = 3<br>Output: -1</li><li><strong>Example 3:</strong><br>Input: coins = [1], amount = 0<br>Output: 0</li></ul><h3>Constraints:</h3><ul><li>1 <= coins.length <= 12</li><li>1 <= coins[i] <= 2<sup>31</sup> - 1</li><li>0 <= amount <= 10<sup>4</sup></li></ul>",
  "entry_function": "coinChange",
  "template": "def coinChange(coins, amount):\n    ",
  "solution_text": "<h3>Approach</h3><p>This is a classic <strong>dynamic programming</strong> problem using the <strong>bottom-up approach</strong>. We build up solutions for smaller amounts to solve larger amounts.</p><h3>Algorithm</h3><ul><li>Create a DP array where <code>dp[i]</code> represents the minimum coins needed for amount <code>i</code></li><li>Initialize all values to infinity (impossible), except <code>dp[0] = 0</code></li><li>For each amount from 1 to target, try each coin denomination</li><li>Update <code>dp[i] = min(dp[i], dp[i - coin] + 1)</code> if coin ≤ i</li><li>Return <code>dp[amount]</code> if possible, otherwise -1</li></ul><h3>Key Insight</h3><p>For any amount, the minimum coins needed is 1 + minimum coins needed for (amount - coin_value) for each valid coin.</p><h3>Time Complexity</h3><p>O(amount × coins.length) - nested loops</p><h3>Space Complexity</h3><p>O(amount) - DP array storage</p>",
  "solution_code": "def coinChange(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    \n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[amount] if dp[amount] != float('inf') else -1",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "coins": [
          1,
          3,
          4
        ],
        "amount": 6
      },
      "output": 2
    },
    {
      "id": 2,
      "input": {
        "coins": [
          2
        ],
        "amount": 3
      },
      "output": -1
    },
    {
      "id": 3,
      "input": {
        "coins": [
          1
        ],
        "amount": 0
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "coins": [
          1,
          2,
          5
        ],
        "amount": 11
      },
      "output": 3
    },
    {
      "id": 5,
      "input": {
        "coins": [
          2,
          3,
          5
        ],
        "amount": 1
      },
      "output": -1
    },
    {
      "id": 6,
      "input": {
        "coins": [
          1
        ],
        "amount": 1
      },
      "output": 1
    },
    {
      "id": 7,
      "input": {
        "coins": [
          1
        ],
        "amount": 2
      },
      "output": 2
    },
    {
      "id": 8,
      "input": {
        "coins": [
          2,
          5,
          10,
          1
        ],
        "amount": 27
      },
      "output": 4
    },
    {
      "id": 9,
      "input": {
        "coins": [
          5,
          10,
          25
        ],
        "amount": 30
      },
      "output": 2
    },
    {
      "id": 10,
      "input": {
        "coins": [
          1,
          3,
          4
        ],
        "amount": 0
      },
      "output": 0
    },
    {
      "id": 11,
      "input": {
        "coins": [
          2,
          4,
          6
        ],
        "amount": 5
      },
      "output": -1
    },
    {
      "id": 12,
      "input": {
        "coins": [
          1,
          2,
          5
        ],
        "amount": 100
      },
      "output": 20
    }
  ]
}