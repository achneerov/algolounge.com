{
  "filename": "container-with-most-water",
  "title": "Container With Most Water",
  "keywords": [
    "container",
    "water",
    "most",
    "area",
    "two",
    "pointers",
    "height"
  ],
  "description": "<h2>Container With Most Water</h2><p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p><p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p><p>Return the maximum amount of water a container can store.</p><p><strong>Notice</strong> that you may not slant the container.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: height = [1,8,6,2,5,4,8,3,7]<br>Output: 49<br>Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</li><li><strong>Example 2:</strong><br>Input: height = [1,1]<br>Output: 1</li></ul><h3>Constraints:</h3><ul><li>n == height.length</li><li>2 <= n <= 10<sup>5</sup></li><li>0 <= height[i] <= 10<sup>4</sup></li></ul>",
  "entry_function": "maxArea",
  "template": "def maxArea(height):\n    ",
  "solution_text": "<h3>Approach</h3><p>This problem uses the <strong>two-pointer technique</strong> to find the maximum area efficiently. The key insight is that the area is determined by the shorter of the two lines.</p><h3>Algorithm</h3><ul><li>Initialize two pointers: <code>left</code> at start, <code>right</code> at end</li><li>Calculate current area: <code>width Ã— min(height[left], height[right])</code></li><li>Move the pointer with the smaller height inward</li><li>Keep track of the maximum area seen so far</li><li>Continue until pointers meet</li></ul><h3>Key Insight</h3><p>Moving the pointer with the larger height won't increase the area since the area is limited by the shorter line. Moving the shorter pointer might lead to a taller line and potentially larger area.</p><h3>Time Complexity</h3><p>O(n) - single pass with two pointers</p><h3>Space Complexity</h3><p>O(1) - only using constant extra space</p>",
  "solution_code": "def maxArea(height):\n    left, right = 0, len(height) - 1\n    max_area = 0\n    \n    while left < right:\n        width = right - left\n        current_area = width * min(height[left], height[right])\n        max_area = max(max_area, current_area)\n        \n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_area",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "height": [
          1,
          8,
          6,
          2,
          5,
          4,
          8,
          3,
          7
        ]
      },
      "output": 49
    },
    {
      "id": 2,
      "input": {
        "height": [
          1,
          1
        ]
      },
      "output": 1
    },
    {
      "id": 3,
      "input": {
        "height": [
          1,
          2,
          1
        ]
      },
      "output": 2
    },
    {
      "id": 4,
      "input": {
        "height": [
          2,
          1
        ]
      },
      "output": 1
    },
    {
      "id": 5,
      "input": {
        "height": [
          1,
          2,
          4,
          3
        ]
      },
      "output": 4
    },
    {
      "id": 6,
      "input": {
        "height": [
          2,
          3,
          4,
          5,
          18,
          17,
          6
        ]
      },
      "output": 17
    },
    {
      "id": 7,
      "input": {
        "height": [
          1,
          3,
          2,
          5,
          25,
          24,
          5
        ]
      },
      "output": 24
    },
    {
      "id": 8,
      "input": {
        "height": [
          5,
          5,
          5,
          5
        ]
      },
      "output": 15
    },
    {
      "id": 9,
      "input": {
        "height": [
          1,
          8,
          100,
          2,
          100,
          4,
          8,
          3,
          7
        ]
      },
      "output": 200
    },
    {
      "id": 10,
      "input": {
        "height": [
          10,
          9,
          8,
          7,
          6,
          5,
          4,
          3,
          2,
          1
        ]
      },
      "output": 25
    },
    {
      "id": 11,
      "input": {
        "height": [
          0,
          2
        ]
      },
      "output": 0
    },
    {
      "id": 12,
      "input": {
        "height": [
          3,
          9,
          3,
          4,
          7,
          2,
          12,
          6
        ]
      },
      "output": 45
    }
  ]
}