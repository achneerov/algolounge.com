{
  "filename": "counting-bits",
  "title": "Counting Bits",
  "keywords": [
    "counting",
    "bits",
    "dynamic",
    "programming",
    "binary",
    "array"
  ],
  "description": "<h2>Counting Bits</h2><p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each <code>i</code> (0 <= i <= n), <code>ans[i]</code> is the number of 1's in the binary representation of <code>i</code>.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: n = 2<br>Output: [0,1,1]<br>Explanation:<br>0 --> 0<br>1 --> 1<br>2 --> 10</li><li><strong>Example 2:</strong><br>Input: n = 5<br>Output: [0,1,1,2,1,2]<br>Explanation:<br>0 --> 0<br>1 --> 1<br>2 --> 10<br>3 --> 11<br>4 --> 100<br>5 --> 101</li></ul><h3>Constraints:</h3><ul><li>0 <= n <= 10<sup>5</sup></li></ul>",
  "entry_function": "countBits",
  "template": "def countBits(n):\n    ",
  "solution_text": "<h3>Approach</h3><p>This is a <strong>dynamic programming</strong> problem with a clever bit manipulation insight. The number of 1-bits in any number can be calculated using its relationship with half of that number.</p><h3>Key Insight</h3><p>For any number <code>i</code>: <code>countBits(i) = countBits(i >> 1) + (i & 1)</code></p><ul><li><code>i >> 1</code> is equivalent to <code>i / 2</code> (right shift removes the last bit)</li><li><code>i & 1</code> gives us the last bit (0 or 1)</li><li>So we take the count from half the number and add 1 if the last bit is 1</li></ul><h3>Algorithm</h3><ul><li>Initialize array <code>dp</code> of size <code>n+1</code> with <code>dp[0] = 0</code></li><li>For each number from 1 to n, use the recurrence relation</li><li>Return the complete array</li></ul><h3>Time Complexity</h3><p>O(n) - single pass through numbers 1 to n</p><h3>Space Complexity</h3><p>O(n) - output array storage</p>",
  "solution_code": "def countBits(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i >> 1] + (i & 1)\n    return dp",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "n": 2
      },
      "output": [
        0,
        1,
        1
      ]
    },
    {
      "id": 2,
      "input": {
        "n": 5
      },
      "output": [
        0,
        1,
        1,
        2,
        1,
        2
      ]
    },
    {
      "id": 3,
      "input": {
        "n": 0
      },
      "output": [
        0
      ]
    },
    {
      "id": 4,
      "input": {
        "n": 1
      },
      "output": [
        0,
        1
      ]
    },
    {
      "id": 5,
      "input": {
        "n": 8
      },
      "output": [
        0,
        1,
        1,
        2,
        1,
        2,
        2,
        3,
        1
      ]
    },
    {
      "id": 6,
      "input": {
        "n": 10
      },
      "output": [
        0,
        1,
        1,
        2,
        1,
        2,
        2,
        3,
        1,
        2,
        2
      ]
    },
    {
      "id": 7,
      "input": {
        "n": 15
      },
      "output": [
        0,
        1,
        1,
        2,
        1,
        2,
        2,
        3,
        1,
        2,
        2,
        3,
        2,
        3,
        3,
        4
      ]
    },
    {
      "id": 8,
      "input": {
        "n": 3
      },
      "output": [
        0,
        1,
        1,
        2
      ]
    },
    {
      "id": 9,
      "input": {
        "n": 7
      },
      "output": [
        0,
        1,
        1,
        2,
        1,
        2,
        2,
        3
      ]
    },
    {
      "id": 10,
      "input": {
        "n": 4
      },
      "output": [
        0,
        1,
        1,
        2,
        1
      ]
    },
    {
      "id": 11,
      "input": {
        "n": 16
      },
      "output": [
        0,
        1,
        1,
        2,
        1,
        2,
        2,
        3,
        1,
        2,
        2,
        3,
        2,
        3,
        3,
        4,
        1
      ]
    },
    {
      "id": 12,
      "input": {
        "n": 6
      },
      "output": [
        0,
        1,
        1,
        2,
        1,
        2,
        2
      ]
    }
  ]
}