{
  "filename": "daily-temperatures",
  "title": "Daily Temperatures",
  "keywords": [
    "daily",
    "temperatures",
    "leetcode",
    "739",
    "given",
    "array",
    "integers",
    "where",
    "represents",
    "ith"
  ],
  "description": "<h2>Daily Temperatures</h2><p>Leetcode 739. Daily Temperatures</p><p>You are given an array of integers <code>temperatures</code> where <code>temperatures[i]</code> represents the daily temperatures on the <code>ith</code> day.</p><p>Return an array <code>result</code> where <code>result[i]</code> is the number of days after the <code>ith</code> day before a warmer temperature appears on a future day. If there is no day in the future where a warmer temperature will appear for the <code>ith</code> day, set <code>result[i]</code> to <code>0</code> instead.</p><h3>Examples:</h3><ul><li>Input: temperatures = [30,38,30,36,35,40,28]<br><br>Output: [1,4,1,2,1,0,0]</li><li>Input: temperatures = [22,21,20]<br><br>Output: [0,0,0]</li></ul><h3>Constraints:</h3><ul><li><code>1 <= temperatures.length <= 1000</code></li><li><code>1 <= temperatures[i] <= 100</code></li></ul>",
  "entry_function": "dailyTemperatures",
  "template": "def dailyTemperatures(temperatures):\n    ",
  "solution_text": "Monotonic Stack Solution for Daily Temperatures:\n\n**Algorithm:**\n1. Use stack to store indices of temperatures\n2. For each temperature, pop indices from stack while current temp is warmer\n3. Calculate days difference for each popped index\n4. Push current index to stack\n\n**Time Complexity:** O(n) - each element pushed and popped at most once\n**Space Complexity:** O(n) for the stack and result array\n\n**Key Insights:**\n- Monotonic decreasing stack maintains indices of unresolved temperatures\n- When warmer temp found, resolve all colder temps in stack\n- Remaining indices in stack have no warmer future day (result = 0)",
  "solution_code": "def dailyTemperatures(temperatures):\n    n = len(temperatures)\n    result = [0] * n\n    stack = []  # Stack to store indices\n    \n    for i in range(n):\n        # While stack not empty and current temperature is warmer\n        # than temperature at index stored at top of stack\n        while stack and temperatures[i] > temperatures[stack[-1]]:\n            prev_index = stack.pop()\n            result[prev_index] = i - prev_index\n        \n        stack.append(i)\n    \n    return result",
  "prepare": "def prepare(test_case_input):\n    return (test_case_input['temperatures'],)",
  "verify": "def verify(actual_output, expected_output):\n    passed = actual_output == expected_output\n    output_str = str(actual_output)\n    return [passed, output_str]",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "temperatures": [30, 38, 30, 36, 35, 40, 28]
      },
      "output": [1, 4, 1, 2, 1, 0, 0]
    },
    {
      "id": 2,
      "input": {
        "temperatures": [22, 21, 20]
      },
      "output": [0, 0, 0]
    },
    {
      "id": 3,
      "input": {
        "temperatures": [89, 62, 70, 58, 47, 47, 46, 76, 100, 70]
      },
      "output": [8, 1, 5, 4, 3, 2, 1, 1, 0, 0]
    },
    {
      "id": 4,
      "input": {
        "temperatures": [73, 74, 75, 71, 69, 72, 76, 73]
      },
      "output": [1, 1, 4, 2, 1, 1, 0, 0]
    },
    {
      "id": 5,
      "input": {
        "temperatures": [55]
      },
      "output": [0]
    },
    {
      "id": 6,
      "input": {
        "temperatures": [30, 40, 50, 60]
      },
      "output": [1, 1, 1, 0]
    },
    {
      "id": 7,
      "input": {
        "temperatures": [60, 50, 40, 30]
      },
      "output": [0, 0, 0, 0]
    },
    {
      "id": 8,
      "input": {
        "temperatures": [75, 71, 76, 73, 68, 72, 77]
      },
      "output": [2, 1, 4, 3, 1, 1, 0]
    },
    {
      "id": 9,
      "input": {
        "temperatures": [90, 80, 70, 85, 95]
      },
      "output": [4, 2, 1, 1, 0]
    },
    {
      "id": 10,
      "input": {
        "temperatures": [34, 80, 80, 34, 34, 80, 80, 80, 80, 34]
      },
      "output": [1, 0, 0, 2, 1, 0, 0, 0, 0, 0]
    },
    {
      "id": 11,
      "input": {
        "temperatures": [50, 50, 50, 60]
      },
      "output": [3, 2, 1, 0]
    }
  ]
}
