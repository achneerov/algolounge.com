{
  "filename": "dice-ways",
  "title": "Dice Ways",
  "keywords": [
    "dynamic",
    "programming",
    "combinatorics",
    "counting",
    "medium"
  ],
  "description": "<h2>Dice Ways</h2><p>Count the number of ordered outcomes produced by rolling <code>k</code> standard dice (faces 1-6) that sum to a target value. Each distinct sequence of rolls counts as a separate way.</p><h3>Examples:</h3><ul><li>Input: k = 2, target = 7<br>Output: 6<br>Explanation: Ways to get sum 7 with 2 dice:<br>(1,6), (2,5), (3,4), (4,3), (5,2), (6,1)</li><li>Input: k = 1, target = 3<br>Output: 1<br>Explanation: Only way is rolling a 3</li><li>Input: k = 2, target = 1<br>Output: 0<br>Explanation: Impossible (minimum sum with 2 dice is 2)</li></ul><h3>Constraints:</h3><ul><li>1 ≤ k ≤ 30</li><li>1 ≤ target ≤ 1000</li><li>Return 0 if impossible (target < k or target > 6k)</li></ul>",
  "entry_function": "diceWays",
  "template": "def diceWays(k, target):\n  ",
  "solution_text": "<h3>Dice Ways</h3><p><strong>Algorithm:</strong></p><ol><li>Use dynamic programming</li><li>dp[i][j] = ways to get sum j with i dice</li><li>For each die, try all faces 1-6</li></ol><p><strong>Time Complexity:</strong> O(k × target × 6)</p><p><strong>Space Complexity:</strong> O(k × target) - dp table</p><p><strong>Key Insights:</strong></p><ul><li>Impossible cases: target < k (sum too small) or target > 6k (sum too large)</li><li>dp[0][0] = 1 represents one way to get sum 0 with 0 dice (do nothing)</li><li>Each die contributes independently: current ways = sum of ways from previous die with all valid face values</li><li>Minimum sum with i dice is i, maximum is 6i</li></ul>",
  "solution_code": "def diceWays(k, target):\n    if target < k or target > 6 * k:\n        return 0\n    \n    dp = [[0] * (target + 1) for _ in range(k + 1)]\n    dp[0][0] = 1\n    \n    for dice in range(1, k + 1):\n        for sum_val in range(dice, min(6 * dice, target) + 1):\n            for face in range(1, 7):\n                if sum_val >= face:\n                    dp[dice][sum_val] += dp[dice - 1][sum_val - face]\n    \n    return dp[k][target]",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Prepare arguments for diceWays function\"\"\"\n    return (test_case_input['k'], test_case_input['target'])",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the ways count\"\"\"\n    passed = actual_output == expected_output\n    return [passed, str(actual_output)]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "k": 2,
        "target": 7
      },
      "output": 6
    },
    {
      "id": 2,
      "input": {
        "k": 1,
        "target": 3
      },
      "output": 1
    },
    {
      "id": 3,
      "input": {
        "k": 2,
        "target": 1
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "k": 3,
        "target": 10
      },
      "output": 27
    },
    {
      "id": 5,
      "input": {
        "k": 1,
        "target": 6
      },
      "output": 1
    },
    {
      "id": 6,
      "input": {
        "k": 2,
        "target": 12
      },
      "output": 1
    },
    {
      "id": 7,
      "input": {
        "k": 2,
        "target": 2
      },
      "output": 1
    },
    {
      "id": 8,
      "input": {
        "k": 3,
        "target": 3
      },
      "output": 1
    },
    {
      "id": 9,
      "input": {
        "k": 2,
        "target": 6
      },
      "output": 5
    },
    {
      "id": 10,
      "input": {
        "k": 4,
        "target": 14
      },
      "output": 146
    }
  ]
}
