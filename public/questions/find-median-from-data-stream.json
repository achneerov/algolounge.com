{
  "index": 42,
  "filename": "find-median-from-data-stream",
  "title": "Find Median From Data Stream",
  "keywords": [
    "find",
    "median",
    "data",
    "stream",
    "heap",
    "priority",
    "queue",
    "class",
    "design",
    "leetcode"
  ],
  "description": "<h2>Find Median From Data Stream</h2><p>The <strong>median</strong> is the middle value in a sorted list of integers. For lists of <em>even</em> length, there is no middle value, so the median is the mean of the two middle values.</p><p>For example:</p><ul><li>For <code>arr = [1,2,3]</code>, the median is <code>2</code>.</li><li>For <code>arr = [1,2]</code>, the median is <code>(1 + 2) / 2 = 1.5</code></li></ul><p>Implement the MedianFinder class:</p><ul><li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li><li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li><li><code>double findMedian()</code> returns the median of all elements so far.</li></ul><h3>Examples:</h3><ul><li><strong>Input:</strong><br>[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]<br>[[], [1], [2], [], [3], []]<br><strong>Output:</strong><br>[null, null, null, 1.5, null, 2.0]<br><strong>Explanation:</strong><br>MedianFinder medianFinder = new MedianFinder();<br>medianFinder.addNum(1);&nbsp;&nbsp;&nbsp;&nbsp;// arr = [1]<br>medianFinder.addNum(2);&nbsp;&nbsp;&nbsp;&nbsp;// arr = [1, 2]<br>medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)<br>medianFinder.addNum(3);&nbsp;&nbsp;&nbsp;&nbsp;// arr[1, 2, 3]<br>medianFinder.findMedian(); // return 2.0</li></ul><h3>Constraints:</h3><ul><li><code>-10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup></code></li><li><code>findMedian</code> will only be called after adding at least one integer to the data structure.</li></ul>",
  "entry_function": "runMedianFinder",
  "template": "class MedianFinder:\n    def __init__(self):\n        \n    def addNum(self, num):\n        \n    def findMedian(self):\n        \n\ndef runMedianFinder(operations, values):\n    ",
  "solution_text": "<h3>Find Median From Data Stream</h3><p><strong>Algorithm:</strong></p><ol><li>Use a max heap for the smaller half of numbers</li><li>Use a min heap for the larger half of numbers</li><li>Keep heaps balanced: max heap size &lt;= min heap size + 1</li><li>When adding: add to appropriate heap, then rebalance if needed</li><li>Median: if heaps equal size, average of tops; else top of max heap</li></ol><p><strong>Time Complexity:</strong> O(log n) - addNum, O(1) - findMedian</p><p><strong>Space Complexity:</strong> O(n) - storing all numbers in heaps</p><p><strong>Key Insights:</strong></p><ul><li>Two heaps maintain sorted order without full sorting</li><li>Max heap stores smaller half, min heap stores larger half</li><li>Balance ensures median is always at heap tops</li></ul>",
  "solution_code": "import heapq\n\nclass MedianFinder:\n    def __init__(self):\n        # Max heap for smaller half (negate values for max heap behavior)\n        self.max_heap = []\n        # Min heap for larger half\n        self.min_heap = []\n    \n    def addNum(self, num):\n        # Add to max heap first (smaller half)\n        heapq.heappush(self.max_heap, -num)\n        \n        # Move largest from max heap to min heap\n        heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        \n        # Balance heaps: max heap should have equal or one more element\n        if len(self.max_heap) < len(self.min_heap):\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n    \n    def findMedian(self):\n        if len(self.max_heap) > len(self.min_heap):\n            # Odd total count: median is top of max heap\n            return float(-self.max_heap[0])\n        else:\n            # Even total count: median is average of both tops\n            return (-self.max_heap[0] + self.min_heap[0]) / 2.0\n\ndef runMedianFinder(operations, values):\n    \"\"\"Execute MedianFinder operations and return results\"\"\"\n    obj = None\n    results = []\n    \n    for i, (op, val) in enumerate(zip(operations, values)):\n        if op == \"MedianFinder\":\n            obj = MedianFinder()\n            results.append(None)\n        elif op == \"addNum\":\n            obj.addNum(val[0])\n            results.append(None)\n        elif op == \"findMedian\":\n            results.append(obj.findMedian())\n    \n    return results",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Prepare arguments for MedianFinder operations\"\"\"\n    operations = test_case_input['operations']\n    values = test_case_input['values']\n    \n    return (operations, values)",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the MedianFinder operations result\"\"\"\n    def list_to_string(lst):\n        if not lst:\n            return '[]'\n        return '[' + ', '.join(str(x) if x is not None else 'null' for x in lst) + ']'\n    \n    # Compare outputs with small tolerance for floating point\n    passed = True\n    if len(actual_output) != len(expected_output):\n        passed = False\n    else:\n        for i, (actual, expected) in enumerate(zip(actual_output, expected_output)):\n            if expected is None:\n                if actual is not None:\n                    passed = False\n                    break\n            elif isinstance(expected, float):\n                if not isinstance(actual, (int, float)) or abs(actual - expected) > 1e-5:\n                    passed = False\n                    break\n            else:\n                if actual != expected:\n                    passed = False\n                    break\n    \n    output_str = list_to_string(actual_output)\n    \n    return [passed, output_str]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "operations": [
          "MedianFinder",
          "addNum",
          "addNum",
          "findMedian",
          "addNum",
          "findMedian"
        ],
        "values": [
          [],
          [
            1
          ],
          [
            2
          ],
          [],
          [
            3
          ],
          []
        ]
      },
      "output": [
        null,
        null,
        null,
        1.5,
        null,
        2
      ]
    },
    {
      "id": 2,
      "input": {
        "operations": [
          "MedianFinder",
          "addNum",
          "findMedian"
        ],
        "values": [
          [],
          [
            1
          ],
          []
        ]
      },
      "output": [
        null,
        null,
        1
      ]
    },
    {
      "id": 3,
      "input": {
        "operations": [
          "MedianFinder",
          "addNum",
          "addNum",
          "findMedian",
          "addNum",
          "findMedian",
          "addNum",
          "findMedian",
          "addNum",
          "findMedian"
        ],
        "values": [
          [],
          [
            6
          ],
          [
            10
          ],
          [],
          [
            2
          ],
          [],
          [
            6
          ],
          [],
          [
            5
          ],
          []
        ]
      },
      "output": [
        null,
        null,
        null,
        8,
        null,
        6,
        null,
        6,
        null,
        6
      ]
    },
    {
      "id": 4,
      "input": {
        "operations": [
          "MedianFinder",
          "addNum",
          "addNum",
          "findMedian",
          "addNum",
          "findMedian",
          "addNum",
          "findMedian"
        ],
        "values": [
          [],
          [
            -1
          ],
          [
            -2
          ],
          [],
          [
            -3
          ],
          [],
          [
            -4
          ],
          []
        ]
      },
      "output": [
        null,
        null,
        null,
        -1.5,
        null,
        -2,
        null,
        -2.5
      ]
    },
    {
      "id": 5,
      "input": {
        "operations": [
          "MedianFinder",
          "addNum",
          "findMedian",
          "addNum",
          "findMedian",
          "addNum",
          "findMedian"
        ],
        "values": [
          [],
          [
            1
          ],
          [],
          [
            1
          ],
          [],
          [
            1
          ],
          []
        ]
      },
      "output": [
        null,
        null,
        1,
        null,
        1,
        null,
        1
      ]
    },
    {
      "id": 6,
      "input": {
        "operations": [
          "MedianFinder",
          "addNum",
          "addNum",
          "addNum",
          "addNum",
          "addNum",
          "findMedian"
        ],
        "values": [
          [],
          [
            1
          ],
          [
            2
          ],
          [
            3
          ],
          [
            4
          ],
          [
            5
          ],
          []
        ]
      },
      "output": [
        null,
        null,
        null,
        null,
        null,
        null,
        3
      ]
    },
    {
      "id": 7,
      "input": {
        "operations": [
          "MedianFinder",
          "addNum",
          "addNum",
          "addNum",
          "addNum",
          "findMedian"
        ],
        "values": [
          [],
          [
            5
          ],
          [
            4
          ],
          [
            3
          ],
          [
            2
          ],
          []
        ]
      },
      "output": [
        null,
        null,
        null,
        null,
        null,
        3.5
      ]
    },
    {
      "id": 8,
      "input": {
        "operations": [
          "MedianFinder",
          "addNum",
          "addNum",
          "findMedian",
          "addNum",
          "addNum",
          "findMedian"
        ],
        "values": [
          [],
          [
            10
          ],
          [
            20
          ],
          [],
          [
            30
          ],
          [
            40
          ],
          []
        ]
      },
      "output": [
        null,
        null,
        null,
        15,
        null,
        null,
        25
      ]
    },
    {
      "id": 9,
      "input": {
        "operations": [
          "MedianFinder",
          "addNum",
          "addNum",
          "addNum",
          "findMedian",
          "addNum",
          "findMedian"
        ],
        "values": [
          [],
          [
            0
          ],
          [
            0
          ],
          [
            0
          ],
          [],
          [
            0
          ],
          []
        ]
      },
      "output": [
        null,
        null,
        null,
        null,
        0,
        null,
        0
      ]
    },
    {
      "id": 10,
      "input": {
        "operations": [
          "MedianFinder",
          "addNum",
          "addNum",
          "addNum",
          "addNum",
          "addNum",
          "findMedian",
          "addNum",
          "findMedian"
        ],
        "values": [
          [],
          [
            12
          ],
          [
            10
          ],
          [
            13
          ],
          [
            11
          ],
          [
            5
          ],
          [],
          [
            15
          ],
          []
        ]
      },
      "output": [
        null,
        null,
        null,
        null,
        null,
        null,
        11,
        null,
        11.5
      ]
    }
  ]
}
