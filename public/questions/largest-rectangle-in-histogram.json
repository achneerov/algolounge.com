{
  "filename": "largest-rectangle-in-histogram",
  "title": "Largest Rectangle In Histogram",
  "keywords": [
    "largest",
    "rectangle",
    "histogram",
    "leetcode",
    "84",
    "given",
    "array",
    "integers",
    "heights",
    "stack"
  ],
  "description": "<h2>Largest Rectangle In Histogram</h2><p>Leetcode 84. Largest Rectangle In Histogram</p><p></p><p>You are given an array of integers <code>heights</code> where <code>heights[i]</code> represents the height of a bar. The width of each bar is <code>1</code>.</p><p></p><p>Return the area of the largest rectangle that can be formed among the bars.</p><p></p><p>Note: This chart is known as a <a href='https://en.wikipedia.org/wiki/Histogram'>histogram</a>.</p><h3>Examples:</h3><ul><li>Input: heights = [7,1,7,2,2,4]<br><pre>┌────────────┐\n│█   █       │\n│█   █       │\n│█   █       │\n│█   █     █ │\n│█   █     █ │\n│█   ▓ ▓ ▓ ▓ │\n│█ █ ▓ ▓ ▓ ▓ │\n└────────────┘\n 7 1 7 2 2 4</pre>Output: 8 (▓ = largest rectangle, area = 4 width × 2 height)</li><li>Input: heights = [1,3,7]<br><pre>┌──────┐\n│    ▓ │\n│    ▓ │\n│    ▓ │\n│    ▓ │\n│  █ ▓ │\n│  █ ▓ │\n│█ █ ▓ │\n└──────┘\n 1 3 7</pre>Output: 7 (▓ = largest rectangle, area = 1 width × 7 height)</li><li>Input: heights = [2,1,5,6,2,3]<br><pre>┌────────────┐\n│      █     │\n│    ▓ ▓     │\n│    ▓ ▓     │\n│    ▓ ▓   █ │\n│█   ▓ ▓ █ █ │\n│█ █ ▓ ▓ █ █ │\n└────────────┘\n 2 1 5 6 2 3</pre>Output: 10 (▓ = largest rectangle, area = 2 width × 5 height)</li></ul><h3>Constraints:</h3><ul><li>1 &lt;= heights.length &lt;= 1000</li><li>0 &lt;= heights[i] &lt;= 1000</li></ul>",
  "entry_function": "largestRectangleInHistogram",
  "template": "def largestRectangleInHistogram(heights):\n    ",
  "solution_text": "<h3>Largest Rectangle In Histogram</h3><p><strong>Algorithm:</strong></p><ol><li>Use a stack to maintain indices of bars with increasing heights</li><li>For each bar, pop from stack while current height is smaller than stack top</li><li>Calculate area using popped height as the smallest bar in the rectangle</li><li>Width is determined by current index and previous stack top index</li><li>Track maximum area found</li><li>Process remaining bars in stack after iteration</li></ol><p><strong>Time Complexity:</strong> O(n) - each element pushed and popped at most once</p><p><strong>Space Complexity:</strong> O(n) - stack space in worst case</p><p><strong>Key Insights:</strong></p><ul><li>Stack maintains increasing heights for potential rectangles</li><li>When we find a smaller height, we can complete rectangles ending at current position</li><li>Width of rectangle is determined by stack indices</li><li>This is a classic monotonic stack problem</li></ul>",
  "solution_code": "def largestRectangleInHistogram(heights):\n    stack = []\n    max_area = 0\n    \n    for i, height in enumerate(heights):\n        # Pop from stack while current height is smaller\n        while stack and heights[stack[-1]] > height:\n            h = heights[stack.pop()]\n            # Width is determined by current index and previous stack top\n            w = i if not stack else i - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        stack.append(i)\n    \n    # Process remaining bars in stack\n    while stack:\n        h = heights[stack.pop()]\n        w = len(heights) if not stack else len(heights) - stack[-1] - 1\n        max_area = max(max_area, h * w)\n    \n    return max_area",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Extract heights array from test case input\"\"\"\n    return (test_case_input['heights'],)",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the largest rectangle area\"\"\"\n    passed = actual_output == expected_output\n    output_str = str(actual_output)\n    \n    return [passed, output_str]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "heights": [7, 1, 7, 2, 2, 4]
      },
      "output": 8
    },
    {
      "id": 2,
      "input": {
        "heights": [1, 3, 7]
      },
      "output": 7
    },
    {
      "id": 3,
      "input": {
        "heights": [2, 1, 5, 6, 2, 3]
      },
      "output": 10
    },
    {
      "id": 4,
      "input": {
        "heights": [1]
      },
      "output": 1
    },
    {
      "id": 5,
      "input": {
        "heights": [4, 4, 4, 4]
      },
      "output": 16
    },
    {
      "id": 6,
      "input": {
        "heights": [1, 2, 3, 4, 5]
      },
      "output": 9
    },
    {
      "id": 7,
      "input": {
        "heights": [5, 4, 3, 2, 1]
      },
      "output": 9
    },
    {
      "id": 8,
      "input": {
        "heights": [0, 9]
      },
      "output": 9
    },
    {
      "id": 9,
      "input": {
        "heights": [2, 4]
      },
      "output": 4
    },
    {
      "id": 10,
      "input": {
        "heights": [6, 7, 5, 2, 4, 5, 9, 3]
      },
      "output": 16
    }
  ]
}
