{
  "filename": "longest-increasing-subsequence",
  "title": "Longest Increasing Subsequence",
  "keywords": [
    "longest",
    "increasing",
    "subsequence",
    "dynamic",
    "programming",
    "binary",
    "search"
  ],
  "description": "<h2>Longest Increasing Subsequence</h2><p>Given an integer array <code>nums</code>, return the length of the longest strictly increasing subsequence.</p><p>A <strong>subsequence</strong> is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, <code>[3,6,2,7]</code> is a subsequence of the array <code>[0,3,1,6,2,2,7]</code>.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: nums = [10,9,2,5,3,7,101,18]<br>Output: 4<br>Explanation: The longest increasing subsequence is [2,3,7,18], therefore the length is 4.</li><li><strong>Example 2:</strong><br>Input: nums = [0,1,0,3,2,3]<br>Output: 4</li><li><strong>Example 3:</strong><br>Input: nums = [7,7,7,7,7,7,7]<br>Output: 1</li></ul><h3>Constraints:</h3><ul><li>1 <= nums.length <= 2500</li><li>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></li></ul>",
  "template": "def lengthOfLIS(nums):\n    ",
  "solution_text": "<h3>Approach</h3><p>This is a classic <strong>dynamic programming</strong> problem. We build up the solution by finding the LIS ending at each position.</p><h3>Algorithm</h3><ul><li>Create DP array where <code>dp[i]</code> = length of LIS ending at index i</li><li>Initialize all values to 1 (each element is a subsequence of length 1)</li><li>For each position i, check all previous positions j:</li><ul><li>If <code>nums[j] < nums[i]</code>, we can extend the subsequence ending at j</li><li>Update <code>dp[i] = max(dp[i], dp[j] + 1)</code></li></ul><li>Return the maximum value in dp array</li></ul><h3>Time Complexity</h3><p>O(nÂ²) - nested loops</p><h3>Space Complexity</h3><p>O(n) - DP array storage</p>",
  "solution_code": "def lengthOfLIS(nums):\n    if not nums:\n        return 0\n    \n    dp = [1] * len(nums)\n    \n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[j] < nums[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          10,
          9,
          2,
          5,
          3,
          7,
          101,
          18
        ]
      },
      "output": 4
    },
    {
      "id": 2,
      "input": {
        "nums": [
          0,
          1,
          0,
          3,
          2,
          3
        ]
      },
      "output": 4
    },
    {
      "id": 3,
      "input": {
        "nums": [
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ]
      },
      "output": 1
    }
  ]
}