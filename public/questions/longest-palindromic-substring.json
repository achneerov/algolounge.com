{
  "filename": "longest-palindromic-substring",
  "title": "Longest Palindromic Substring",
  "keywords": [
    "longest",
    "palindromic",
    "substring",
    "expand",
    "center",
    "dynamic"
  ],
  "description": "<h2>Longest Palindromic Substring</h2><p>Given a string <code>s</code>, return <em>the longest palindromic substring</em> in <code>s</code>.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: s = \"babad\"<br>Output: \"bab\"<br>Explanation: \"aba\" is also a valid answer.</li><li><strong>Example 2:</strong><br>Input: s = \"cbbd\"<br>Output: \"bb\"</li></ul><h3>Constraints:</h3><ul><li>1 <= s.length <= 1000</li><li>s consist of only digits and English letters.</li></ul>",
  "template": "def longestPalindrome(s):\n    ",
  "solution_text": "Expand around centers. For each position, check both odd and even length palindromes.",
  "solution_code": "def longestPalindrome(s):\n    if not s:\n        return \"\"\n    \n    start = 0\n    max_len = 1\n    \n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return right - left - 1\n    \n    for i in range(len(s)):\n        # Odd length palindromes\n        len1 = expand_around_center(i, i)\n        # Even length palindromes\n        len2 = expand_around_center(i, i + 1)\n        \n        current_max = max(len1, len2)\n        if current_max > max_len:\n            max_len = current_max\n            start = i - (current_max - 1) // 2\n    \n    return s[start:start + max_len]",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "s": "babad"
      },
      "output": "bab"
    },
    {
      "id": 2,
      "input": {
        "s": "cbbd"
      },
      "output": "bb"
    }
  ]
}