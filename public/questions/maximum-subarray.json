{
  "filename": "maximum-subarray",
  "title": "Maximum Subarray",
  "keywords": [
    "maximum",
    "subarray",
    "contiguous",
    "kadane",
    "algorithm",
    "sum"
  ],
  "description": "<h2>Maximum Subarray</h2><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p>A subarray is a contiguous part of an array.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: nums = [-2,1,-3,4,-1,2,1,-5,4]<br>Output: 6<br>Explanation: [4,-1,2,1] has the largest sum = 6.</li><li><strong>Example 2:</strong><br>Input: nums = [1]<br>Output: 1</li><li><strong>Example 3:</strong><br>Input: nums = [5,4,-1,7,8]<br>Output: 23</li></ul><h3>Constraints:</h3><ul><li>1 <= nums.length <= 10<sup>5</sup></li><li>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></li></ul>",
  "template": "def maxSubArray(nums):\n    ",
  "solution_text": "Use Kadane's algorithm: keep track of current sum and maximum sum seen so far.",
  "solution_code": "def maxSubArray(nums):\n    max_sum = nums[0]\n    current_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          -2,
          1,
          -3,
          4,
          -1,
          2,
          1,
          -5,
          4
        ]
      },
      "output": 6
    },
    {
      "id": 2,
      "input": {
        "nums": [
          1
        ]
      },
      "output": 1
    },
    {
      "id": 3,
      "input": {
        "nums": [
          5,
          4,
          -1,
          7,
          8
        ]
      },
      "output": 23
    }
  ]
}