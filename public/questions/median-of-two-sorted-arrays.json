{
  "filename": "median-of-two-sorted-arrays",
  "title": "Median of Two Sorted Arrays",
  "keywords": [
    "median",
    "two",
    "sorted",
    "arrays",
    "binary",
    "search",
    "logarithmic",
    "time",
    "partition",
    "divide"
  ],
  "description": "<h2>Median of Two Sorted Arrays</h2><p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p><p>The overall run time complexity should be <code>O(log (m+n))</code>.</p><h3>Examples:</h3><ul><li>Input: nums1 = [1,3], nums2 = [2]<br>Output: 2.00000<br>Explanation: merged array = [1,2,3] and median is 2.</li><li>Input: nums1 = [1,2], nums2 = [3,4]<br>Output: 2.50000<br>Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.</li></ul><h3>Constraints:</h3><ul><li><code>nums1.length == m</code></li><li><code>nums2.length == n</code></li><li><code>0 <= m <= 1000</code></li><li><code>0 <= n <= 1000</code></li><li><code>1 <= m + n <= 2000</code></li><li><code>-10^6 <= nums1[i], nums2[i] <= 10^6</code></li></ul>",
  "entry_function": "findMedianSortedArrays",
  "template": "def findMedianSortedArrays(nums1, nums2):\n    ",
  "solution_text": "<h3>Median of Two Sorted Arrays - Binary Search Solution</h3><p><strong>Algorithm:</strong></p><ol><li>Ensure nums1 is the smaller array for optimization</li><li>Use binary search on nums1 to find the correct partition</li><li>The partition divides both arrays such that left part has (m+n+1)//2 elements</li><li>Check if partition is valid: max_left <= min_right for both sides</li><li>Calculate median based on total length (odd/even)</li></ol><p><strong>Time Complexity:</strong> O(log(min(m,n))) - binary search on smaller array</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Binary search on partitions, not elements</li><li>Handle edge cases with infinity values</li><li>Median calculation differs for odd/even total length</li><li>Ensures left partition has correct number of elements</li></ul>",
  "solution_code": "def findMedianSortedArrays(nums1, nums2):\n    # Ensure nums1 is the smaller array\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    \n    m, n = len(nums1), len(nums2)\n    left, right = 0, m\n    \n    while left <= right:\n        partition1 = (left + right) // 2\n        partition2 = (m + n + 1) // 2 - partition1\n        \n        # Handle edge cases with infinity\n        max_left1 = float('-inf') if partition1 == 0 else nums1[partition1 - 1]\n        min_right1 = float('inf') if partition1 == m else nums1[partition1]\n        \n        max_left2 = float('-inf') if partition2 == 0 else nums2[partition2 - 1]\n        min_right2 = float('inf') if partition2 == n else nums2[partition2]\n        \n        if max_left1 <= min_right2 and max_left2 <= min_right1:\n            # Found the correct partition\n            if (m + n) % 2 == 0:\n                return (max(max_left1, max_left2) + min(min_right1, min_right2)) / 2.0\n            else:\n                return float(max(max_left1, max_left2))\n        elif max_left1 > min_right2:\n            right = partition1 - 1\n        else:\n            left = partition1 + 1\n    \n    return 0.0",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Prepare arguments for findMedianSortedArrays function\"\"\"\n    return (test_case_input['nums1'], test_case_input['nums2'])",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the median result with tolerance for floating point comparison\"\"\"\n    def format_float(val):\n        if isinstance(val, (int, float)):\n            return f\"{val:.5f}\"\n        return str(val)\n    \n    # Handle floating point comparison with small tolerance\n    if isinstance(actual_output, (int, float)) and isinstance(expected_output, (int, float)):\n        tolerance = 1e-5\n        passed = abs(actual_output - expected_output) < tolerance\n    else:\n        passed = actual_output == expected_output\n    \n    output_str = format_float(actual_output)\n    \n    return [passed, output_str]",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums1": [1, 3],
        "nums2": [2]
      },
      "output": 2.0
    },
    {
      "id": 2,
      "input": {
        "nums1": [1, 2],
        "nums2": [3, 4]
      },
      "output": 2.5
    },
    {
      "id": 3,
      "input": {
        "nums1": [0, 0],
        "nums2": [0, 0]
      },
      "output": 0.0
    },
    {
      "id": 4,
      "input": {
        "nums1": [],
        "nums2": [1]
      },
      "output": 1.0
    },
    {
      "id": 5,
      "input": {
        "nums1": [2],
        "nums2": []
      },
      "output": 2.0
    },
    {
      "id": 6,
      "input": {
        "nums1": [1, 2],
        "nums2": [3, 4]
      },
      "output": 2.5
    },
    {
      "id": 7,
      "input": {
        "nums1": [],
        "nums2": [2, 3]
      },
      "output": 2.5
    },
    {
      "id": 8,
      "input": {
        "nums1": [1],
        "nums2": [2, 3, 4]
      },
      "output": 2.5
    },
    {
      "id": 9,
      "input": {
        "nums1": [1, 2, 3],
        "nums2": [4, 5, 6]
      },
      "output": 3.5
    },
    {
      "id": 10,
      "input": {
        "nums1": [1, 3, 8],
        "nums2": [7, 9, 10, 11]
      },
      "output": 8.0
    }
  ]
}