{
  "filename": "number-of-one-bits",
  "title": "Number of 1 Bits",
  "keywords": [
    "number",
    "bits",
    "hamming",
    "weight",
    "binary",
    "count"
  ],
  "description": "<h2>Number of 1 Bits</h2><p>Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: n = 00000000000000000000000000001011<br>Output: 3<br>Explanation: The input binary string has a total of three '1' bits.</li><li><strong>Example 2:</strong><br>Input: n = 00000000000000000000000010000000<br>Output: 1<br>Explanation: The input binary string has a total of one '1' bit.</li><li><strong>Example 3:</strong><br>Input: n = 11111111111111111111111111111101<br>Output: 31<br>Explanation: The input binary string has a total of thirty one '1' bits.</li></ul><h3>Constraints:</h3><ul><li>The input must be a binary string of length 32.</li></ul>",
  "template": "def hammingWeight(n):\n    ",
  "solution_text": "Use bit manipulation to count set bits. n & (n-1) removes the rightmost set bit.",
  "solution_code": "def hammingWeight(n):\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1  # Remove rightmost set bit\n    return count",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "n": 11
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "n": 128
      },
      "output": 1
    },
    {
      "id": 3,
      "input": {
        "n": 2147483647
      },
      "output": 31
    }
  ]
}