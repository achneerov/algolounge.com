{
  "filename": "palindrome-checker",
  "title": "Palindrome Checker",
  "keywords": [
    "palindrome",
    "string",
    "two-pointers",
    "alphanumeric",
    "easy"
  ],
  "description": "<h2>Palindrome Checker</h2><p>Determine if a string is a palindrome, ignoring non-alphanumeric characters and case.</p><h3>Examples:</h3><ul><li>Input: \"A man, a plan, a canal: Panama\"<br>Output: true<br>Explanation: \"amanaplanacanalpanama\" reads the same forwards and backwards</li><li>Input: \"race a car\"<br>Output: false</li></ul><h3>Constraints:</h3><ul><li>Ignore punctuation and spaces</li><li>Case-insensitive</li></ul>",
  "entry_function": "isPalindrome",
  "template": "def isPalindrome(s):\n  ",
  "solution_text": "<h3>Palindrome Checker</h3><p><strong>Algorithm:</strong></p><ol><li>Filter to keep only alphanumeric characters</li><li>Convert to lowercase</li><li>Check if string equals its reverse</li></ol><p><strong>Time Complexity:</strong> O(n) - process string once</p><p><strong>Space Complexity:</strong> O(n) - filtered string</p><p><strong>Key Insights:</strong></p><ul><li>isalnum() method filters both letters and digits efficiently</li><li>Lowercase conversion ensures case-insensitive comparison</li><li>String slicing [::-1] reverses string in O(n) time</li><li>Empty string and single characters are trivially palindromes</li></ul>",
  "solution_code": "def isPalindrome(s):\n    filtered = ''.join(c.lower() for c in s if c.isalnum())\n    return filtered == filtered[::-1]",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Prepare arguments for isPalindrome function\"\"\"\n    return (test_case_input['s'],)",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the palindrome result\"\"\"\n    def bool_to_string(val):\n        return 'true' if val else 'false'\n    \n    # Convert expected output string to boolean for comparison\n    expected_bool = expected_output == 'true' if isinstance(expected_output, str) else expected_output\n    \n    passed = actual_output == expected_bool\n    output_str = bool_to_string(actual_output)\n    \n    return [passed, output_str]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "s": "A man, a plan, a canal: Panama"
      },
      "output": "true"
    },
    {
      "id": 2,
      "input": {
        "s": "race a car"
      },
      "output": "false"
    },
    {
      "id": 3,
      "input": {
        "s": ""
      },
      "output": "true"
    },
    {
      "id": 4,
      "input": {
        "s": "Was it a car or a cat I saw?"
      },
      "output": "true"
    },
    {
      "id": 5,
      "input": {
        "s": "hello"
      },
      "output": "false"
    },
    {
      "id": 6,
      "input": {
        "s": "Madam"
      },
      "output": "true"
    },
    {
      "id": 7,
      "input": {
        "s": "12321"
      },
      "output": "true"
    },
    {
      "id": 8,
      "input": {
        "s": "No lemon, no melon"
      },
      "output": "true"
    },
    {
      "id": 9,
      "input": {
        "s": "a"
      },
      "output": "true"
    },
    {
      "id": 10,
      "input": {
        "s": "ab"
      },
      "output": "false"
    }
  ]
}
