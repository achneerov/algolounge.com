{
  "filename": "test-binary-tree-depth",
  "title": "Test Binary Tree Depth",
  "keywords": ["binary", "tree", "depth", "test", "convert", "custom"],
  "description": "<h2>Binary Tree Maximum Depth (Test Question)</h2><p>Given the root of a binary tree, return its maximum depth. This is a test question to validate convert_input and test_code functionality.</p>",
  "template": "def maxDepth(root):\n    ",
  "solution_text": "Recursive approach to find maximum depth of binary tree.",
  "solution_code": "def maxDepth(root):\n    if not root:\n        return 0\n    return 1 + max(maxDepth(root.left), maxDepth(root.right))",
  "convert_input": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef convert_input(arr):\n    if not arr:\n        return None\n    root = TreeNode(arr[0])\n    queue = [root]\n    i = 1\n    while queue and i < len(arr):\n        node = queue.pop(0)\n        if i < len(arr) and arr[i] is not None:\n            node.left = TreeNode(arr[i])\n            queue.append(node.left)\n        i += 1\n        if i < len(arr) and arr[i] is not None:\n            node.right = TreeNode(arr[i])\n            queue.append(node.right)\n        i += 1\n    return root",
  "test_code": "def test_code(result):\n    # The result should be an integer representing depth\n    if isinstance(result, int) and result >= 0:\n        return [True, result]\n    else:\n        return [False, f'Expected non-negative integer, got {type(result).__name__}: {result}']",
  "order_matters": true,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "root": [3, 9, 20, null, null, 15, 7]
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "root": [1, null, 2]
      },
      "output": 2
    },
    {
      "id": 3,
      "input": {
        "root": []
      },
      "output": 0
    }
  ]
}