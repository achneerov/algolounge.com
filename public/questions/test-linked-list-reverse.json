{
  "filename": "test-linked-list-reverse",
  "title": "Test Reverse Linked List",
  "keywords": ["linked", "list", "reverse", "test", "convert", "custom"],
  "description": "<h2>Reverse Linked List (Test Question)</h2><p>Given the head of a singly linked list, reverse the list. This is a test question to validate convert_input and test_code work for LinkedList.</p>",
  
  "languages": {
    "java": {
      "template": "class Solution {\n    public ListNode reverseList(ListNode head) {\n        \n    }\n}",
      "solution_text": "Iterative approach to reverse a linked list.",
      "solution_code": "class Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode curr = head;\n        while (curr != null) {\n            ListNode next = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n}",
      "convert_input": "class ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n\nclass ConvertHelper {\n    static Object convert_input(int[] arr) {\n        if (arr == null || arr.length == 0) return null;\n        ListNode head = new ListNode(arr[0]);\n        ListNode curr = head;\n        for (int i = 1; i < arr.length; i++) {\n            curr.next = new ListNode(arr[i]);\n            curr = curr.next;\n        }\n        return head;\n    }\n}",
      "test_code": "class TestHelper {\n    static Object[] test_code(Object result) {\n        if (result == null) {\n            return new Object[]{true, new int[0]};\n        }\n        \n        // Convert ListNode back to array\n        java.util.List<Integer> list = new java.util.ArrayList<>();\n        ListNode curr = (ListNode) result;\n        while (curr != null) {\n            list.add(curr.val);\n            curr = curr.next;\n        }\n        int[] arr = list.stream().mapToInt(i -> i).toArray();\n        return new Object[]{true, arr};\n    }\n}"
    }
  },

  "order_matters": true,

  "test_cases": [
    {
      "id": 1,
      "input": {
        "head": [1, 2, 3, 4, 5]
      },
      "output": [5, 4, 3, 2, 1]
    },
    {
      "id": 2,
      "input": {
        "head": [1, 2]
      },
      "output": [2, 1]
    },
    {
      "id": 3,
      "input": {
        "head": []
      },
      "output": []
    }
  ]
}