{
  "filename": "three-sum",
  "title": "3Sum",
  "keywords": [
    "three",
    "sum",
    "triplets",
    "array",
    "two",
    "pointers",
    "duplicates"
  ],
  "description": "<h2>3Sum</h2><p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p><p>Notice that the solution set must not contain duplicate triplets.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: nums = [-1,0,1,2,-1,-4]<br>Output: [[-1,-1,2],[-1,0,1]]<br>Explanation:<br>nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.<br>nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.<br>The distinct triplets are [-1,0,1] and [-1,-1,2].</li><li><strong>Example 2:</strong><br>Input: nums = [0,1,1]<br>Output: []<br>Explanation: The only possible triplet does not sum up to 0.</li><li><strong>Example 3:</strong><br>Input: nums = [0,0,0]<br>Output: [[0,0,0]]<br>Explanation: The only possible triplet sums up to 0.</li></ul><h3>Constraints:</h3><ul><li>3 <= nums.length <= 3000</li><li>-10<sup>5</sup> <= nums[i] <= 10<sup>5</sup></li></ul>",
  "entry_function": "threeSum",
  "template": "def threeSum(nums):\n    ",
  "solution_text": "Sort the array and use two pointers technique to find triplets that sum to zero.",
  "solution_code": "def threeSum(nums):\n    nums.sort()\n    result = []\n    \n    for i in range(len(nums) - 2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        \n        left, right = i + 1, len(nums) - 1\n        \n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            \n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                result.append([nums[i], nums[left], nums[right]])\n                \n                while left < right and nums[left] == nums[left + 1]:\n                    left += 1\n                while left < right and nums[right] == nums[right - 1]:\n                    right -= 1\n                \n                left += 1\n                right -= 1\n    \n    return result",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          -1,
          0,
          1,
          2,
          -1,
          -4
        ]
      },
      "output": [
        [
          -1,
          -1,
          2
        ],
        [
          -1,
          0,
          1
        ]
      ]
    },
    {
      "id": 2,
      "input": {
        "nums": [
          0,
          1,
          1
        ]
      },
      "output": []
    },
    {
      "id": 3,
      "input": {
        "nums": [
          0,
          0,
          0
        ]
      },
      "output": [
        [
          0,
          0,
          0
        ]
      ]
    }
  ]
}