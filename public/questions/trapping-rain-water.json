{
  "index": 74,
  "filename": "trapping-rain-water",
  "title": "Trapping Rain Water",
  "keywords": [
    "trapping",
    "rain",
    "water",
    "leetcode",
    "42",
    "given",
    "array",
    "non-negative",
    "integers",
    "height",
    "two-pointers"
  ],
  "description": "<h2>Trapping Rain Water</h2><p>Leetcode 42. Trapping Rain Water</p><p></p><p>You are given an array of non-negative integers <code>height</code> which represent an elevation map. Each value <code>height[i]</code> represents the height of a bar, which has a width of <code>1</code>.</p><p></p><p>Return the maximum amount of water that can be trapped between the bars.</p><h3>Examples:</h3><ul><li>Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]<br><pre>Elevation map (█ = wall, ≈ = water):\n       █\n   █≈≈≈██≈█\n █≈██≈██████\n0 1 0 2 1 0 1 3 2 1 2 1</pre>Output: 6</li><li>Input: height = [4,2,0,3,2,5]<br><pre>Elevation map (█ = wall, ≈ = water):\n     █\n█≈≈≈≈█\n█≈≈█≈█\n██≈███\n██≈███\n4 2 0 3 2 5</pre>Output: 9</li></ul><h3>Constraints:</h3><ul><li>1 &lt;= height.length &lt;= 1000</li><li>0 &lt;= height[i] &lt;= 1000</li></ul>",
  "entry_function": "trappingRainWater",
  "template": "def trappingRainWater(height):\n    ",
  "solution_text": "<h3>Trapping Rain Water</h3><p><strong>Algorithm:</strong></p><ol><li>Use two pointers starting from left and right ends</li><li>Track the maximum height seen so far from both sides</li><li>At each position, water trapped = min(left_max, right_max) - current_height</li><li>Move the pointer with the smaller max height inward</li><li>Accumulate total water trapped</li></ol><p><strong>Time Complexity:</strong> O(n) - single pass through array</p><p><strong>Space Complexity:</strong> O(1) - constant space for pointers and variables</p><p><strong>Key Insights:</strong></p><ul><li>Water level at any position is determined by the minimum of max heights on both sides</li><li>Two pointers technique processes from both ends simultaneously</li><li>Move pointer with smaller max height to potentially find larger boundaries</li><li>No water can be trapped at the edges</li></ul>",
  "solution_code": "def trappingRainWater(height):\n    if not height or len(height) < 3:\n        return 0\n    \n    left, right = 0, len(height) - 1\n    left_max = right_max = 0\n    water = 0\n    \n    while left < right:\n        if height[left] < height[right]:\n            if height[left] >= left_max:\n                left_max = height[left]\n            else:\n                water += left_max - height[left]\n            left += 1\n        else:\n            if height[right] >= right_max:\n                right_max = height[right]\n            else:\n                water += right_max - height[right]\n            right -= 1\n    \n    return water",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Extract height array from test case input\"\"\"\n    return (test_case_input['height'],)",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the amount of trapped water\"\"\"\n    passed = actual_output == expected_output\n    output_str = str(actual_output)\n    \n    return [passed, output_str]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "height": [
          0,
          1,
          0,
          2,
          1,
          0,
          1,
          3,
          2,
          1,
          2,
          1
        ]
      },
      "output": 6
    },
    {
      "id": 2,
      "input": {
        "height": [
          4,
          2,
          0,
          3,
          2,
          5
        ]
      },
      "output": 9
    },
    {
      "id": 3,
      "input": {
        "height": [
          0,
          0,
          0
        ]
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "height": [
          3,
          0,
          2,
          0,
          4
        ]
      },
      "output": 7
    },
    {
      "id": 5,
      "input": {
        "height": [
          5,
          4,
          1,
          2
        ]
      },
      "output": 1
    },
    {
      "id": 6,
      "input": {
        "height": [
          2,
          1,
          2
        ]
      },
      "output": 1
    }
  ]
}
