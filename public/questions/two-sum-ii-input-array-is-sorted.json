{
  "filename": "two-sum-ii-input-array-is-sorted",
  "title": "Two Sum II - Input Array Is Sorted",
  "keywords": [
    "two",
    "sum",
    "leetcode",
    "167",
    "input",
    "array",
    "sorted",
    "given",
    "integers",
    "two-pointers"
  ],
  "description": "<h2>Two Sum II - Input Array Is Sorted</h2><p>Leetcode 167. Two Sum II - Input Array Is Sorted</p><p></p><p>Given an array of integers <code>numbers</code> that is sorted in <strong>non-decreasing order</strong>.</p><p></p><p>Return the indices (<strong>1-indexed</strong>) of two numbers, <code>[index1, index2]</code>, such that they add up to a given target number <code>target</code> and <code>index1 &lt; index2</code>. Note that <code>index1</code> and <code>index2</code> cannot be equal, therefore you may not use the same element twice.</p><p></p><p>There will always be <strong>exactly one valid solution</strong>.</p><p></p><p>Your solution must use <code>O(1)</code> additional space.</p><h3>Examples:</h3><ul><li>Input: numbers = [1,2,3,4], target = 3<br><br>Output: [1,2]<br><br>Explanation: The sum of 1 and 2 is 3. Since we are assuming a 1-indexed array, index1 = 1, index2 = 2. We return [1, 2].</li><li>Input: numbers = [2,7,11,15], target = 9<br><br>Output: [1,2]</li><li>Input: numbers = [2,3,4], target = 6<br><br>Output: [1,3]</li></ul><h3>Constraints:</h3><ul><li>2 &lt;= numbers.length &lt;= 1000</li><li>-1000 &lt;= numbers[i] &lt;= 1000</li><li>-1000 &lt;= target &lt;= 1000</li><li>The array is sorted in non-decreasing order</li></ul>",
  "entry_function": "twoSumII",
  "template": "def twoSumII(numbers, target):\n    ",
  "solution_text": "<h3>Two Sum II - Input Array Is Sorted</h3><p><strong>Algorithm:</strong></p><ol><li>Use two pointers: left at start, right at end</li><li>Calculate sum of numbers at both pointers</li><li>If sum equals target, return the 1-indexed positions</li><li>If sum is less than target, move left pointer right</li><li>If sum is greater than target, move right pointer left</li><li>Repeat until solution is found</li></ol><p><strong>Time Complexity:</strong> O(n) - single pass with two pointers</p><p><strong>Space Complexity:</strong> O(1) - only using two pointer variables</p><p><strong>Key Insights:</strong></p><ul><li>Two-pointer technique works well on sorted arrays</li><li>Moving pointers based on sum comparison guides toward solution</li><li>Return 1-indexed positions (not 0-indexed)</li><li>Guaranteed exactly one solution exists</li></ul>",
  "solution_code": "def twoSumII(numbers, target):\n    left = 0\n    right = len(numbers) - 1\n    \n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        \n        if current_sum == target:\n            # Return 1-indexed positions\n            return [left + 1, right + 1]\n        elif current_sum < target:\n            # Sum too small, move left pointer right\n            left += 1\n        else:\n            # Sum too large, move right pointer left\n            right -= 1\n    \n    # Should never reach here given constraints\n    return []",
  "prepare": "def prepare(test_case_input):\n    \"\"\"Extract numbers and target from test case input\"\"\"\n    return (test_case_input['numbers'], test_case_input['target'])",
  "verify": "def verify(actual_output, expected_output):\n    \"\"\"Verify the two sum indices\"\"\"\n    def list_to_string(lst):\n        if not lst:\n            return '[]'\n        return '[' + ', '.join(str(x) for x in lst) + ']'\n    \n    passed = actual_output == expected_output\n    output_str = list_to_string(actual_output)\n    \n    return [passed, output_str]",
  "test_cases": [
    {
      "id": 1,
      "input": {
        "numbers": [1, 2, 3, 4],
        "target": 3
      },
      "output": [1, 2]
    },
    {
      "id": 2,
      "input": {
        "numbers": [2, 7, 11, 15],
        "target": 9
      },
      "output": [1, 2]
    },
    {
      "id": 3,
      "input": {
        "numbers": [2, 3, 4],
        "target": 6
      },
      "output": [1, 3]
    },
    {
      "id": 4,
      "input": {
        "numbers": [-1, 0],
        "target": -1
      },
      "output": [1, 2]
    },
    {
      "id": 5,
      "input": {
        "numbers": [1, 2, 3, 4, 5, 6, 7],
        "target": 13
      },
      "output": [6, 7]
    },
    {
      "id": 6,
      "input": {
        "numbers": [5, 25, 75],
        "target": 100
      },
      "output": [2, 3]
    }
  ]
}
