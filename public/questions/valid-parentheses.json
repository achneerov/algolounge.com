{
  "filename": "valid-parentheses",
  "title": "Valid Parentheses",
  "keywords": [
    "valid",
    "parentheses",
    "brackets",
    "stack",
    "string",
    "matching"
  ],
  "description": "<h2>Valid Parentheses</h2><p>Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p><p>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li><li>Every close bracket has a corresponding open bracket of the same type.</li></ol><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: s = \"()\"<br>Output: true</li><li><strong>Example 2:</strong><br>Input: s = \"()[]{}\"<br>Output: true</li><li><strong>Example 3:</strong><br>Input: s = \"(]\"<br>Output: false</li></ul><h3>Constraints:</h3><ul><li>1 <= s.length <= 10<sup>4</sup></li><li>s consists of parentheses only '()[]{}' .</li></ul>",
  "template": "def isValid(s):\n    ",
  "solution_text": "Use a stack to match opening and closing brackets.",
  "solution_code": "def isValid(s):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in s:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            stack.append(char)\n    \n    return not stack",
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "s": "()"
      },
      "output": true
    },
    {
      "id": 2,
      "input": {
        "s": "()[]{}"
      },
      "output": true
    },
    {
      "id": 3,
      "input": {
        "s": "(]"
      },
      "output": false
    }
  ]
}