#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if environment files exist
if [ ! -f "backend/.env.local" ]; then
  echo -e "${RED}Error: backend/.env.local not found${NC}"
  echo -e "Please run ${YELLOW}./setup${NC} first"
  exit 1
fi

if [ ! -f "frontend/src/environments/environment.ts" ]; then
  echo -e "${RED}Error: frontend environment.ts not found${NC}"
  echo -e "Please run ${YELLOW}./setup${NC} first"
  exit 1
fi

# Load environment
NODE_ENV=$(grep "NODE_ENV" backend/.env.local | cut -d '=' -f 2)

echo -e "${BLUE}AlgoLounge - Starting servers (${NODE_ENV} mode)${NC}\n"

# Kill any existing processes on ports 3000 and 4200 (gracefully)
cleanup() {
  echo -e "\n${YELLOW}Shutting down servers...${NC}"
  kill $FRONTEND_PID $BACKEND_PID 2>/dev/null || true
  exit 0
}

trap cleanup SIGINT SIGTERM

# Start backend
echo -e "${GREEN}Starting backend server on port 3000...${NC}"
cd backend
if [ "$NODE_ENV" = "production" ]; then
  npm run build > /tmp/backend.log 2>&1 &
else
  npm run dev > /tmp/backend.log 2>&1 &
fi
BACKEND_PID=$!
cd ..

# Wait for backend to start
sleep 2

# Start frontend
echo -e "${GREEN}Starting frontend dev server on port 4200...${NC}"
cd frontend
npm start > /tmp/frontend.log 2>&1 &
FRONTEND_PID=$!
cd ..

# Wait for frontend to start
sleep 3

echo -e "\n${GREEN}âœ“ Both servers are running!${NC}\n"
echo -e "Frontend: ${BLUE}http://localhost:4200${NC}"
echo -e "Backend:  ${BLUE}http://localhost:3000${NC}"
echo -e "\nPress ${YELLOW}Ctrl+C${NC} to stop both servers\n"

# Monitor processes
wait
